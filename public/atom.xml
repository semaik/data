<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Semaik.</title>
  
  <subtitle>技术博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-09-10T09:47:12.176Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Semaik.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker部署nginx及web集群</title>
    <link href="http://example.com/2020/09/10/Docker%E9%83%A8%E7%BD%B2nginx%E5%8F%8Aweb%E9%9B%86%E7%BE%A4/"/>
    <id>http://example.com/2020/09/10/Docker%E9%83%A8%E7%BD%B2nginx%E5%8F%8Aweb%E9%9B%86%E7%BE%A4/</id>
    <published>2020-09-10T09:42:00.000Z</published>
    <updated>2020-09-10T09:47:12.176Z</updated>
    
    <content type="html"><![CDATA[<p>在容器部署基于centos镜像的nginx：</p><p>首先将nginx软件包放入物理机（虚拟机）中</p><p>进去容器后，什么都没有，环境相当干净，所以各种命令需要自己安装</p><p>使用yum provides 查看命令的软件包，并且进行安装，即可使用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum provides ip<span class="regexp">/ifconfig/</span>scp</span><br><span class="line">yum -y install iproute   <span class="regexp">//i</span>p</span><br><span class="line">yum -y install net-tools <span class="regexp">//i</span>fconfig</span><br><span class="line">yum -y install openssh-clients  <span class="regexp">//</span>scp</span><br></pre></td></tr></table></figure><p>准备nginx环境</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">yum</span> <span class="literal">-</span><span class="comment">y</span> <span class="comment">install</span> <span class="comment">gcc</span> <span class="comment">gcc</span><span class="literal">-</span><span class="comment">c</span>++ <span class="comment">pcre</span><span class="literal">-</span><span class="comment">devel</span> <span class="comment">zlib</span><span class="literal">-</span><span class="comment">devel</span> <span class="comment">openssl</span><span class="literal">-</span><span class="comment">devel</span> <span class="comment">make</span></span><br></pre></td></tr></table></figure><p>查看容器的IP地址</p><p><img src="/images/pasted-20.png" alt="upload successful"></p><p>退出容器：exit</p><p>查看本地ip，docker网卡</p><p><img src="/images/pasted-21.png" alt="upload successful"></p><p>方法一：在容器中，将物理机的软件包拷贝到容器中</p><p><img src="/images/pasted-22.png" alt="upload successful"></p><p>方法二：在物理机中，3a9f…0c4为容器的id，也可以使用容器名（–name指定的名称）</p><p><img src="/images/pasted-23.png" alt="upload successful"></p><h6 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h6><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar zxf nginx-<span class="number">1.12</span>.<span class="number">0</span>.tar.gz -C <span class="regexp">/usr/</span>src</span><br><span class="line">cd <span class="regexp">/usr/</span>src<span class="regexp">/nginx-1.12.0/</span></span><br><span class="line">.<span class="regexp">/configure --prefix=/u</span>sr<span class="regexp">/local/</span>nginx --user=nginx --<span class="keyword">group</span>=ngixn --with-http_stub_status_module --with-pcre &amp;&amp; make &amp;&amp; make install</span><br><span class="line">useradd nginx</span><br><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin<span class="regexp">/nginx /u</span>sr<span class="regexp">/local/</span>sbin/nginx</span><br><span class="line">/nginx</span><br></pre></td></tr></table></figure><p>修改页面文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;172.17.0.2&quot;</span> &gt; <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>html/index.html</span><br></pre></td></tr></table></figure><p>启动nginx</p><p><img src="/images/pasted-24.png" alt="upload successful"></p><p>测试</p><p><img src="/images/pasted-25.png" alt="upload successful"></p><p>为了后面做web集群时方便使用，可以将上面安装好命令与nginx的容器做一个镜像，方便后期使用。</p><p>将配置好的容器制作成一个镜像</p><p>docker commit 容器id  镜像名称</p><p><img src="/images/pasted-26.png" alt="upload successful"></p><p>将做好的镜像导出到本地（用于做备份）</p><p><img src="/images/pasted-27.png" alt="upload successful"></p><p>模拟误删除镜像</p><p><img src="/images/pasted-28.png" alt="upload successful"></p><p>将已导出的镜像tar包，再导入进来（这时发现删除的镜像又回来了）</p><p><img src="/images/pasted-29.png" alt="upload successful"></p><p>WEB集群<br>使用zu镜像做一个web2容器</p><p><img src="/images/pasted-30.png" alt="upload successful"></p><p><img src="/images/pasted-31.png" alt="upload successful"></p><p>修改页面文件</p><p><img src="/images/pasted-32.png" alt="upload successful"></p><p>启动nginx，并退出容器</p><p><img src="/images/pasted-33.png" alt="upload successful"></p><p>使用zu镜像做一个web3容器</p><p><img src="/images/pasted-34.png" alt="upload successful"></p><p>修改页面文件</p><p><img src="/images/pasted-35.png" alt="upload successful"></p><p>启动nginx</p><p><img src="/images/pasted-36.png" alt="upload successful"></p><p><img src="/images/pasted-37.png" alt="upload successful"></p><h6 id="本地部署nginx"><a href="#本地部署nginx" class="headerlink" title="本地部署nginx"></a>本地部署nginx</h6><p>安装环境</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span>  pcre-devel zlib-devel openssl-devel</span><br></pre></td></tr></table></figure><p>安装nginx</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxf nginx-<span class="number">1.12</span>.<span class="number">0</span>.tar.gz -C <span class="regexp">/usr/</span>src/</span><br><span class="line">cd <span class="regexp">/usr/</span>src<span class="regexp">/nginx-1.12.0/</span></span><br><span class="line">.<span class="regexp">/configure --prefix=/u</span>sr<span class="regexp">/local/</span>nginx --user=nginx --<span class="keyword">group</span>=nginx --with-http_stub_status_module --with-pcre &amp;&amp; make &amp;&amp; make install</span><br><span class="line">useradd nginx</span><br><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin<span class="regexp">/nginx /u</span>sr<span class="regexp">/local/</span>sbin/nginx</span><br></pre></td></tr></table></figure><p>修改配置文件<br>vim /usr/local/nginx/conf/nginx.conf</p><p><img src="/images/pasted-38.png" alt="upload successful"><br>启动nginx</p><p><img src="/images/pasted-39.png" alt="upload successful"><br>测试</p><p><img src="/images/pasted-40.png" alt="upload successful"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在容器部署基于centos镜像的nginx：&lt;/p&gt;
&lt;p&gt;首先将nginx软件包放入物理机（虚拟机）中&lt;/p&gt;
&lt;p&gt;进去容器后，什么都没有，环境相当干净，所以各种命令需要自己安装&lt;/p&gt;
&lt;p&gt;使用yum provides 查看命令的软件包，并且进行安装，即可使用&lt;/p</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>commit构建镜像</title>
    <link href="http://example.com/2020/09/10/commit%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/"/>
    <id>http://example.com/2020/09/10/commit%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/</id>
    <published>2020-09-10T09:40:00.000Z</published>
    <updated>2020-09-10T09:41:49.692Z</updated>
    
    <content type="html"><![CDATA[<h6 id="用docker-commit构建映像"><a href="#用docker-commit构建映像" class="headerlink" title="用docker commit构建映像"></a>用docker commit构建映像</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="number">1</span><span class="selector-class">.docker</span> run -<span class="selector-tag">i</span> -t centos /bin/bash　　<span class="comment">//启动一个容器，启动后默认进入该窗口的bash进程</span></span><br><span class="line">　　<span class="number">2</span><span class="selector-class">.yum</span> install -y epel-release<span class="selector-class">.noarch</span>　　<span class="comment">//为启动的窗口安装软件源</span></span><br><span class="line">　　<span class="number">3</span><span class="selector-class">.yum</span> install -y nginx　　<span class="comment">//为启动的容器安装nginx</span></span><br><span class="line">　　<span class="number">4</span><span class="selector-class">.exit</span>　　<span class="comment">//退出该容器，回到宿主机环境</span></span><br><span class="line">　　<span class="number">5</span><span class="selector-class">.docker</span> commit 容器ID zx/nginx　　<span class="comment">//将上次创建的窗口ID当作映像提交到本地,zrs是repository名称,nginx是image名称</span></span><br><span class="line">　　<span class="number">6</span><span class="selector-class">.docker</span> images　　<span class="comment">//可以查看到上步提交的映像</span></span><br></pre></td></tr></table></figure><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><p>　　　　1.一定要区分开容器和映像的区别；</p><p>　　　　2.有了zx/nginx后，下次可以直接使用该映像来启动容器，而不用为这个容器安装nginx;</p><p>　　　　3.docker commit -m=”this is a container contains nginx” –author=”zx” 容器ID zx/nginx，类似git不作多余解释；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;用docker-commit构建映像&quot;&gt;&lt;a href=&quot;#用docker-commit构建映像&quot; class=&quot;headerlink&quot; title=&quot;用docker commit构建映像&quot;&gt;&lt;/a&gt;用docker commit构建映像&lt;/h6&gt;&lt;figure c</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker私有仓库</title>
    <link href="http://example.com/2020/09/10/Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <id>http://example.com/2020/09/10/Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</id>
    <published>2020-09-10T09:30:00.000Z</published>
    <updated>2020-09-10T09:39:40.097Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Docker的公共仓库"><a href="#Docker的公共仓库" class="headerlink" title="Docker的公共仓库"></a><a href="https://hub.docker.com/">Docker的公共仓库</a></h5><p>由Docker公司维护的Registry，用户也可以将自己的镜像保存到DockerHub上中免费的response中，因为在国内访问由很多的限制<br>登录方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u 用户名 密码 https:<span class="regexp">//</span></span><br></pre></td></tr></table></figure><p>登录后下载方法</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 用户名/images名:<span class="keyword">tag</span></span><br></pre></td></tr></table></figure><h5 id="Quay"><a href="#Quay" class="headerlink" title="Quay"></a><a href="https://quay.io/">Quay</a></h5><p>被红帽收购后速度相当慢，红帽对国内还不是完全开放，是一个私人注册托管中心，它上面更多的是很多用户自己上传制作的镜像，没有很多的官方镜像，使用面也不是很广</p><h5 id="阿里云镜像仓库"><a href="#阿里云镜像仓库" class="headerlink" title="阿里云镜像仓库"></a>阿里云镜像仓库</h5><p>是国内提供docker镜像的仓库，需要用户登录后在控制中心，找到容器镜像服务，可以镜像镜像搜索、新建自己的仓库、也包括官方镜像和其他用户开放的镜像，官方镜像是直接拿取的DockerHub的镜像，属于国内的一个缓存。</p><p>这些公有镜像不适合工作中去使用，接下来就看私有仓库</p><h5 id="使用registry私有仓库镜像"><a href="#使用registry私有仓库镜像" class="headerlink" title="使用registry私有仓库镜像"></a>使用registry私有仓库镜像</h5><p>Harbor仓库在微服务架构的文章中已经写到怎么使用了，这里就不多说了</p><p>环境要：Docker服务器必须开启路由转发</p><p>使用两台主机来完成接下来验证私有仓库的使用</p><table><thead><tr><th align="center">主机</th><th align="center">服务</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">192.168.1.11</td><td align="center">已安装启动docker</td><td align="center">私有仓库</td></tr><tr><td align="center">192.168.1.12</td><td align="center">已安装启动docker</td><td align="center"></td></tr></tbody></table><h6 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h6><p>两台主机都做路由转发</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h6 id="下载私库镜像"><a href="#下载私库镜像" class="headerlink" title="下载私库镜像"></a>下载私库镜像</h6><p><code>192.168.1.11</code></p><p>下载2版本的私有仓库镜像，2版本是go语言写的，速度和安全性都比1要好，1是python写的</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ~]# docker pull registry:<span class="number">2</span></span><br></pre></td></tr></table></figure><p>创建私库在本地物理机的存放路径</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># mkdir -p /opt/data/registry</span></span><br></pre></td></tr></table></figure><p>运行私库</p><p>使用镜像实例化，并进行相应的指定，后台运行仓库</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 5000:5000 --restart always \</span><br><span class="line">-<span class="ruby">-volume /opt/data/registry/<span class="symbol">:/var/lib/registry</span> <span class="symbol">registry:</span><span class="number">2</span></span></span><br><span class="line"><span class="ruby"><span class="comment"># 解释参数</span></span></span><br><span class="line"><span class="ruby">-p：指定端口，<span class="number">5000</span><span class="symbol">:</span><span class="number">5000</span>表示在物理机开一个端口，在容器内开一个端口</span></span><br><span class="line"><span class="ruby">--restart always：无论容器遇到什么错误就会重启容器</span></span><br><span class="line"><span class="ruby">-v/--volume：本地目录映射到容器内的目录</span></span><br><span class="line"><span class="ruby"><span class="number">5000</span>：是registry的端口号</span></span><br><span class="line"><span class="ruby">/var/lib/registry：是registry仓库中存放镜像的目录</span></span><br></pre></td></tr></table></figure><p>运行起来后，在本地是可以监听到5000端口的</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ~]# netstat -anput | grep <span class="number">5000</span></span><br><span class="line">tcp6     <span class="number">0</span>      <span class="number">0</span> :::<span class="number">5000</span>      :::*         LISTEN      <span class="number">80040</span>/docker-proxy</span><br></pre></td></tr></table></figure><p>查看仓库中的镜像</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ~]# curl <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/v2/_catalog</span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[]&#125;  # 表示没有任何镜像</span><br></pre></td></tr></table></figure><h6 id="指定私库地址"><a href="#指定私库地址" class="headerlink" title="指定私库地址"></a>指定私库地址</h6><p>需要修改docker的服务文件，让docker知道私有仓库地址</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ~]# vim /usr/lib/systemd/system/docker.service </span><br><span class="line"># <span class="number">14</span>行的末尾添加--insecure-registry <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span></span><br><span class="line"># <span class="number">14</span>行也就是以ExecStart开头的一行</span><br></pre></td></tr></table></figure><p>重新加载配置文件，并重启服务生效</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># systemctl daemon-reload </span></span><br><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># systemctl restart docker</span></span><br></pre></td></tr></table></figure><p>查看服务状态，可以看到是否识别到了私有仓库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@localhost</span> <span class="string">~</span>]<span class="comment"># systemctl status docker -l</span></span><br><span class="line"><span class="comment"># 找到以下关键信息，则代表识别私库地址成功</span></span><br><span class="line">   <span class="attr">CGroup:</span> <span class="string">/system.slice/docker.service</span></span><br><span class="line">           <span class="string">├─80357</span> <span class="string">/usr/bin/dockerd</span> <span class="string">-H</span> <span class="string">fd://</span> <span class="string">--containerd=/run/containerd/containerd.sock</span> <span class="string">--insecure-registry</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span><span class="string">:5000</span></span><br><span class="line">           <span class="string">└─80477</span> <span class="string">/usr/bin/docker-proxy</span> <span class="string">-proto</span> <span class="string">tcp</span> <span class="string">-host-ip</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="string">-host-port</span> <span class="number">5000</span> <span class="string">-container-ip</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> <span class="string">-container-port</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><p><code>192.168.1.12</code><br>进行修改docker的文件去指向docker的私有仓库地址</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ~]# vim /usr/lib/systemd/system/docker.service </span><br><span class="line"># <span class="number">14</span>行的末尾添加--insecure-registry <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span></span><br><span class="line"># <span class="number">14</span>行也就是以ExecStart开头的一行</span><br><span class="line">[<span class="symbol">root@</span>localhost ~]# systemctl daemon-reload </span><br><span class="line">[<span class="symbol">root@</span>localhost ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h6 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h6><p><code>192.168.1.11</code><br>使用tag为镜像改个名字<br>注意：改名字要按照格式来私库ip:5000/镜像名，否则会上传失败<br>此时镜像名的作用：push到私库中（私库ip:5000），镜像名为httpd</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ~]# docker tag httpd:latest <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/httpd</span><br><span class="line">[<span class="symbol">root@</span>localhost ~]# docker tag centos:latest <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/centos</span><br><span class="line">[<span class="symbol">root@</span>localhost ~]# docker tag busybox:latest <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/busybox</span><br></pre></td></tr></table></figure><p>将改名后的镜像上传到私有仓库中</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ~]# docker push <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/httpd</span><br><span class="line">The push <span class="built_in">ref</span>ers to repository [<span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/httpd]</span><br><span class="line"><span class="number">25</span>a92d79dbfe: Pushed </span><br><span class="line">b5432b464616: Pushed </span><br><span class="line">e6699b4fc2e3: Pushed </span><br><span class="line"><span class="number">762</span>ba19e7ef1: Pushed </span><br><span class="line">f2cb0ecef392: Pushed </span><br><span class="line">[<span class="symbol">root@</span>localhost ~]# docker push <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/centos</span><br><span class="line">The push <span class="built_in">ref</span>ers to repository [<span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/centos]</span><br><span class="line"><span class="number">77</span>b174a6a187: Pushed </span><br><span class="line">[<span class="symbol">root@</span>localhost ~]# docker push <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/busybox</span><br><span class="line">The push <span class="built_in">ref</span>ers to repository [<span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/busybox]</span><br><span class="line">a6d503001157: Pushed</span><br></pre></td></tr></table></figure><p>查看上传后的私库中的镜像<br><code>192.168.1.12</code><br>查看到的镜像名和前面讲的是一样的</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># curl 192.168.1.11:5000/v2/_catalog</span></span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[<span class="string">&quot;busybox&quot;</span>,<span class="string">&quot;centos&quot;</span>,<span class="string">&quot;httpd&quot;</span>]&#125;</span><br></pre></td></tr></table></figure><p>下载镜像，速度相当快</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ~]# docker pull <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/httpd</span><br><span class="line"># 最后会输出下载地址</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/httpd:latest</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span>:<span class="number">5000</span>/httpd:latest</span><br></pre></td></tr></table></figure><p><code>192.168.1.11</code><br>查看镜像映射到本地的存储目录</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls <span class="regexp">/opt/</span>data<span class="regexp">/registry/</span>docker<span class="regexp">/registry/</span>v2/<span class="keyword">repositories</span></span><br><span class="line">busybox  centos  httpd</span><br></pre></td></tr></table></figure><h6 id="查看仓库中镜像的信息"><a href="#查看仓库中镜像的信息" class="headerlink" title="查看仓库中镜像的信息"></a>查看仓库中镜像的信息</h6><p>查看httpd镜像的tags</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# curl <span class="number">192.168</span>.<span class="number">1.11</span>:<span class="number">5000</span><span class="regexp">/v2/</span>httpd<span class="regexp">/tags/</span>list</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;httpd&quot;</span>,<span class="string">&quot;tags&quot;</span>:[<span class="string">&quot;latest&quot;</span>]&#125;</span><br></pre></td></tr></table></figure><p>查看镜像的hash值</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="number">192.168</span>.<span class="number">1.11</span>:<span class="number">5000</span><span class="regexp">/v2/</span>httpd<span class="regexp">/manifests/</span>latest \</span><br><span class="line">--header <span class="string">&quot;Accept: application/vnd.docker.distribution.manifest.v2+json&quot;</span></span><br><span class="line"># 找到第一个<span class="string">&quot;digest&quot;</span>:的值就是该镜像的hash值，以下的<span class="string">&quot;digest&quot;</span>:都是镜像层的hash值</span><br></pre></td></tr></table></figure><p>删除私库镜像</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 直接进入目录删除其中一个镜像的目录即可</span><br><span class="line">[root@localhost ~]# rm -rf <span class="regexp">/opt/</span>data<span class="regexp">/registry/</span>docker<span class="regexp">/registry/</span>v2<span class="regexp">/repositories/</span>httpd</span><br><span class="line">[root@localhost ~]# curl <span class="number">192.168</span>.<span class="number">1.11</span>:<span class="number">5000</span><span class="regexp">/v2/</span>_catalog</span><br><span class="line">&#123;<span class="string">&quot;repositories&quot;</span>:[<span class="string">&quot;busybox&quot;</span>,<span class="string">&quot;centos&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Docker的公共仓库&quot;&gt;&lt;a href=&quot;#Docker的公共仓库&quot; class=&quot;headerlink&quot; title=&quot;Docker的公共仓库&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker的公共仓库&lt;/a&gt;&lt;/h5</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础操作逻辑命令</title>
    <link href="http://example.com/2020/09/10/Docker%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E9%80%BB%E8%BE%91%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2020/09/10/Docker%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E9%80%BB%E8%BE%91%E5%91%BD%E4%BB%A4/</id>
    <published>2020-09-10T09:08:00.000Z</published>
    <updated>2020-09-10T09:28:29.395Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/pasted-15.png" alt="upload successful"></p><p>镜像小的原因：<br>Linux操作系统两个部分构成内核空间（kernel）、用户空间（rootfs）</p><p>查看docker的基础信息</p><p><code>docker info</code></p><p>查看docker中已经存在的镜像</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">参数：</span><br><span class="line">-<span class="ruby">a：列出本地所有的镜像（含中间映像层）</span></span><br><span class="line"><span class="ruby">-q：只显示镜像id</span></span><br><span class="line"><span class="ruby">--digests：显示镜像的摘要信息</span></span><br><span class="line"><span class="ruby">--no-trunc：显示完整的镜像信息</span></span><br></pre></td></tr></table></figure><p>在docker hub中查看关于该镜像的所有镜像</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">search</span></span><br><span class="line">例：</span><br><span class="line">docker <span class="built_in">search</span> ubuntu # 全网搜索ubuntu镜像</span><br></pre></td></tr></table></figure><p>下载镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull 镜像名   //默认下载tomcat:latest，意思是最新版，或者tomcat:<span class="number">3</span>.<span class="number">2</span>  下载<span class="number">3</span>.<span class="number">2</span>版本</span><br></pre></td></tr></table></figure><p>删除镜像</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名： 删除镜像，默认删除 镜像名:latest，这个镜像不能在运行中</span><br><span class="line">docker rmi <span class="operator">-f</span> 镜像名：强制删除</span><br><span class="line">docker rmi <span class="operator">-f</span> <span class="variable">$</span>（docker images <span class="literal">-qa</span>）：删除全部镜像</span><br></pre></td></tr></table></figure><p>导出镜像</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">save</span> <span class="selector-tag">-o</span> 压缩包名称 镜像名称</span><br><span class="line">例：将镜像导出当前目录下</span><br><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">save</span> <span class="selector-tag">-o</span> <span class="selector-tag">centos</span><span class="selector-class">.tar</span> <span class="selector-tag">centos</span><span class="selector-pseudo">:latest</span></span><br><span class="line">将镜像<span class="selector-tag">centos</span><span class="selector-pseudo">:latest</span>另存到虚拟机当前目录下，命名为<span class="selector-tag">centos</span><span class="selector-class">.tar</span></span><br></pre></td></tr></table></figure><p>导入镜像</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">load</span> &lt; <span class="selector-tag">centos</span><span class="selector-class">.tar</span></span><br></pre></td></tr></table></figure><p>重命名镜像名称</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">tag</span> <span class="title">旧镜像名称 新镜像名称</span></span><br><span class="line"><span class="title">例：</span></span><br><span class="line"><span class="title">docker</span> <span class="keyword">tag</span> <span class="title">500b941e6f79</span> tomcat7:jre7</span><br></pre></td></tr></table></figure><p>创建不运行容器</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">create</span> <span class="comment">--name web httpd</span></span><br></pre></td></tr></table></figure><p>创建并运行容器</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 88:80--name test --restart always centos:7 /bin/bash</span><br><span class="line">可用docker ps -a，查看容器运行状态</span><br><span class="line">参数：</span><br><span class="line">    -<span class="ruby">i  以交互方式登录</span></span><br><span class="line"><span class="ruby">    -t  允许以交互方式打开终端</span></span><br><span class="line"><span class="ruby">    -d  在后台运行</span></span><br><span class="line"><span class="ruby">    -p  映射端口，将容器中的<span class="number">80</span>端口映射成物理机中的<span class="number">88</span>端口</span></span><br><span class="line"><span class="ruby">    --name  添加容器名</span></span><br><span class="line"><span class="ruby">    --restart always  跟随docker启动而启动，就是当服务重启时、启动时，该容器也会运行</span></span><br><span class="line"><span class="ruby">    --rm  容器一旦停止就会被自动删除，不添加的话容器会永久保存在计算机中</span></span><br><span class="line"><span class="ruby">    --privileged  添加特权，不添加此参数 运行一些系统命令时错</span></span><br></pre></td></tr></table></figure><p>查看所有容器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker ps -a</span></span><br></pre></td></tr></table></figure><p>立马强制性退出容器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">kill</span> 容器<span class="keyword">id</span></span><br></pre></td></tr></table></figure><p>停止容器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">stop</span> 容器<span class="keyword">id</span></span><br></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">start</span> 容器<span class="keyword">id</span></span><br></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> 容器<span class="built_in">id</span> /bin/bash</span><br></pre></td></tr></table></figure><p>挂起容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p>取消挂起正常运行容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p>删除容器：（删除容器前需要停止容器）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器id</span><br><span class="line">如：容器正在运行中需要删除容器，就需要添加参数<span class="operator">-f</span></span><br><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> 容器id</span><br></pre></td></tr></table></figure><p>查看容器信息</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p>编写进入容器脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/bin/docker-enter</span><br><span class="line">!/bin/sh</span><br><span class="line"><span class="keyword">if</span> [ -e $(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)/nsenter ]; <span class="keyword">then</span></span><br><span class="line"> with boot2docker, nsenter is not <span class="keyword">in</span> the PATH but it is <span class="keyword">in</span> the same folder</span><br><span class="line">  NSENTER=$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)/nsenter</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  NSENTER=nsenter</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Usage: `basename &quot;</span><span class="variable">$0</span><span class="string">&quot;` CONTAINER [COMMAND [ARG]...]&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Enters the Docker CONTAINER and executes the specified COMMAND.&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;If COMMAND is not specified, runs an interactive shell in CONTAINER.&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  PID=$(docker inspect --format <span class="string">&quot;&#123;&#123;.State.Pid&#125;&#125;&quot;</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$PID</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line">  OPTS=<span class="string">&quot;--target <span class="variable">$PID</span> --mount --uts --ipc --net --pid --&quot;</span></span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># No command given.</span></span><br><span class="line">    <span class="comment"># Use su to clear all host environment variables except for TERM,</span></span><br><span class="line">    <span class="comment"># initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,</span></span><br><span class="line">    <span class="comment"># and start a login shell.</span></span><br><span class="line">    <span class="string">&quot;<span class="variable">$NSENTER</span>&quot;</span> <span class="variable">$OPTS</span> su - root</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    <span class="comment"># Use env to clear all host environment variables.</span></span><br><span class="line">    <span class="string">&quot;<span class="variable">$NSENTER</span>&quot;</span> <span class="variable">$OPTS</span> env --ignore-environment -- <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>给予权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x <span class="regexp">/usr/</span>bin/docker-enter</span><br></pre></td></tr></table></figure><p>可以使用该脚本，加容器name或者容器id来启动容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-enter 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><p>虚拟机版本低于7.7，进如容器后无法使用网络，因为默认是关闭路由转发的，需要手动开启。<br>退出容器在宿主机执行以下操作：<br>echo “net.ipv4.ip_forward=1” &gt;&gt; /etc/sysctl.conf<br>sysctl -p</p><h5 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h5><p>进入任何一个容器中，所有命令不可以使用，环境比脸都干净，需要自己手动安装命令。<br>如果想使用某一条命令就执行 yum provides 命令  该命令搜查出命令对应的安装包，安装成功后命令即可使用。</p><p>如：<br>我想使用ifcofnig这条命令查看IP地址<br>安装前执行命令（报错：没有该命令）</p><p><img src="/images/pasted-16.png" alt="upload successful"></p><p>搜查命令对应的软件包</p><p><img src="/images/pasted-17.png" alt="upload successful"><br>安装软件包</p><p><img src="/images/pasted-18.png" alt="upload successful"><br>测试</p><p><img src="/images/pasted-19.png" alt="upload successful"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/pasted-15.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
&lt;p&gt;镜像小的原因：&lt;br&gt;Linux操作系统两个部分构成内核空间（kernel）、用户空间（rootfs）&lt;/p&gt;
&lt;p&gt;查看docker的基础信息</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker的安装-镜像加速及理论</title>
    <link href="http://example.com/2020/09/10/Docker%E7%9A%84%E5%AE%89%E8%A3%85-%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%8F%8A%E7%90%86%E8%AE%BA/"/>
    <id>http://example.com/2020/09/10/Docker%E7%9A%84%E5%AE%89%E8%A3%85-%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%8F%8A%E7%90%86%E8%AE%BA/</id>
    <published>2020-09-10T07:09:00.000Z</published>
    <updated>2020-09-10T09:07:01.969Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/pasted-1.png" alt="upload successful"><br><img src="/images/pasted-0.png" alt="upload successful"></p><h3 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h3><p>Docker的<a href="https://www.docker.com/">官网</a></p><p>必须是Centos7版本，最好是7.7的内核，docker目前不支持centos8</p><p>Docker源路径的寻找</p><p>点击<code>Get Docker</code>可以查看有关下载Docker的文档</p><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>在文档中找到对应的系统版本，就可以看到关于下载Docker的repo源</p><p><img src="/images/pasted-3.png" alt="upload successful"></p><p>因为官网的Docker的repo源是通过走国外的网站来获取的，对于网络不是很好的，建议使用阿里的镜像站</p><p>进入阿里的镜像站，找到<code>docker-ce</code>版本，在官网还有<code>docker-ee</code>版本，是企业版，会收费</p><p><img src="/images/pasted-4.png" alt="upload successful"></p><p>这里好像阿里的网址改版了，进入后最下面的相关连接的下载地址才是我们想要的，也可以直接点击这里，根据系统版本选择对应的系统，这里以Linux为例</p><p><img src="/images/pasted-5.png" alt="upload successful"></p><p>同样选择linux的系统版本，以centos为例</p><p><img src="/images/pasted-6.png" alt="upload successful"></p><p>这里要求系统版本号为3.10，内核为7.5</p><p>进入centos后，可以看到如图所示，其中gpg的路径用来校验安装docker的正确率，就是一个docker密钥，这个gpg的路径一会要用到，记下来<code>https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</code></p><p><img src="/images/pasted-8.png" alt="upload successful"></p><p>根据上图再次选择centos的版本7，根据系统cpu选择<code>x86_64</code></p><p><img src="/images/pasted-9.png" alt="upload successful"></p><p>如上图所示stable代表稳定版本，稳定版本中的repodata，就是yum安装的源路径，Packages是安装是所用到的rpm包，所以正在编写yum源安装docker时，还需要记录稳定版本的路径<code>https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/</code><br><img src="/images/pasted-7.png" alt="upload successful"></p><h4 id="编写docker的yum源"><a href="#编写docker的yum源" class="headerlink" title="编写docker的yum源"></a>编写docker的yum源</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/docker.repo   # 原来存在的repo文件不需要动</span><br><span class="line"> 添加</span><br><span class="line">[docker]</span><br><span class="line">name=docker</span><br><span class="line"> rpm源路径</span><br><span class="line">baseurl=https:<span class="comment">//mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=1 # 启动密钥校验</span><br><span class="line">gpgkey=https:<span class="comment">//mirrors.aliyun.com/docker-ce/linux/centos/gpg  # 密钥路径</span></span><br></pre></td></tr></table></figure><h4 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> docker-ce</span><br><span class="line">docker -v <span class="comment"># 查看docker版本</span></span><br><span class="line">systemctl <span class="keyword">start</span> docker  <span class="comment"># 启动docker</span></span><br><span class="line">docker <span class="keyword">version</span> <span class="comment"># 详细版本信息</span></span><br></pre></td></tr></table></figure><h5 id="推荐下载以后学习中用到的镜像"><a href="#推荐下载以后学习中用到的镜像" class="headerlink" title="推荐下载以后学习中用到的镜像"></a>推荐下载以后学习中用到的镜像</h5><p>使用<code>docker pull</code>命令下载镜像</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos  <span class="comment"># 演示生产环境迁移或者安装软件时使用，默认下载完是8版本</span></span><br><span class="line">docker pull <span class="keyword">busybox </span><span class="comment"># 工具集，使用centos需要用到</span></span><br><span class="line">docker pull httpd <span class="comment"># apache</span></span><br></pre></td></tr></table></figure><p>验证镜像是否下载完成</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker images # 是否可以看到刚下载的三个镜像</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              latest              <span class="number">4e5021</span>d210f6        <span class="number">2</span> days ago          <span class="number">64.2</span>MB</span><br><span class="line">httpd               latest              c5a012f9cf45        <span class="number">3</span> weeks ago         <span class="number">165</span>MB</span><br><span class="line">centos              latest              <span class="number">470671670</span>cac        <span class="number">2</span> months ago        <span class="number">237</span>MB</span><br><span class="line">下载完成后centos的版本需要特别注意，因为docker目前仅支持Centos7版本，所以要进入容器去看一下centos的版本</span><br></pre></td></tr></table></figure><p>运行centos容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> centos</span><br></pre></td></tr></table></figure><p>查看容器版本，如果是8版本需要删除下载7版本</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>d280c874ea80 /]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release <span class="number">8.1</span><span class="number">.1911</span> (Core) </span><br><span class="line">[<span class="symbol">root@</span>d280c874ea80 /]# exit</span><br><span class="line">可以这里的centos是<span class="number">8</span>版本，所以要将这个镜像删除</span><br></pre></td></tr></table></figure><p>由于刚才是先使用镜像运行了容器，i才看到的版本号，容器占用了镜像在运行，所以要先将运行的容器关闭或者删除</p><p>删除需要知道刚才运行容器的容器ID</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps -<span class="keyword">a</span>  <span class="comment"># 查看运行容器</span></span><br><span class="line">CONTAINER ID  IMAGE    COMMAND       CREATED          STATUS                     PORTS   NAMES</span><br><span class="line">faf96581cf3f  centos    <span class="string">&quot;/bin/bash&quot;</span>  <span class="number">10</span> <span class="built_in">seconds</span> ago   Exited (<span class="number">0</span>) <span class="number">3</span> <span class="built_in">seconds</span> ago           recursing_goldstine</span><br><span class="line">docker rm faf96581cf3f   <span class="comment"># 停止容器运行</span></span><br><span class="line">删除镜像</span><br></pre></td></tr></table></figure><p>删除centos:latest的最新版本</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> rmi centos:latest  <span class="comment"># 删除最新版本</span></span><br><span class="line">docker pull centos:<span class="number">7</span>  <span class="comment"># 下载centos7版本</span></span><br></pre></td></tr></table></figure><p>更改标签</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">tag</span> cento<span class="variable">s:7</span> cento<span class="variable">s:latest</span></span><br><span class="line">docker rmi cento<span class="variable">s:7</span></span><br></pre></td></tr></table></figure><p>可以使用上面的方法去查看centos的版本，已经变为7.7，或者直接查看</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> centos cat /etc/redhat-<span class="built_in">release</span></span><br></pre></td></tr></table></figure><h5 id="Docker的镜像加速"><a href="#Docker的镜像加速" class="headerlink" title="Docker的镜像加速"></a>Docker的镜像加速</h5><p>即使使用了阿里云的镜像站，但是拿取的镜像还是走国外的网站，通过命令docker info可以看到</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@192</span> <span class="string">~</span>]<span class="comment"># docker info</span></span><br><span class="line"><span class="attr">Client:</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line"> <span class="attr">Containers:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Running:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Paused:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Stopped:</span> <span class="number">0</span></span><br><span class="line"> <span class="attr">Images:</span> <span class="number">2</span></span><br><span class="line"> <span class="attr">Server Version:</span> <span class="number">19.03</span><span class="number">.8</span></span><br><span class="line"> <span class="attr">Storage Driver:</span> <span class="string">overlay2</span></span><br><span class="line">  <span class="attr">Backing Filesystem:</span> <span class="string">&lt;unknown&gt;</span></span><br><span class="line">  <span class="attr">Supports d_type:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">Native Overlay Diff:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">Logging Driver:</span> <span class="string">json-file</span></span><br><span class="line"> <span class="attr">Cgroup Driver:</span> <span class="string">cgroupfs</span></span><br><span class="line"> <span class="attr">Plugins:</span></span><br><span class="line">  <span class="attr">Volume:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">Network:</span> <span class="string">bridge</span> <span class="string">host</span> <span class="string">ipvlan</span> <span class="string">macvlan</span> <span class="literal">null</span> <span class="string">overlay</span></span><br><span class="line">  <span class="attr">Log:</span> <span class="string">awslogs</span> <span class="string">fluentd</span> <span class="string">gcplogs</span> <span class="string">gelf</span> <span class="string">journald</span> <span class="string">json-file</span> <span class="string">local</span> <span class="string">logentries</span> <span class="string">splunk</span> <span class="string">syslog</span></span><br><span class="line"> <span class="attr">Swarm:</span> <span class="string">inactive</span></span><br><span class="line"> <span class="attr">Runtimes:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Default Runtime:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Init Binary:</span> <span class="string">docker-init</span></span><br><span class="line"> <span class="attr">containerd version:</span> <span class="string">7ad184331fa3e55e52b890ea95e65ba581ae3429</span></span><br><span class="line"> <span class="attr">runc version:</span> <span class="string">dc9208a3303feef5b3839f4323d9beb36df0a9dd</span></span><br><span class="line"> <span class="attr">init version:</span> <span class="string">fec3683</span></span><br><span class="line"> <span class="attr">Security Options:</span></span><br><span class="line">  <span class="string">seccomp</span></span><br><span class="line">   <span class="attr">Profile:</span> <span class="string">default</span></span><br><span class="line"> <span class="attr">Kernel Version:</span> <span class="number">3.10</span><span class="number">.0</span><span class="number">-862.</span><span class="string">el7.x86_64</span></span><br><span class="line"> <span class="attr">Operating System:</span> <span class="string">CentOS</span> <span class="string">Linux</span> <span class="number">7</span> <span class="string">(Core)</span></span><br><span class="line"> <span class="attr">OSType:</span> <span class="string">linux</span></span><br><span class="line"> <span class="attr">Architecture:</span> <span class="string">x86_64</span></span><br><span class="line"> <span class="attr">CPUs:</span> <span class="number">1</span></span><br><span class="line"> <span class="attr">Total Memory:</span> <span class="number">974.</span><span class="string">6MiB</span></span><br><span class="line"> <span class="attr">Name:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.6</span></span><br><span class="line"> <span class="attr">ID:</span> <span class="string">JZ5Z:EWGC:XMEA:VEVX:MR7N:ACYZ:PPVD:GAWU:HURX:7PZ4:YLKE:O47S</span></span><br><span class="line"> <span class="attr">Docker Root Dir:</span> <span class="string">/var/lib/docker</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span>  </span><br><span class="line"> <span class="attr">Registry:</span> <span class="string">https://index.docker.io/v1/</span>  <span class="comment"># 这就是国内镜像站镜像所在的仓库地址，还是docker的网站</span></span><br><span class="line"> <span class="attr">Labels:</span></span><br><span class="line"> <span class="attr">Experimental:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Insecure Registries:</span></span><br><span class="line">  <span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/8</span></span><br><span class="line"> <span class="attr">Live Restore Enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="国内镜像站"><a href="#国内镜像站" class="headerlink" title="国内镜像站"></a>国内镜像站</h5><p>我们可以将镜像站改到国内的镜像站，这里国内有两个非常好用的镜像加速服务</p><p><a href="daocloud.io">Daocloud</a></p><p>市面上比较大的公司</p><p>注册登录后，在用户页面点击加速器的标志</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><p>然后找到对应的系统，复制命令在系统中执行即可</p><p><img src="/images/pasted-11.png" alt="upload successful"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https:<span class="regexp">//g</span>et.daocloud.io<span class="regexp">/daotools/</span>set_mirror.sh | sh -s http:<span class="regexp">//</span>f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure><p>执行完毕后，需要重启docker服务，再次查看docker info，会发现在最下方的输出信息如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Registry</span> Mirrors:</span><br><span class="line"> <span class="attribute">http</span>://f<span class="number">1361</span>db<span class="number">2</span>.m.daocloud.io/</span><br></pre></td></tr></table></figure><p>这个配置会在/etc/docker/daemon.json文件中</p><h5 id="aliyun"><a href="#aliyun" class="headerlink" title="aliyun"></a>aliyun</h5><p>还有一种就是使用阿里云的镜像加速</p><p>首先登录阿里云账号，进入控制台</p><p><img src="/images/pasted-12.png" alt="upload successful"></p><p>第一次使用需要设置Registry登录密码</p><p>图中部分就是我们要添加到docker配置文件中的内容，会自动生成，如果直接修改<code>daemon.json</code>配置文件，就复制加速器地址就可以，如果是还没有<code>daemon.json</code>，就复制以下配置加速器的命令即可完成阿里云镜像的加速</p><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>此时，在重启docker，去查看docker info会看到最后的输出信息变成了你复制的加速器地址</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Registry Mirror<span class="variable">s:</span></span><br><span class="line"> http<span class="variable">s:</span>//xxxxxx.mirror.aliyuncs.<span class="keyword">com</span>/</span><br></pre></td></tr></table></figure><h5 id="镜像概念"><a href="#镜像概念" class="headerlink" title="镜像概念"></a>镜像概念</h5><p>指计算机中默认的镜像，每个用户都可以进行修改，docker pull后的镜像没有在物理机，需要单独保存到物理机</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">save</span> -o 保存后的路径以及名字 要保存的镜像名:标签</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">save</span> <span class="selector-tag">-o</span> <span class="selector-tag">centos</span><span class="selector-class">.tar</span> <span class="selector-tag">centos</span><span class="selector-pseudo">:latest</span></span><br></pre></td></tr></table></figure><h5 id="Docker监听"><a href="#Docker监听" class="headerlink" title="Docker监听"></a>Docker监听</h5><p>该已经发现了，启动docker后，使用netstat -anpt | grep docker并没有监听地址，但是查看启动进程ps -ef | grep docker是没有问题的</p><p>现在希望docker变成一个有监听进程的服务</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">docker</span>.<span class="title">service</span> </span></span><br><span class="line"> 在service模块找到<span class="number">14</span>行修改为以下添加了-H <span class="symbol">tcp:</span>/<span class="regexp">/0.0.0.0</span></span><br><span class="line"><span class="regexp">ExecStart=/usr</span><span class="regexp">/bin/dockerd</span> -H <span class="symbol">fd:</span>/<span class="regexp">/ -H tcp:/</span><span class="regexp">/0.0.0.0 --containerd=/run</span><span class="regexp">/containerd/containerd</span>.sock</span><br></pre></td></tr></table></figure><p>重新加载配置文件并重启服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">restart docker</span></span><br></pre></td></tr></table></figure><p>再次查看端口</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -anpt | grep docker</span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">2375</span>           :::*             LISTEN      <span class="number">60630</span>/dockerd</span><br><span class="line"><span class="number">2375</span>就是docker的端口</span><br></pre></td></tr></table></figure><h4 id="所需要开启的功能"><a href="#所需要开启的功能" class="headerlink" title="所需要开启的功能"></a>所需要开启的功能</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost ~]# vi /etc/sysctl.conf</span><br><span class="line">添加：</span><br><span class="line">net.bridge.bridge-nf-call-iptables = <span class="number">1</span>    <span class="comment">//开启桥接流量转发</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = <span class="number">1</span>   <span class="comment">//开启ipv6的桥接流量转发</span></span><br><span class="line">net.ipv4.ip_forward = <span class="number">1</span>  <span class="comment">//路由表转发</span></span><br><span class="line"></span><br><span class="line">[<span class="symbol">root@</span>localhost ~]# sysctl -p</span><br><span class="line">[<span class="symbol">root@</span>localhost ~]# modprobe ip_vs_rr   <span class="comment">//rr轮训转发</span></span><br><span class="line">[<span class="symbol">root@</span>localhost ~]# modprobe br_netfilter <span class="comment">//桥接卡的iptables的filter表</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/pasted-1.png&quot; alt=&quot;upload successful&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/pasted-0.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Docker的安</summary>
      
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux高效文件处理三剑客</title>
    <link href="http://example.com/2020/09/10/Linux%E9%AB%98%E6%95%88%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    <id>http://example.com/2020/09/10/Linux%E9%AB%98%E6%95%88%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/</id>
    <published>2020-09-10T06:39:48.000Z</published>
    <updated>2020-09-10T07:00:45.432Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>grep、sed、awk我们叫他们三剑客，掌握它们可以更好的运维，提升工作效率，即使不是运维，对我们处理数据都是非常方便的～就很多数据处理来讲，写程序肯定是也能处理的，但是远没有已经存在特定功能的命令更高效，我们只需要操作命令即可。通过本文可以讲解三剑客的一些基础知识和实用;</p></blockquote><h3 id="Grep"><a href="#Grep" class="headerlink" title="Grep"></a>Grep</h3><p>简介<br>grep是一款强大的文本搜索工具，支持正则表达式。<br>全称（ global search regular expression(RE) and print out the line）<br>语法:grep [option]… PATTERN [FILE]…<br>常用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usage: grep [-abcDEFGHhIiJLlmnOoqRSsUVvwxZ] [-A num] [-B num] [-C[num]]</span><br><span class="line"> [-e pattern] [-f file] [--binary-files=value] [--color=when]</span><br><span class="line"> [--context[=num]] [--directories=action] [--label] [--line-buffered]</span><br><span class="line"> [--<span class="keyword">null</span>] [pattern] [file ...]</span><br></pre></td></tr></table></figure><p>常用参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-v        取反</span><br><span class="line">-i        忽略大小写</span><br><span class="line">-c        符合条件的行数</span><br><span class="line">-n        输出的同时打印行号</span><br><span class="line">^*        以*开头         </span><br><span class="line">*$         以*结尾 </span><br><span class="line">^$         空行 </span><br></pre></td></tr></table></figure><p>实际使用<br>准备好一个小故事txt：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze76ybn73dvwmdij06zz ~]# cat monkey</span><br><span class="line">One day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.</span><br><span class="line">He looks in the well and shouts :它往井里一瞧,高喊道：</span><br><span class="line">“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”</span><br><span class="line">An older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,</span><br><span class="line">“Goodness me!The moon is really in the water!” “糟啦!月亮掉在井里头啦!”</span><br><span class="line">And olderly monkey comes over.老猴子也跑过来.</span><br><span class="line">He is very surprised as well and cries out:他也非常惊奇,喊道：</span><br><span class="line">“The moon is in the well.” “糟了,月亮掉在井里头了!”</span><br><span class="line">A group of monkeys run over to the well .一群猴子跑到井边来,</span><br><span class="line">They look at the moon in the well and shout:他们看到井里的月亮,喊道：</span><br><span class="line">“The moon did fall into the well!Come on!Let’get it out!”</span><br><span class="line">“月亮掉在井里头啦!快来!让我们把它捞起来!”</span><br><span class="line">Then,the oldest monkey hangs on the tree up side down ,with his feet on the branch .</span><br><span class="line">然后,老猴子倒挂在大树上,</span><br><span class="line">And he pulls the next monkey’s feet with his hands.拉住大猴子的脚,</span><br><span class="line">All the other monkeys follow his suit,其他的猴子一个个跟着,</span><br><span class="line">And they join each other one by one down to the moon in the well.</span><br><span class="line">它们一只连着一只直到井里.</span><br><span class="line">Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br><span class="line">He yells excitedly “Don’t be so foolish!The moon is still in the sky!”</span><br><span class="line">它兴奋地大叫：“别蠢了!月亮还好好地挂在天上呢!</span><br></pre></td></tr></table></figure><h4 id="直接查找符合条件的行"><a href="#直接查找符合条件的行" class="headerlink" title="直接查找符合条件的行"></a>直接查找符合条件的行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze76ybn73dvwmdij06zz ~]# grep moon monkey</span><br><span class="line">“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”</span><br><span class="line">“Goodness me!The moon is really in the water!” “糟啦!月亮掉在井里头啦!”</span><br><span class="line">“The moon is in the well.” “糟了,月亮掉在井里头了!”</span><br><span class="line">They look at the moon in the well and shout:他们看到井里的月亮,喊道：</span><br><span class="line">“The moon did fall into the well!Come on!Let’get it out!”</span><br><span class="line">And they join each other one by one down to the moon in the well.</span><br><span class="line">Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br><span class="line">He yells excitedly “Don’t be so foolish!The moon is still in the sky!”</span><br></pre></td></tr></table></figure><h4 id="查找反向符合条件的行"><a href="#查找反向符合条件的行" class="headerlink" title="查找反向符合条件的行"></a>查找反向符合条件的行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze76ybn73dvwmdij06zz ~]# grep -v  moon monkey</span><br><span class="line">One day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.</span><br><span class="line">He looks in the well and shouts :它往井里一瞧,高喊道：</span><br><span class="line">An older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,</span><br><span class="line">And olderly monkey comes over.老猴子也跑过来.</span><br><span class="line">He is very surprised as well and cries out:他也非常惊奇,喊道：</span><br><span class="line">A group of monkeys run over to the well .一群猴子跑到井边来,</span><br><span class="line">“月亮掉在井里头啦!快来!让我们把它捞起来!”</span><br><span class="line">Then,the oldest monkey hangs on the tree up side down ,with his feet on the branch .</span><br><span class="line">然后,老猴子倒挂在大树上,</span><br><span class="line">And he pulls the next monkey’s feet with his hands.拉住大猴子的脚,</span><br><span class="line">All the other monkeys follow his suit,其他的猴子一个个跟着,</span><br><span class="line">它们一只连着一只直到井里.</span><br><span class="line">它兴奋地大叫：“别蠢了!月亮还好好地挂在天上呢!”</span><br></pre></td></tr></table></figure><h4 id="直接查找符合条件的行数"><a href="#直接查找符合条件的行数" class="headerlink" title="直接查找符合条件的行数"></a>直接查找符合条件的行数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze76ybn73dvwmdij06zz ~]# grep -c  moon monkey</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="忽略大小写查找符合条件的行数"><a href="#忽略大小写查找符合条件的行数" class="headerlink" title="忽略大小写查找符合条件的行数"></a>忽略大小写查找符合条件的行数</h4><p>先来看一下直接查找的结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze76ybn73dvwmdij06zz ~]# grep my monkey</span><br></pre></td></tr></table></figure><h4 id="忽略大小写查看"><a href="#忽略大小写查看" class="headerlink" title="忽略大小写查看"></a>忽略大小写查看</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze76ybn73dvwmdij06zz ~]# grep -i my monkey</span><br><span class="line">“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”</span><br></pre></td></tr></table></figure><h4 id="查找符合条件的行并输出行号"><a href="#查找符合条件的行并输出行号" class="headerlink" title="查找符合条件的行并输出行号"></a>查找符合条件的行并输出行号</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze76ybn73dvwmdij06zz ~]# grep -n monkey monkey</span><br><span class="line"><span class="number">1</span>:One day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.</span><br><span class="line"><span class="number">4</span>:An older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,</span><br><span class="line"><span class="number">6</span>:And olderly monkey comes over.老猴子也跑过来.</span><br><span class="line"><span class="number">9</span>:A group of monkeys run over to the well .一群猴子跑到井边来,</span><br><span class="line"><span class="number">13</span>:Then,the oldest monkey hangs on the tree up side down ,with his feet on the branch .</span><br><span class="line"><span class="number">15</span>:And he pulls the next monkey’s feet with his hands.拉住大猴子的脚,</span><br><span class="line"><span class="number">16</span>:All the other monkeys follow his suit,其他的猴子一个个跟着,</span><br><span class="line"><span class="number">19</span>:Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br></pre></td></tr></table></figure><h4 id="查找开头是J的行"><a href="#查找开头是J的行" class="headerlink" title="查找开头是J的行"></a>查找开头是J的行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze76ybn73dvwmdij06zz ~]# grep &#x27;^J&#x27; monkey</span><br><span class="line">Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br></pre></td></tr></table></figure><h4 id="查找结尾是呢的行"><a href="#查找结尾是呢的行" class="headerlink" title="查找结尾是呢的行"></a>查找结尾是呢的行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze76ybn73dvwmdij06zz ~]# grep &quot;呢$&quot; monkey</span><br><span class="line">Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br></pre></td></tr></table></figure><h3 id="Sed"><a href="#Sed" class="headerlink" title="Sed"></a>Sed</h3><blockquote><p>sed是一种流编辑器，是一款处理文本比较优秀的工具，可以结合正则表达式一起使用。</p></blockquote><h4 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h4><p>命令: sed<br>语法 : sed [选项]… {命令集} [输入文件]…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">常用参数:</span><br><span class="line">            d  删除选择的行    </span><br><span class="line">            s   查找    </span><br><span class="line">            y  替换</span><br><span class="line">            i   当前行前面插入一行</span><br><span class="line">            a  当前行后面插入一行</span><br><span class="line">            p  打印行       </span><br><span class="line">            q  退出     </span><br><span class="line"></span><br><span class="line"> 替换符:</span><br><span class="line"></span><br><span class="line">            数字 ：替换第几处    </span><br><span class="line">            g :  全局替换    </span><br><span class="line">            \<span class="number">1</span>:  子串匹配标记，前面搜索可以用元字符集\(..\)</span><br><span class="line">            &amp;:  保留搜索刀的字符用来替换其他字符</span><br><span class="line">#### 操作</span><br><span class="line">##### 替换操作</span><br><span class="line">查看文件：</span><br><span class="line">```java</span><br><span class="line"># cat word</span><br><span class="line">Twinkle, twinkle, little star</span><br><span class="line">How I wonder what you are</span><br><span class="line">Up above the world so high</span><br><span class="line">Like a diamond in the sky</span><br><span class="line">When the blazing sun is gone</span><br></pre></td></tr></table></figure><p>替换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># sed &#x27;s/little/big/&#x27; word</span><br><span class="line">Twinkle, twinkle, big star</span><br><span class="line">How I wonder what you are</span><br><span class="line">Up above the world so high</span><br><span class="line">Like a diamond in the sky</span><br><span class="line">When the blazing sun is gone</span><br></pre></td></tr></table></figure><p>查看文本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># word1</span><br><span class="line">Oh <span class="keyword">if</span> there<span class="string">&#x27;s one thing to be taught</span></span><br><span class="line"><span class="string">it&#x27;</span>s dreams are made to be caught</span><br><span class="line">and friends can never be bought</span><br><span class="line">Doesn<span class="string">&#x27;t matter how long it&#x27;</span>s been</span><br><span class="line">I know you<span class="string">&#x27;ll always jump in</span></span><br><span class="line"><span class="string">&#x27;</span>Cause we don<span class="string">&#x27;t know how to quit</span></span><br></pre></td></tr></table></figure><p>全局替换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># sed &#x27;s/to/can/g&#x27; word1</span><br><span class="line">Oh <span class="keyword">if</span> there<span class="string">&#x27;s one thing can be taught</span></span><br><span class="line"><span class="string">it&#x27;</span>s dreams are made can be caught</span><br><span class="line">and friends can nev</span><br></pre></td></tr></table></figure><p>按行替换（替换2到最后一行)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># sed &#x27;2,$s/to/can/&#x27; word1</span><br><span class="line">Oh <span class="keyword">if</span> there<span class="string">&#x27;s one thing to be taught</span></span><br><span class="line"><span class="string">it&#x27;</span>s dreams are made can be caught</span><br><span class="line">and friends can never be bought</span><br><span class="line">Doesn<span class="string">&#x27;t matter how long it&#x27;</span>s been</span><br><span class="line">I know you<span class="string">&#x27;ll always jump in</span></span><br><span class="line"><span class="string">&#x27;</span>Cause we don<span class="string">&#x27;t know how can quit</span></span><br><span class="line"><span class="string">```java</span></span><br><span class="line"><span class="string">##### 删除操作:</span></span><br><span class="line"><span class="string">查看文本:</span></span><br><span class="line"><span class="string">```java</span></span><br><span class="line"><span class="string"># cat word</span></span><br><span class="line"><span class="string">Twinkle, twinkle, little star</span></span><br><span class="line"><span class="string">How I wonder what you are</span></span><br><span class="line"><span class="string">Up above the world so high</span></span><br><span class="line"><span class="string">Like a diamond in the sky</span></span><br><span class="line"><span class="string">When the blazing sun is gone</span></span><br></pre></td></tr></table></figure><p>删除:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># sed &#x27;2d&#x27; word</span><br><span class="line">Twinkle, twinkle, little star</span><br><span class="line">Up above the world so high</span><br><span class="line">Like a diamond in the sky</span><br><span class="line">When the blazing sun is gone</span><br></pre></td></tr></table></figure><p>显示行号:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># sed &#x27;=;2d&#x27; word</span><br><span class="line"><span class="number">1</span></span><br><span class="line">Twinkle, twinkle, little star</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">Up above the world so high</span><br><span class="line"><span class="number">4</span></span><br><span class="line">Like a diamond in the sky</span><br><span class="line"><span class="number">5</span></span><br><span class="line">When the blazing sun is gone</span><br></pre></td></tr></table></figure><p>删除第2行到第四行:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># sed &#x27;=;2,4d&#x27; word</span><br><span class="line"><span class="number">1</span></span><br><span class="line">Twinkle, twinkle, little star</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">When the blazing sun is gone</span><br></pre></td></tr></table></figure><h5 id="添加行操作"><a href="#添加行操作" class="headerlink" title="添加行操作:"></a>添加行操作:</h5><p>向前插入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># echo &quot;hello&quot; | sed &#x27;i\kitty&#x27;</span><br><span class="line">kitty</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>向后插入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># echo &quot;kitty&quot; | sed &#x27;i\hello&#x27;</span><br><span class="line">hello</span><br><span class="line">kitty</span><br></pre></td></tr></table></figure><h5 id="修改行操作"><a href="#修改行操作" class="headerlink" title="修改行操作:"></a>修改行操作:</h5><p>替换第二行为hello kitty</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># sed &#x27;2c\hello kitty&#x27; word</span><br><span class="line">Twinkle, twinkle, little star</span><br><span class="line">hello kitty</span><br><span class="line">Up above the world so high</span><br><span class="line">Like a diamond in the sky</span><br><span class="line">When the blazing sun is gone</span><br></pre></td></tr></table></figure><p>替换第二行到最后一行为hello kitty</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sed &#x27;2,$c\hello kitty&#x27; word</span><br><span class="line">Twinkle, twinkle, little star</span><br><span class="line">hello kitty</span><br></pre></td></tr></table></figure><h5 id="写入行操作"><a href="#写入行操作" class="headerlink" title="写入行操作"></a>写入行操作</h5><p>把带star的行写入c文件中,c提前创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sed -n &#x27;/star/w c&#x27; word</span><br><span class="line"># cat c</span><br><span class="line">Twinkle, twinkle, little star</span><br></pre></td></tr></table></figure><h5 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h5><p>打印3行后，退出sed</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># sed &#x27;3q&#x27; word</span><br><span class="line">Twinkle, twinkle, little star</span><br><span class="line">How I wonder what you are</span><br><span class="line">Up above the world so higher be bought</span><br><span class="line">Doesn<span class="string">&#x27;t matter how long it&#x27;</span>s been</span><br><span class="line">I know you<span class="string">&#x27;ll always jump in</span></span><br><span class="line"><span class="string">&#x27;</span>Cause we don<span class="string">&#x27;t know how can quit</span></span><br></pre></td></tr></table></figure><h3 id="Awk"><a href="#Awk" class="headerlink" title="Awk"></a>Awk</h3><blockquote><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p></blockquote><p>命令格式：<br>awk [option] ‘scrip’ var=value</p><p>参数：<br>option：<br>-F 指定输入的分割字符，默认为 空格<br>-v var=value 赋值一个用户自定义变量<br>-f scripfile 从脚本中读取 awk 命令</p><h4 id="AWK-模式和操作awk-脚本是由模式和操作组成的。"><a href="#AWK-模式和操作awk-脚本是由模式和操作组成的。" class="headerlink" title="AWK 模式和操作awk 脚本是由模式和操作组成的。"></a>AWK 模式和操作awk 脚本是由模式和操作组成的。</h4><h5 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h5><p>模式可以是以下任意一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/正则表达式/： 使用通配符的扩展集</span><br><span class="line">关系表达式：    使用运算符进行操作，可以是字符串或者数字比较测试</span><br><span class="line">模式匹配表达式：用运算符~<span class="number">9</span>匹配和~！（不匹配）</span><br><span class="line">BEGIN 语句块，pattern语句块、END语句块</span><br></pre></td></tr></table></figure><h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><p>操作有一个或者多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内、主要部分有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">变量或属组赋值</span><br><span class="line">输出命令</span><br><span class="line">内置函数</span><br><span class="line">控制流程语句</span><br></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>例： 只是显示最近登录的5个帐号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# last -n 5 </span><br><span class="line">root     pts/<span class="number">0</span>        <span class="number">192.168</span>.<span class="number">116.1</span>    Fri Jun <span class="number">12</span> <span class="number">10</span>:<span class="number">59</span>   still logged in   </span><br><span class="line">reboot   system boot  <span class="number">3.10</span>.<span class="number">0</span>-<span class="number">862.</span>el7.x Fri Jun <span class="number">12</span> <span class="number">10</span>:<span class="number">58</span> - <span class="number">11</span>:<span class="number">36</span>  (<span class="number">00</span>:<span class="number">38</span>)    </span><br><span class="line">reboot   system boot  <span class="number">3.10</span>.<span class="number">0</span>-<span class="number">862.</span>el7.x Fri Jun  <span class="number">5</span> <span class="number">21</span>:<span class="number">07</span> - <span class="number">11</span>:<span class="number">36</span> (<span class="number">6</span>+<span class="number">14</span>:<span class="number">28</span>)   </span><br><span class="line">root     pts/<span class="number">0</span>        <span class="number">192.168</span>.<span class="number">116.1</span>    Fri Jun  <span class="number">5</span> <span class="number">18</span>:<span class="number">40</span> - crash  (<span class="number">02</span>:<span class="number">27</span>)    </span><br><span class="line">reboot   system boot  <span class="number">3.10</span>.<span class="number">0</span>-<span class="number">862.</span>el7.x Fri Jun  <span class="number">5</span> <span class="number">17</span>:<span class="number">28</span> - <span class="number">11</span>:<span class="number">36</span> (<span class="number">6</span>+<span class="number">18</span>:<span class="number">08</span>)   </span><br><span class="line"></span><br><span class="line">wtmp begins Thu Oct <span class="number">10</span> <span class="number">22</span>:<span class="number">36</span>:<span class="number">04</span> <span class="number">2019</span></span><br><span class="line">[root@localhost ~]# last -n 5 | awk &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line">root</span><br><span class="line">reboot</span><br><span class="line">reboot</span><br><span class="line">root</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>例： 只显示/etc/passwd的账户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">ftp</span><br><span class="line">nobody</span><br><span class="line">systemd-network</span><br><span class="line">dbus</span><br><span class="line">polkitd</span><br><span class="line">tss</span><br><span class="line">sshd</span><br><span class="line">postfix</span><br><span class="line">chrony</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure><p>例：只显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;&#123;print $1&quot;\t&quot;$7&#125;&#x27; </span><br><span class="line">dbus    /sbin/nologin</span><br><span class="line">polkitd    /sbin/nologin</span><br><span class="line">tss    /sbin/nologin</span><br><span class="line">sshd    /sbin/nologin</span><br><span class="line">postfix    /sbin/nologin</span><br><span class="line">chrony    /sbin/nologin</span><br><span class="line">mysql    /bin/bash</span><br></pre></td></tr></table></figure><p>例：只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加”blue,/bin/nosh”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;BEGIN &#123;print &quot;name,shell&quot;&#125; &#123;print $1&quot;\t&quot;$7&#125; END &#123;print &quot;Hello,/bin/nosh&quot;&#125;&#x27;</span><br><span class="line">dbus    /sbin/nologin</span><br><span class="line">polkitd    /sbin/nologin</span><br><span class="line">tss    /sbin/nologin</span><br><span class="line">sshd    /sbin/nologin</span><br><span class="line">postfix    /sbin/nologin</span><br><span class="line">chrony    /sbin/nologin</span><br><span class="line">mysql    /bin/bash</span><br><span class="line">Hello,/bin/nosh</span><br></pre></td></tr></table></figure><blockquote><p>awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一步： 执行 BEGIN &#123;commond&#125; 指令</span><br><span class="line">第二步： 从文件或标准输入&#123;stdin&#125;读取一行然后执行 pattern &#123; commmod &#125; </span><br><span class="line">第三步； 从读至输入流末尾，执行 END &#123;commod&#125;语句</span><br></pre></td></tr></table></figure><blockquote><p>BEGIN 在awk 开始输入读取之前被执行，属于一个可选的模块，一般用于变量初始化、打印输出表头</p><p>pattern 通用命令，是最重要的一块，属于可选的，一般用于打印出指定的列，如果没有指定 petter 模块，则默认执行 {print $0} 既打印出所有读取到的内容</p><p>END 在 AWK 从输入流中读取完所有的内容之后再执行，在 awk 整个语句输入中末尾执行</p></blockquote><p>例：搜索 /etc/passwd 有 root 关键字的行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# awk -F: &#x27;/root/&#x27; /etc/passwd</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">operator:x:<span class="number">11</span>:<span class="number">0</span>:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure><p>例：搜索/etc/passwd有root关键字的所有行，并显示对应的shell</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# awk -F: &#x27;/root/&#123;print $7&#125;&#x27; /etc/passwd</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;grep、sed、awk我们叫他们三剑客，掌握它们可以更好的运维，提升工作效率，即使不是运维，对我们处理数据都是非常方便的～就很多数据处理来讲，写程序肯定是也能处理的，但是远没有已经存在特定功能的命令更高效，我们只需要操作命令即可。通过本文可以讲解</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>k8s重新生成Tocken并加入集群</title>
    <link href="http://example.com/2020/09/10/k8s%E9%87%8D%E6%96%B0%E7%94%9F%E6%88%90Tocken%E5%B9%B6%E5%8A%A0%E5%85%A5%E9%9B%86%E7%BE%A4/"/>
    <id>http://example.com/2020/09/10/k8s%E9%87%8D%E6%96%B0%E7%94%9F%E6%88%90Tocken%E5%B9%B6%E5%8A%A0%E5%85%A5%E9%9B%86%E7%BE%A4/</id>
    <published>2020-09-10T06:23:09.000Z</published>
    <updated>2020-09-10T06:26:33.006Z</updated>
    
    <content type="html"><![CDATA[<h4 id="生成Token以及ca证书sha256hash值"><a href="#生成Token以及ca证书sha256hash值" class="headerlink" title="生成Token以及ca证书sha256hash值"></a>生成Token以及ca证书sha256hash值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# kubeadm token create --print-join-command </span><br><span class="line">W0710 <span class="number">09</span>:<span class="number">11</span>:<span class="number">07</span>.<span class="number">688855</span>   <span class="number">62169</span> configset.go:<span class="number">202</span>] WARNING: kubeadm cannot validate component configs <span class="keyword">for</span> API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]</span><br><span class="line">kubeadm join <span class="number">1.1</span>.<span class="number">1.5</span>:<span class="number">6443</span> --token <span class="number">1</span>cpem4.adim7zc1fqi4x1px     --discovery-token-ca-cert-hash sha256:<span class="number">9</span>c4f217b0a12781be5c49262aa58738f873e7e0037719eeb0adeb7293bcdc1ca </span><br></pre></td></tr></table></figure><h4 id="如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录"><a href="#如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录" class="headerlink" title="如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录"></a>如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node3 ~]# rm -rf /etc/kubernetes/</span><br><span class="line">[root@node2 ~]# netstat -anpt | grep 10250</span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">10250</span>                :::*                    LISTEN      <span class="number">9992</span>/kubelet        </span><br><span class="line">[root@node2 ~]# kill -9 9992</span><br></pre></td></tr></table></figure><h4 id="node加入集群"><a href="#node加入集群" class="headerlink" title="node加入集群"></a>node加入集群</h4><p>复制生成的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join <span class="number">1.1</span>.<span class="number">1.5</span>:<span class="number">6443</span> --token <span class="number">1</span>cpem4.adim7zc1fqi4x1px     --discovery-token-ca-cert-hash sha256:<span class="number">9</span>c4f217b0a12781be5c49262aa58738f873e7e0037719eeb0adeb7293bcdc1ca </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;生成Token以及ca证书sha256hash值&quot;&gt;&lt;a href=&quot;#生成Token以及ca证书sha256hash值&quot; class=&quot;headerlink&quot; title=&quot;生成Token以及ca证书sha256hash值&quot;&gt;&lt;/a&gt;生成Token以及ca证书s</summary>
      
    
    
    
    <category term="Kubernetes" scheme="http://example.com/categories/Kubernetes/"/>
    
    
    <category term="Kubetnetes" scheme="http://example.com/tags/Kubetnetes/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加分类和标签</title>
    <link href="http://example.com/2020/09/10/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
    <id>http://example.com/2020/09/10/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</id>
    <published>2020-09-10T05:21:18.000Z</published>
    <updated>2020-09-10T05:26:57.702Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-创建”分类”选项"><a href="#1-创建”分类”选项" class="headerlink" title="1.创建”分类”选项"></a>1.创建”分类”选项</h4><p>生成“分类”页并添加tpye属性,进入博客目录。执行命令下方命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> page categories</span><br></pre></td></tr></table></figure><p>categories文件夹下会有index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: <span class="number">2019</span>-<span class="number">04</span>-<span class="number">22</span> <span class="number">14</span>:<span class="number">47</span>:<span class="number">40</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加type: “categories”到内容中，添加后是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: <span class="number">2019</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">30</span></span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>给文章添加“categories”属性</p><p>打开需要添加分类的文章，为其添加categories属性。下方的categories:Hexo表示这篇文章添加到到“Hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 添加分类及标签</span><br><span class="line">date: <span class="number">2017</span>-<span class="number">05</span>-<span class="number">26</span> <span class="number">12</span>:<span class="number">12</span>:<span class="number">57</span></span><br><span class="line">categories: Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p><h4 id="2-创建”标签”选项"><a href="#2-创建”标签”选项" class="headerlink" title="2.创建”标签”选项"></a>2.创建”标签”选项</h4><p>生成“标签”页并添加tpye属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> page tags</span><br></pre></td></tr></table></figure><p>在tags文件夹下，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: <span class="number">2019</span>-<span class="number">04</span>-<span class="number">22</span> <span class="number">14</span>:<span class="number">22</span>:<span class="number">08</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加type: “tags”到内容中，添加后是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: <span class="number">2019</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">15</span>:<span class="number">40</span>:<span class="number">24</span></span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>给文章添加“tags”属性,打开需要添加标签的文章，为其添加tags属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 添加分类及标签</span><br><span class="line">date: <span class="number">2019</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">15</span>:<span class="number">40</span>:<span class="number">24</span></span><br><span class="line">categories: </span><br><span class="line">           - Hexo</span><br><span class="line">tags:</span><br><span class="line">           - 博客</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-创建”分类”选项&quot;&gt;&lt;a href=&quot;#1-创建”分类”选项&quot; class=&quot;headerlink&quot; title=&quot;1.创建”分类”选项&quot;&gt;&lt;/a&gt;1.创建”分类”选项&lt;/h4&gt;&lt;p&gt;生成“分类”页并添加tpye属性,进入博客目录。执行命令下方命令&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo如何发布文章</title>
    <link href="http://example.com/2020/09/10/Hexo%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2020/09/10/Hexo%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</id>
    <published>2020-09-10T04:57:45.000Z</published>
    <updated>2020-09-10T05:12:18.081Z</updated>
    
    <content type="html"><![CDATA[<h4 id="输入以下命令："><a href="#输入以下命令：" class="headerlink" title="输入以下命令："></a>输入以下命令：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;输入以下命令：&quot;&gt;&lt;a href=&quot;#输入以下命令：&quot; class=&quot;headerlink&quot; title=&quot;输入以下命令：&quot;&gt;&lt;/a&gt;输入以下命令：&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/09/10/hello-world/"/>
    <id>http://example.com/2020/09/10/hello-world/</id>
    <published>2020-09-10T01:31:08.375Z</published>
    <updated>2020-09-10T01:31:08.375Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
