{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/123.jpg","path":"images/123.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/clicklove.js","path":"js/src/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"source/images/docker核心组件.png","path":"images/docker核心组件.png","modified":1,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":1,"renderable":0},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":1,"renderable":0},{"_id":"source/images/pasted-10.png","path":"images/pasted-10.png","modified":1,"renderable":0},{"_id":"source/images/pasted-11.png","path":"images/pasted-11.png","modified":1,"renderable":0},{"_id":"source/images/pasted-12.png","path":"images/pasted-12.png","modified":1,"renderable":0},{"_id":"source/images/pasted-13.png","path":"images/pasted-13.png","modified":1,"renderable":0},{"_id":"source/images/pasted-14.png","path":"images/pasted-14.png","modified":1,"renderable":0},{"_id":"source/images/pasted-15.png","path":"images/pasted-15.png","modified":1,"renderable":0},{"_id":"source/images/pasted-16.png","path":"images/pasted-16.png","modified":1,"renderable":0},{"_id":"source/images/pasted-17.png","path":"images/pasted-17.png","modified":1,"renderable":0},{"_id":"source/images/pasted-18.png","path":"images/pasted-18.png","modified":1,"renderable":0},{"_id":"source/images/pasted-19.png","path":"images/pasted-19.png","modified":1,"renderable":0},{"_id":"source/images/pasted-2.png","path":"images/pasted-2.png","modified":1,"renderable":0},{"_id":"source/images/pasted-20.png","path":"images/pasted-20.png","modified":1,"renderable":0},{"_id":"source/images/pasted-21.png","path":"images/pasted-21.png","modified":1,"renderable":0},{"_id":"source/images/pasted-22.png","path":"images/pasted-22.png","modified":1,"renderable":0},{"_id":"source/images/pasted-23.png","path":"images/pasted-23.png","modified":1,"renderable":0},{"_id":"source/images/pasted-24.png","path":"images/pasted-24.png","modified":1,"renderable":0},{"_id":"source/images/pasted-25.png","path":"images/pasted-25.png","modified":1,"renderable":0},{"_id":"source/images/pasted-26.png","path":"images/pasted-26.png","modified":1,"renderable":0},{"_id":"source/images/pasted-27.png","path":"images/pasted-27.png","modified":1,"renderable":0},{"_id":"source/images/pasted-28.png","path":"images/pasted-28.png","modified":1,"renderable":0},{"_id":"source/images/pasted-29.png","path":"images/pasted-29.png","modified":1,"renderable":0},{"_id":"source/images/pasted-3.png","path":"images/pasted-3.png","modified":1,"renderable":0},{"_id":"source/images/pasted-30.png","path":"images/pasted-30.png","modified":1,"renderable":0},{"_id":"source/images/pasted-31.png","path":"images/pasted-31.png","modified":1,"renderable":0},{"_id":"source/images/pasted-32.png","path":"images/pasted-32.png","modified":1,"renderable":0},{"_id":"source/images/pasted-33.png","path":"images/pasted-33.png","modified":1,"renderable":0},{"_id":"source/images/pasted-34.png","path":"images/pasted-34.png","modified":1,"renderable":0},{"_id":"source/images/pasted-35.png","path":"images/pasted-35.png","modified":1,"renderable":0},{"_id":"source/images/pasted-36.png","path":"images/pasted-36.png","modified":1,"renderable":0},{"_id":"source/images/pasted-37.png","path":"images/pasted-37.png","modified":1,"renderable":0},{"_id":"source/images/pasted-38.png","path":"images/pasted-38.png","modified":1,"renderable":0},{"_id":"source/images/pasted-39.png","path":"images/pasted-39.png","modified":1,"renderable":0},{"_id":"source/images/pasted-4.png","path":"images/pasted-4.png","modified":1,"renderable":0},{"_id":"source/images/pasted-40.png","path":"images/pasted-40.png","modified":1,"renderable":0},{"_id":"source/images/pasted-5.png","path":"images/pasted-5.png","modified":1,"renderable":0},{"_id":"source/images/pasted-6.png","path":"images/pasted-6.png","modified":1,"renderable":0},{"_id":"source/images/pasted-7.png","path":"images/pasted-7.png","modified":1,"renderable":0},{"_id":"source/images/pasted-8.png","path":"images/pasted-8.png","modified":1,"renderable":0},{"_id":"source/images/pasted-9.png","path":"images/pasted-9.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/Docker基础操作逻辑命令.md","hash":"13ce0a7b142bab541b956cacaaa06b53cc18a47c","modified":1599730109395},{"_id":"source/_posts/Docker的安装-镜像加速及理论.md","hash":"8c8e9aa4bb000b11e301ab77b531d963505386e4","modified":1599728821969},{"_id":"source/_posts/Docker私有仓库.md","hash":"2c281ea2caf689e21b0224f5df3756da7ae4179c","modified":1599730780097},{"_id":"source/_posts/Docker部署nginx及web集群.md","hash":"d7bf7d536e6f6dfb7bce8cbe3c723a76f4901a68","modified":1599731232176},{"_id":"source/_posts/Hexo如何发布文章.md","hash":"36768eca85f40bc224198629e838a9f18f77c4c8","modified":1599714738081},{"_id":"source/_posts/Hexo添加分类和标签.md","hash":"38830f610aa7e2d0c1a5ae0b36fdd2d7a0ec4800","modified":1599715617702},{"_id":"source/_posts/Linux高效文件处理三剑客.md","hash":"0a578e55953907f52f495ced6360e5b2deccf2ee","modified":1599721245432},{"_id":"source/_posts/commit构建镜像.md","hash":"1a6c0df3a228a57f15d746773ea6511c3a42eb4a","modified":1599730909692},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1599701468375},{"_id":"source/_posts/k8s重新生成Tocken并加入集群.md","hash":"c81a27453163f17a487aa03cbeecac9c0a8932fe","modified":1599719193006},{"_id":"source/_posts/升级Openssh详细步骤.md","hash":"c87a58cb168a00c2e9203943831746d2da487830","modified":1599961522787},{"_id":"source/_posts/本地MySQL数据库迁移到阿里云RDS.md","hash":"44a52acda05755b41e52a91476782559f4acb29e","modified":1599809604994},{"_id":"source/about/index.md","hash":"f150052f33309992559adc2718b960b073bcc623","modified":1599715069607},{"_id":"source/categories/index.md","hash":"543f89dd65e32d1b8e5738dc085f94bb77ce414e","modified":1599714957431},{"_id":"source/images/pasted-1.png","hash":"0fa8fe4c58350c00a4c91bd462592629ad98483a","modified":1599725575105},{"_id":"source/images/pasted-10.png","hash":"15f23d3c3e3fb61063e8e2c3e1b15236fe503582","modified":1599727544363},{"_id":"source/images/pasted-14.png","hash":"d943a03bce0cb802075089b910ad4bee23780019","modified":1599728712965},{"_id":"source/images/pasted-16.png","hash":"bcbc29e25a28ec81efadba07da61623e48ec9c47","modified":1599729891800},{"_id":"source/images/pasted-17.png","hash":"0a097efa6d08d27bd503f2ff5e6930fd6aa48744","modified":1599729918707},{"_id":"source/images/pasted-18.png","hash":"322f56c1ca6737656963b9c4a44469e6a753675e","modified":1599729927705},{"_id":"source/images/pasted-19.png","hash":"a6e07bff091b09ebd29abed7c4a877eff1a94197","modified":1599729935473},{"_id":"source/images/pasted-2.png","hash":"eac273d7354e2f486fe7377a4549d3c0edbf7f24","modified":1599726856760},{"_id":"source/images/pasted-20.png","hash":"01a61fb7702f724fe4690e557bb17d3d8c319c2c","modified":1599730977512},{"_id":"source/images/pasted-21.png","hash":"e727787ef9737f1c887e2cb6eb65bc65a97db1dc","modified":1599731020397},{"_id":"source/images/pasted-22.png","hash":"8ac9d954173e8a04d93e1c77829851ade1332cce","modified":1599731036074},{"_id":"source/images/pasted-23.png","hash":"d9719ed89df46f9c326a6093c4870f750d245f6c","modified":1599731068559},{"_id":"source/images/pasted-24.png","hash":"a4f237623924564bd598921226719f266f31dfdb","modified":1599731089049},{"_id":"source/images/pasted-25.png","hash":"6df800c6ce15eb7bbe15bf18e21f48f9c488ca38","modified":1599731092474},{"_id":"source/images/pasted-26.png","hash":"406b0e845577a6381fc70357676f9c0d40db1527","modified":1599731112196},{"_id":"source/images/pasted-27.png","hash":"bea8fe3b887b43fc4274032c6057fcf5d8731e31","modified":1599731114857},{"_id":"source/images/pasted-28.png","hash":"43f8473ab279478e1d001d31b3bc5eb3ad8f2afb","modified":1599731118285},{"_id":"source/images/pasted-29.png","hash":"b202dfbff12c77ee9dc8870f4de1ec6c9b45cf62","modified":1599731129088},{"_id":"source/images/pasted-30.png","hash":"02685a6fb75eb36ec04f02543c7ceddaa1deecca","modified":1599731133321},{"_id":"source/images/pasted-31.png","hash":"7b8d5fbe68763a4aad9dd514600c55213996a886","modified":1599731136899},{"_id":"source/images/pasted-32.png","hash":"dede4107ca872397d683a36729013e93c158edb9","modified":1599731140287},{"_id":"source/images/pasted-33.png","hash":"89fc1551139b035ebfacfff19f6d1ec34032775f","modified":1599731146940},{"_id":"source/images/pasted-34.png","hash":"443ae0674c516e9d6479df195756b7131d49b6f8","modified":1599731151350},{"_id":"source/images/pasted-35.png","hash":"1e0b8ef74adfd48e604a9bde094eb2268af54a17","modified":1599731155287},{"_id":"source/images/pasted-36.png","hash":"59237f14cc10fa3542b9e9671470b993130d72de","modified":1599731166663},{"_id":"source/images/pasted-37.png","hash":"3a0395f3677f7a498787be74a5e19a0777097e8a","modified":1599731170603},{"_id":"source/images/pasted-38.png","hash":"5d26f27ab4d8558ffefb6ebf8b2e14818633e7b8","modified":1599731194522},{"_id":"source/images/pasted-39.png","hash":"dd1385917785e360d1007e2e0e9a98c6468ae7d4","modified":1599731199035},{"_id":"source/images/pasted-4.png","hash":"e711e02eafcde7329c3eac80b9c2517f9008bb2d","modified":1599726999112},{"_id":"source/images/pasted-40.png","hash":"de2f7acce6f9793da64769210f1881b51b970388","modified":1599731204240},{"_id":"source/images/pasted-5.png","hash":"55ff9b3ad23709179c1f45cfa72d95c2de0882d9","modified":1599727033794},{"_id":"source/images/pasted-6.png","hash":"feca501c50aad73ee1f3d7cde25f2eb5c068bafd","modified":1599727042902},{"_id":"source/images/pasted-7.png","hash":"d45a144dc69af087657793709971f320a312713a","modified":1599727065521},{"_id":"source/images/pasted-8.png","hash":"3d21e6fe4d73107bd8d111be4c795979c69c75a9","modified":1599727099598},{"_id":"source/images/pasted-9.png","hash":"95ac60dda409ebac267be11c4b551ca4d9dcbdfb","modified":1599727132241},{"_id":"source/tags/index.md","hash":"6dc8da96feb4c93654afd97b03a8b571fb3995e4","modified":1599714947122},{"_id":"source/images/pasted-0.png","hash":"1eaf2b5cedfca83da876952ec91ad0adfcd71091","modified":1599725203012},{"_id":"source/images/pasted-12.png","hash":"cfbe82c4e6dafb6a0336b70fa168006f29b039e1","modified":1599727615159},{"_id":"source/images/pasted-3.png","hash":"41a868f5e506958e684cc60e2d62a229f0e2ebf8","modified":1599726954961},{"_id":"source/images/pasted-11.png","hash":"627c7f40319d111221a2bf42a7a85e7dd57ece37","modified":1599727559524},{"_id":"source/images/pasted-13.png","hash":"1e8b0da1b5a3b6faf102fe1f4d4a16867b5e903c","modified":1599727646142},{"_id":"source/images/docker核心组件.png","hash":"f86df71319e63584a47e3fbb9e6b864610356271","modified":1599721942000},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1599706741062},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1599706741062},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1599706741062},{"_id":"themes/hexo-theme-next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1599706741063},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1599706741063},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1599706741063},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1599706741063},{"_id":"themes/hexo-theme-next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1599706741063},{"_id":"themes/hexo-theme-next/_config.yml","hash":"c0ef60f6f7c7e85f53a143c2739c7ddaa618b86c","modified":1599808778352},{"_id":"themes/hexo-theme-next/_config.yml.bak","hash":"fdfbc4b21b3cc151d9cdbad54e00c326f1410d1b","modified":1599717164853},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1599706741063},{"_id":"themes/hexo-theme-next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1599706741065},{"_id":"themes/hexo-theme-next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1599706741070},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1599706741062},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1599706741062},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1599706741062},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1599706741062},{"_id":"themes/hexo-theme-next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1599706741062},{"_id":"themes/hexo-theme-next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1599706741062},{"_id":"themes/hexo-theme-next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1599706741062},{"_id":"themes/hexo-theme-next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1599706741063},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1599706741063},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1599706741063},{"_id":"themes/hexo-theme-next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1599706741063},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1599706741063},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1599706741064},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1599706741064},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1599706741064},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1599706741064},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1599706741064},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1599706741064},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1599706741064},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1599706741065},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1599706741065},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1599706741065},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1599706741065},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1599706741065},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1599706741065},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1599706741065},{"_id":"themes/hexo-theme-next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1599706741065},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1599706741066},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1599706741066},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"91e949e8cf234b255f2c0cf913e5df9aa48376ff","modified":1599717939537},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1599706741069},{"_id":"themes/hexo-theme-next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1599706741070},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1599706741062},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1599706741062},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1599706741062},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1599706741062},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1599706741064},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1599706741064},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1599706741064},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1599706741064},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1599706741064},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1599706741065},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1599706741065},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1599706741065},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1599706741065},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1599706741065},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1599706741065},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1599706741065},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1599706741065},{"_id":"themes/hexo-theme-next/layout/_macro/passage-end-tag.swig","hash":"8b77c4ce34f16c711b5c0b98a64be7a714bfe27f","modified":1599708007230},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1599706741066},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"972e1a48d7a6c512552a8a413eb36374fef5197a","modified":1599708175535},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1599706741069},{"_id":"themes/hexo-theme-next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1599706741071},{"_id":"themes/hexo-theme-next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1599706741071},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1599706741071},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1599706741071},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1599706741071},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1599706741071},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1599706741071},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1599706741071},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1599706741071},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1599706741071},{"_id":"themes/hexo-theme-next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1599706741071},{"_id":"themes/hexo-theme-next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1599706741077},{"_id":"themes/hexo-theme-next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1599706741077},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1599706741067},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1599706741068},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1599706741069},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1599706741069},{"_id":"themes/hexo-theme-next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1599706741070},{"_id":"themes/hexo-theme-next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1599706741070},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1599706741076},{"_id":"themes/hexo-theme-next/source/js/src/clicklove.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1599717907680},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1599706741078},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1599706741078},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1599706741071},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1599706741071},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1599706741071},{"_id":"themes/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1599706741075},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1599706741077},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1599706741077},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1599706741071},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1599706741071},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1599706741071},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1599706741071},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1599706741071},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1599706741071},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1599706741072},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1599706741073},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1599706741074},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1599706741074},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1599706741063},{"_id":"themes/hexo-theme-next/source/images/123.jpg","hash":"f070cc4dd7c1d47dffa9d9073f17a55105d59ea2","modified":1566650207249},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1599706741077},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1599706741077},{"_id":"source/images/pasted-15.png","hash":"11787a89633ff0004614828d9ead707877b0c891","modified":1599728909093},{"_id":"public/atom.xml","hash":"f1adbaf07921668d4c200f2b9069f27bc03cae1a","modified":1599988801473},{"_id":"public/about/index.html","hash":"e09354c79a22545f81816d58016d89c60df2dbc2","modified":1599988801473},{"_id":"public/categories/index.html","hash":"f9ced63110e1a451bb9338a8c14fa652c9a0e97f","modified":1599988801473},{"_id":"public/tags/index.html","hash":"c5acba8f68288745de6ac394131d0fb4e20b3206","modified":1599988801473},{"_id":"public/2020/09/10/commit构建镜像/index.html","hash":"ea6e6ce4c96d63bca20ae6034f6174cc0fe0b0de","modified":1599988801473},{"_id":"public/2020/09/10/Hexo如何发布文章/index.html","hash":"76319d32fe6b19e9c2b37fd9ce0c3c5583c46e4b","modified":1599988801473},{"_id":"public/2020/09/10/hello-world/index.html","hash":"80e7d8d9fcd54cb008b875673b5bbd896bcb0130","modified":1599988801473},{"_id":"public/archives/index.html","hash":"3a0137c51d50dbc60f37e6940de17b98b2bf9ca6","modified":1599988801473},{"_id":"public/archives/page/2/index.html","hash":"8334889c4a378275a7e5704a0f8c49df2f874e52","modified":1599988801473},{"_id":"public/archives/2020/page/2/index.html","hash":"35c2b4c8a17e50bb29029ed4811edde5be34f241","modified":1599988801473},{"_id":"public/archives/2020/09/page/2/index.html","hash":"28e6fb5ea4f8fb9b29d2e8c7975028b6a2132ea8","modified":1599988801473},{"_id":"public/categories/Docker/index.html","hash":"b6a06b503eb80053741e4dcce26185b232528073","modified":1599988801473},{"_id":"public/categories/Hexo/index.html","hash":"364581d4ef1e26662def455ab5deae66547c9ff2","modified":1599988801473},{"_id":"public/categories/Linux/index.html","hash":"02587c6a4a89e322cd681e9d22ae63595ffcb81d","modified":1599988801473},{"_id":"public/categories/Kubernetes/index.html","hash":"3604d77c4fcd82ce43a79af5c116a4b02ba02753","modified":1599988801473},{"_id":"public/tags/Docker/index.html","hash":"ba533f302448da24f27d0f298d3dfde6fb4773c1","modified":1599988801473},{"_id":"public/tags/Hexo/index.html","hash":"35f0fc26608fcdfa15c3956eb2761b23b0aaf921","modified":1599988801473},{"_id":"public/tags/Linux/index.html","hash":"33df4c59e40f10b923d124e3a7b873d4b94551ee","modified":1599988801473},{"_id":"public/tags/Kubetnetes/index.html","hash":"cf289ba86d15f88ff42a6ae442661bc25ffb8c30","modified":1599988801473},{"_id":"public/2020/09/11/升级Openssh详细步骤/index.html","hash":"27176592b9ed2e29c27bc3fcfa5a18b5b74fe6a1","modified":1599988801473},{"_id":"public/2020/09/11/本地MySQL数据库迁移到阿里云RDS/index.html","hash":"b1593b3a7b7614e0c07cdf538e5c9f3fbedbb9c5","modified":1599988801473},{"_id":"public/2020/09/10/Docker部署nginx及web集群/index.html","hash":"b51004481b1b366f4e8a5888e94e6510eb9e51c3","modified":1599988801473},{"_id":"public/2020/09/10/Docker私有仓库/index.html","hash":"d8d82195da3abaf4263196696e46b0f550a08147","modified":1599988801473},{"_id":"public/2020/09/10/Docker基础操作逻辑命令/index.html","hash":"664495d58a3aaaf50aebdaf4de07bf32634c41b9","modified":1599988801473},{"_id":"public/2020/09/10/Docker的安装-镜像加速及理论/index.html","hash":"af223c29fb595de3b866141dbdd3d3835d691e0d","modified":1599988801473},{"_id":"public/2020/09/10/Linux高效文件处理三剑客/index.html","hash":"83a0990c457c24308fb478ee64e70edf55f6d2ba","modified":1599988801473},{"_id":"public/2020/09/10/k8s重新生成Tocken并加入集群/index.html","hash":"13c32996fbff87e8863983ebb752d78ec1153ad2","modified":1599988801473},{"_id":"public/2020/09/10/Hexo添加分类和标签/index.html","hash":"67b4ec389800b4b2d3e88c72058bc18dd867f686","modified":1599988801473},{"_id":"public/archives/2020/index.html","hash":"04c5533c3ad22269ac1567a95563acdc9d0dc8ce","modified":1599988801473},{"_id":"public/archives/2020/09/index.html","hash":"94853daa53aa00cac7f5c0f0c8fcbd8f7ad92b52","modified":1599988801473},{"_id":"public/index.html","hash":"32b171db99134fde57ae3cdc4e07576577480896","modified":1599988801473},{"_id":"public/page/2/index.html","hash":"f9b26aa6fb142594703c474960197d2ac494e3c6","modified":1599988801473},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1599988801473},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1599988801473},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1599988801473},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1599988801473},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1599988801473},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1599988801473},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1599988801473},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1599988801473},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1599988801473},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1599988801473},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1599988801473},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1599988801473},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1599988801473},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1599988801473},{"_id":"public/images/pasted-1.png","hash":"0fa8fe4c58350c00a4c91bd462592629ad98483a","modified":1599988801473},{"_id":"public/images/pasted-10.png","hash":"15f23d3c3e3fb61063e8e2c3e1b15236fe503582","modified":1599988801473},{"_id":"public/images/pasted-14.png","hash":"d943a03bce0cb802075089b910ad4bee23780019","modified":1599988801473},{"_id":"public/images/pasted-16.png","hash":"bcbc29e25a28ec81efadba07da61623e48ec9c47","modified":1599988801473},{"_id":"public/images/pasted-17.png","hash":"0a097efa6d08d27bd503f2ff5e6930fd6aa48744","modified":1599988801473},{"_id":"public/images/pasted-18.png","hash":"322f56c1ca6737656963b9c4a44469e6a753675e","modified":1599988801473},{"_id":"public/images/pasted-19.png","hash":"a6e07bff091b09ebd29abed7c4a877eff1a94197","modified":1599988801473},{"_id":"public/images/pasted-2.png","hash":"eac273d7354e2f486fe7377a4549d3c0edbf7f24","modified":1599988801473},{"_id":"public/images/pasted-20.png","hash":"01a61fb7702f724fe4690e557bb17d3d8c319c2c","modified":1599988801473},{"_id":"public/images/pasted-21.png","hash":"e727787ef9737f1c887e2cb6eb65bc65a97db1dc","modified":1599988801473},{"_id":"public/images/pasted-22.png","hash":"8ac9d954173e8a04d93e1c77829851ade1332cce","modified":1599988801473},{"_id":"public/images/pasted-23.png","hash":"d9719ed89df46f9c326a6093c4870f750d245f6c","modified":1599988801473},{"_id":"public/images/pasted-24.png","hash":"a4f237623924564bd598921226719f266f31dfdb","modified":1599988801473},{"_id":"public/images/pasted-25.png","hash":"6df800c6ce15eb7bbe15bf18e21f48f9c488ca38","modified":1599988801473},{"_id":"public/images/pasted-26.png","hash":"406b0e845577a6381fc70357676f9c0d40db1527","modified":1599988801473},{"_id":"public/images/pasted-27.png","hash":"bea8fe3b887b43fc4274032c6057fcf5d8731e31","modified":1599988801473},{"_id":"public/images/pasted-28.png","hash":"43f8473ab279478e1d001d31b3bc5eb3ad8f2afb","modified":1599988801473},{"_id":"public/images/pasted-29.png","hash":"b202dfbff12c77ee9dc8870f4de1ec6c9b45cf62","modified":1599988801473},{"_id":"public/images/pasted-30.png","hash":"02685a6fb75eb36ec04f02543c7ceddaa1deecca","modified":1599988801473},{"_id":"public/images/pasted-31.png","hash":"7b8d5fbe68763a4aad9dd514600c55213996a886","modified":1599988801473},{"_id":"public/images/pasted-32.png","hash":"dede4107ca872397d683a36729013e93c158edb9","modified":1599988801473},{"_id":"public/images/pasted-33.png","hash":"89fc1551139b035ebfacfff19f6d1ec34032775f","modified":1599988801473},{"_id":"public/images/pasted-34.png","hash":"443ae0674c516e9d6479df195756b7131d49b6f8","modified":1599988801473},{"_id":"public/images/pasted-35.png","hash":"1e0b8ef74adfd48e604a9bde094eb2268af54a17","modified":1599988801473},{"_id":"public/images/pasted-36.png","hash":"59237f14cc10fa3542b9e9671470b993130d72de","modified":1599988801473},{"_id":"public/images/pasted-37.png","hash":"3a0395f3677f7a498787be74a5e19a0777097e8a","modified":1599988801473},{"_id":"public/images/pasted-38.png","hash":"5d26f27ab4d8558ffefb6ebf8b2e14818633e7b8","modified":1599988801473},{"_id":"public/images/pasted-39.png","hash":"dd1385917785e360d1007e2e0e9a98c6468ae7d4","modified":1599988801473},{"_id":"public/images/pasted-4.png","hash":"e711e02eafcde7329c3eac80b9c2517f9008bb2d","modified":1599988801473},{"_id":"public/images/pasted-40.png","hash":"de2f7acce6f9793da64769210f1881b51b970388","modified":1599988801473},{"_id":"public/images/pasted-6.png","hash":"feca501c50aad73ee1f3d7cde25f2eb5c068bafd","modified":1599988801473},{"_id":"public/images/pasted-7.png","hash":"d45a144dc69af087657793709971f320a312713a","modified":1599988801473},{"_id":"public/images/pasted-8.png","hash":"3d21e6fe4d73107bd8d111be4c795979c69c75a9","modified":1599988801473},{"_id":"public/images/pasted-9.png","hash":"95ac60dda409ebac267be11c4b551ca4d9dcbdfb","modified":1599988801473},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1599988801473},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1599988801473},{"_id":"public/images/pasted-0.png","hash":"1eaf2b5cedfca83da876952ec91ad0adfcd71091","modified":1599988801473},{"_id":"public/images/pasted-12.png","hash":"cfbe82c4e6dafb6a0336b70fa168006f29b039e1","modified":1599988801473},{"_id":"public/images/pasted-3.png","hash":"41a868f5e506958e684cc60e2d62a229f0e2ebf8","modified":1599988801473},{"_id":"public/images/pasted-5.png","hash":"55ff9b3ad23709179c1f45cfa72d95c2de0882d9","modified":1599988801473},{"_id":"public/images/123.jpg","hash":"f070cc4dd7c1d47dffa9d9073f17a55105d59ea2","modified":1599988801473},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1599988801473},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1599988801473},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1599988801473},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1599988801473},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1599988801473},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1599988801473},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1599988801473},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1599988801473},{"_id":"public/js/src/clicklove.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1599988801473},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1599988801473},{"_id":"public/css/main.css","hash":"4caddd4a47efcaca4e5c5955c6b4b6eb3540fb8d","modified":1599988801473},{"_id":"public/images/pasted-11.png","hash":"627c7f40319d111221a2bf42a7a85e7dd57ece37","modified":1599988801473},{"_id":"public/images/pasted-13.png","hash":"1e8b0da1b5a3b6faf102fe1f4d4a16867b5e903c","modified":1599988801473},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1599988801473},{"_id":"public/images/docker核心组件.png","hash":"f86df71319e63584a47e3fbb9e6b864610356271","modified":1599988801473},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1599988801473},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1599988801473},{"_id":"public/images/pasted-15.png","hash":"11787a89633ff0004614828d9ead707877b0c891","modified":1599988801473}],"Category":[{"name":"Docker","_id":"ckf0w0t1t0004fipv1luu1sjq"},{"name":"Hexo","_id":"ckf0w0t23000nfipv3ypk9oee"},{"name":"Linux","_id":"ckf0w0t270010fipv0ppsdlo2"},{"name":"Kubernetes","_id":"ckf0w0t280015fipvfq0actc6"}],"Data":[],"Page":[{"title":"关于","date":"2020-09-10T03:17:21.000Z","_content":"\t\t\t\t#### 开启博客生涯\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2020-09-10 11:17:21\n---\n\t\t\t\t#### 开启博客生涯\n","updated":"2020-09-10T05:17:49.607Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckf0w0t1c0000fipv330z6nwl","content":"<pre><code>            #### 开启博客生涯</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>            #### 开启博客生涯</code></pre>\n"},{"title":"分类","date":"2020-09-10T03:17:13.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-09-10 11:17:13\ntype: categories\n---\n","updated":"2020-09-10T05:15:57.431Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckf0w0t1h0002fipv2gi22i0q","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2020-09-10T03:16:44.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-09-10 11:16:44\ntype: tags\n---\n","updated":"2020-09-10T05:15:47.122Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckf0w0t1v0006fipv2sp428n0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Docker基础操作逻辑命令","author":"Semaik.","date":"2020-09-10T09:08:00.000Z","_content":"![upload successful](/images/pasted-15.png)\n\n镜像小的原因：\nLinux操作系统两个部分构成内核空间（kernel）、用户空间（rootfs）\n\n查看docker的基础信息\n\n`docker info`\n\n\n查看docker中已经存在的镜像\n```\ndocker images\n参数：\n\t-a：列出本地所有的镜像（含中间映像层）\n\t-q：只显示镜像id\n\t--digests：显示镜像的摘要信息\n\t--no-trunc：显示完整的镜像信息\n    ```\n\n\n\n在docker hub中查看关于该镜像的所有镜像\n\n```\ndocker search\n例：\ndocker search ubuntu # 全网搜索ubuntu镜像\n```\n\n下载镜像\n```\ndocker pull 镜像名   //默认下载tomcat:latest，意思是最新版，或者tomcat:3.2  下载3.2版本\n```\n\n删除镜像\n```\ndocker rmi 镜像名： 删除镜像，默认删除 镜像名:latest，这个镜像不能在运行中\ndocker rmi -f 镜像名：强制删除\ndocker rmi -f $（docker images -qa）：删除全部镜像\n```\n导出镜像\n```\ndocker save -o 压缩包名称 镜像名称\n例：将镜像导出当前目录下\ndocker save -o centos.tar centos:latest\n将镜像centos:latest另存到虚拟机当前目录下，命名为centos.tar\n```\n \n导入镜像\n```\ndocker load < centos.tar\n```\n重命名镜像名称\n```\ndocker tag 旧镜像名称 新镜像名称\n例：\ndocker tag 500b941e6f79 tomcat7:jre7\n```\n创建不运行容器\n```\ndocker create --name web httpd\n```\n创建并运行容器\n```\ndocker run -itd -p 88:80--name test --restart always centos:7 /bin/bash\n可用docker ps -a，查看容器运行状态\n参数：\n    -i  以交互方式登录\n    -t  允许以交互方式打开终端\n    -d  在后台运行\n    -p  映射端口，将容器中的80端口映射成物理机中的88端口\n    --name  添加容器名\n    --restart always  跟随docker启动而启动，就是当服务重启时、启动时，该容器也会运行\n    --rm  容器一旦停止就会被自动删除，不添加的话容器会永久保存在计算机中\n    --privileged  添加特权，不添加此参数 运行一些系统命令时错\n```\n查看所有容器\n```\ndocker ps -a\n```\n立马强制性退出容器\n```\ndocker kill 容器id\n```\n停止容器\n```\ndocker stop 容器id\n```\n启动容器\n```\ndocker start 容器id\n```\n进入容器\n```\ndocker exec -it 容器id /bin/bash\n```\n挂起容器\n```\ndocker pause 容器id\n```\n取消挂起正常运行容器\n```\ndocker unpause 容器id\n```\n删除容器：（删除容器前需要停止容器）\n```\ndocker rm 容器id\n如：容器正在运行中需要删除容器，就需要添加参数-f\ndocker rm -f 容器id\n```\n查看容器信息\n```\ndocker inspect 容器id\n```\n编写进入容器脚本\n```\nvim /usr/bin/docker-enter\n!/bin/sh\nif [ -e $(dirname \"$0\")/nsenter ]; then\n with boot2docker, nsenter is not in the PATH but it is in the same folder\n  NSENTER=$(dirname \"$0\")/nsenter\nelse\n  NSENTER=nsenter\nfi\nif [ -z \"$1\" ]; then\n  echo \"Usage: `basename \"$0\"` CONTAINER [COMMAND [ARG]...]\"\n  echo \"\"\n  echo \"Enters the Docker CONTAINER and executes the specified COMMAND.\"\n  echo \"If COMMAND is not specified, runs an interactive shell in CONTAINER.\"\nelse\n  PID=$(docker inspect --format \"{{.State.Pid}}\" \"$1\")\n  if [ -z \"$PID\" ]; then\n    exit 1\n  fi\n  shift\n  OPTS=\"--target $PID --mount --uts --ipc --net --pid --\"\n  if [ -z \"$1\" ]; then\n    # No command given.\n    # Use su to clear all host environment variables except for TERM,\n    # initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,\n    # and start a login shell.\n    \"$NSENTER\" $OPTS su - root\n else\n    # Use env to clear all host environment variables.\n    \"$NSENTER\" $OPTS env --ignore-environment -- \"$@\"\n  fi\nfi\n```\n给予权限\n```\nchmod +x /usr/bin/docker-enter\n```\n可以使用该脚本，加容器name或者容器id来启动容器\n```\ndocker-enter 容器id\n```\n\n\n\n\n\n\n\n\n##### 补充：\n虚拟机版本低于7.7，进如容器后无法使用网络，因为默认是关闭路由转发的，需要手动开启。\n退出容器在宿主机执行以下操作：\necho \"net.ipv4.ip_forward=1\" >> /etc/sysctl.conf\nsysctl -p\n\n##### 提示：\n进入任何一个容器中，所有命令不可以使用，环境比脸都干净，需要自己手动安装命令。\n如果想使用某一条命令就执行 yum provides 命令  该命令搜查出命令对应的安装包，安装成功后命令即可使用。\n\n如：\n我想使用ifcofnig这条命令查看IP地址\n安装前执行命令（报错：没有该命令）\n\n![upload successful](/images/pasted-16.png)\n\n搜查命令对应的软件包\n\n![upload successful](/images/pasted-17.png)\n安装软件包\n\n![upload successful](/images/pasted-18.png)\n测试\n\n\n![upload successful](/images/pasted-19.png)","source":"_posts/Docker基础操作逻辑命令.md","raw":"title: Docker基础操作逻辑命令\nauthor: Semaik.\ntags:\n  - Docker\ncategories:\n  - Docker\ndate: 2020-09-10 17:08:00\n---\n![upload successful](/images/pasted-15.png)\n\n镜像小的原因：\nLinux操作系统两个部分构成内核空间（kernel）、用户空间（rootfs）\n\n查看docker的基础信息\n\n`docker info`\n\n\n查看docker中已经存在的镜像\n```\ndocker images\n参数：\n\t-a：列出本地所有的镜像（含中间映像层）\n\t-q：只显示镜像id\n\t--digests：显示镜像的摘要信息\n\t--no-trunc：显示完整的镜像信息\n    ```\n\n\n\n在docker hub中查看关于该镜像的所有镜像\n\n```\ndocker search\n例：\ndocker search ubuntu # 全网搜索ubuntu镜像\n```\n\n下载镜像\n```\ndocker pull 镜像名   //默认下载tomcat:latest，意思是最新版，或者tomcat:3.2  下载3.2版本\n```\n\n删除镜像\n```\ndocker rmi 镜像名： 删除镜像，默认删除 镜像名:latest，这个镜像不能在运行中\ndocker rmi -f 镜像名：强制删除\ndocker rmi -f $（docker images -qa）：删除全部镜像\n```\n导出镜像\n```\ndocker save -o 压缩包名称 镜像名称\n例：将镜像导出当前目录下\ndocker save -o centos.tar centos:latest\n将镜像centos:latest另存到虚拟机当前目录下，命名为centos.tar\n```\n \n导入镜像\n```\ndocker load < centos.tar\n```\n重命名镜像名称\n```\ndocker tag 旧镜像名称 新镜像名称\n例：\ndocker tag 500b941e6f79 tomcat7:jre7\n```\n创建不运行容器\n```\ndocker create --name web httpd\n```\n创建并运行容器\n```\ndocker run -itd -p 88:80--name test --restart always centos:7 /bin/bash\n可用docker ps -a，查看容器运行状态\n参数：\n    -i  以交互方式登录\n    -t  允许以交互方式打开终端\n    -d  在后台运行\n    -p  映射端口，将容器中的80端口映射成物理机中的88端口\n    --name  添加容器名\n    --restart always  跟随docker启动而启动，就是当服务重启时、启动时，该容器也会运行\n    --rm  容器一旦停止就会被自动删除，不添加的话容器会永久保存在计算机中\n    --privileged  添加特权，不添加此参数 运行一些系统命令时错\n```\n查看所有容器\n```\ndocker ps -a\n```\n立马强制性退出容器\n```\ndocker kill 容器id\n```\n停止容器\n```\ndocker stop 容器id\n```\n启动容器\n```\ndocker start 容器id\n```\n进入容器\n```\ndocker exec -it 容器id /bin/bash\n```\n挂起容器\n```\ndocker pause 容器id\n```\n取消挂起正常运行容器\n```\ndocker unpause 容器id\n```\n删除容器：（删除容器前需要停止容器）\n```\ndocker rm 容器id\n如：容器正在运行中需要删除容器，就需要添加参数-f\ndocker rm -f 容器id\n```\n查看容器信息\n```\ndocker inspect 容器id\n```\n编写进入容器脚本\n```\nvim /usr/bin/docker-enter\n!/bin/sh\nif [ -e $(dirname \"$0\")/nsenter ]; then\n with boot2docker, nsenter is not in the PATH but it is in the same folder\n  NSENTER=$(dirname \"$0\")/nsenter\nelse\n  NSENTER=nsenter\nfi\nif [ -z \"$1\" ]; then\n  echo \"Usage: `basename \"$0\"` CONTAINER [COMMAND [ARG]...]\"\n  echo \"\"\n  echo \"Enters the Docker CONTAINER and executes the specified COMMAND.\"\n  echo \"If COMMAND is not specified, runs an interactive shell in CONTAINER.\"\nelse\n  PID=$(docker inspect --format \"{{.State.Pid}}\" \"$1\")\n  if [ -z \"$PID\" ]; then\n    exit 1\n  fi\n  shift\n  OPTS=\"--target $PID --mount --uts --ipc --net --pid --\"\n  if [ -z \"$1\" ]; then\n    # No command given.\n    # Use su to clear all host environment variables except for TERM,\n    # initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,\n    # and start a login shell.\n    \"$NSENTER\" $OPTS su - root\n else\n    # Use env to clear all host environment variables.\n    \"$NSENTER\" $OPTS env --ignore-environment -- \"$@\"\n  fi\nfi\n```\n给予权限\n```\nchmod +x /usr/bin/docker-enter\n```\n可以使用该脚本，加容器name或者容器id来启动容器\n```\ndocker-enter 容器id\n```\n\n\n\n\n\n\n\n\n##### 补充：\n虚拟机版本低于7.7，进如容器后无法使用网络，因为默认是关闭路由转发的，需要手动开启。\n退出容器在宿主机执行以下操作：\necho \"net.ipv4.ip_forward=1\" >> /etc/sysctl.conf\nsysctl -p\n\n##### 提示：\n进入任何一个容器中，所有命令不可以使用，环境比脸都干净，需要自己手动安装命令。\n如果想使用某一条命令就执行 yum provides 命令  该命令搜查出命令对应的安装包，安装成功后命令即可使用。\n\n如：\n我想使用ifcofnig这条命令查看IP地址\n安装前执行命令（报错：没有该命令）\n\n![upload successful](/images/pasted-16.png)\n\n搜查命令对应的软件包\n\n![upload successful](/images/pasted-17.png)\n安装软件包\n\n![upload successful](/images/pasted-18.png)\n测试\n\n\n![upload successful](/images/pasted-19.png)","slug":"Docker基础操作逻辑命令","published":1,"updated":"2020-09-10T09:28:29.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0w0t1f0001fipv21kq1cok","content":"<p><img src=\"/images/pasted-15.png\" alt=\"upload successful\"></p>\n<p>镜像小的原因：<br>Linux操作系统两个部分构成内核空间（kernel）、用户空间（rootfs）</p>\n<p>查看docker的基础信息</p>\n<p><code>docker info</code></p>\n<p>查看docker中已经存在的镜像</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">参数：</span><br><span class=\"line\">\t-<span class=\"ruby\">a：列出本地所有的镜像（含中间映像层）</span></span><br><span class=\"line\"><span class=\"ruby\">\t-q：只显示镜像id</span></span><br><span class=\"line\"><span class=\"ruby\">\t--digests：显示镜像的摘要信息</span></span><br><span class=\"line\"><span class=\"ruby\">\t--no-trunc：显示完整的镜像信息</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在docker hub中查看关于该镜像的所有镜像</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">search</span></span><br><span class=\"line\">例：</span><br><span class=\"line\">docker <span class=\"built_in\">search</span> ubuntu # 全网搜索ubuntu镜像</span><br></pre></td></tr></table></figure>\n\n<p>下载镜像</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> pull 镜像名   //默认下载tomcat:latest，意思是最新版，或者tomcat:<span class=\"number\">3</span>.<span class=\"number\">2</span>  下载<span class=\"number\">3</span>.<span class=\"number\">2</span>版本</span><br></pre></td></tr></table></figure>\n\n<p>删除镜像</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi 镜像名： 删除镜像，默认删除 镜像名:latest，这个镜像不能在运行中</span><br><span class=\"line\">docker rmi <span class=\"operator\">-f</span> 镜像名：强制删除</span><br><span class=\"line\">docker rmi <span class=\"operator\">-f</span> <span class=\"variable\">$</span>（docker images <span class=\"literal\">-qa</span>）：删除全部镜像</span><br></pre></td></tr></table></figure>\n<p>导出镜像</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">save</span> <span class=\"selector-tag\">-o</span> 压缩包名称 镜像名称</span><br><span class=\"line\">例：将镜像导出当前目录下</span><br><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">save</span> <span class=\"selector-tag\">-o</span> <span class=\"selector-tag\">centos</span><span class=\"selector-class\">.tar</span> <span class=\"selector-tag\">centos</span><span class=\"selector-pseudo\">:latest</span></span><br><span class=\"line\">将镜像<span class=\"selector-tag\">centos</span><span class=\"selector-pseudo\">:latest</span>另存到虚拟机当前目录下，命名为<span class=\"selector-tag\">centos</span><span class=\"selector-class\">.tar</span></span><br></pre></td></tr></table></figure>\n\n<p>导入镜像</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">load</span> &lt; <span class=\"selector-tag\">centos</span><span class=\"selector-class\">.tar</span></span><br></pre></td></tr></table></figure>\n<p>重命名镜像名称</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">tag</span> <span class=\"title\">旧镜像名称 新镜像名称</span></span><br><span class=\"line\"><span class=\"title\">例：</span></span><br><span class=\"line\"><span class=\"title\">docker</span> <span class=\"keyword\">tag</span> <span class=\"title\">500b941e6f79</span> tomcat7:jre7</span><br></pre></td></tr></table></figure>\n<p>创建不运行容器</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">create</span> <span class=\"comment\">--name web httpd</span></span><br></pre></td></tr></table></figure>\n<p>创建并运行容器</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd -p 88:80--name test --restart always centos:7 /bin/bash</span><br><span class=\"line\">可用docker ps -a，查看容器运行状态</span><br><span class=\"line\">参数：</span><br><span class=\"line\">    -<span class=\"ruby\">i  以交互方式登录</span></span><br><span class=\"line\"><span class=\"ruby\">    -t  允许以交互方式打开终端</span></span><br><span class=\"line\"><span class=\"ruby\">    -d  在后台运行</span></span><br><span class=\"line\"><span class=\"ruby\">    -p  映射端口，将容器中的<span class=\"number\">80</span>端口映射成物理机中的<span class=\"number\">88</span>端口</span></span><br><span class=\"line\"><span class=\"ruby\">    --name  添加容器名</span></span><br><span class=\"line\"><span class=\"ruby\">    --restart always  跟随docker启动而启动，就是当服务重启时、启动时，该容器也会运行</span></span><br><span class=\"line\"><span class=\"ruby\">    --rm  容器一旦停止就会被自动删除，不添加的话容器会永久保存在计算机中</span></span><br><span class=\"line\"><span class=\"ruby\">    --privileged  添加特权，不添加此参数 运行一些系统命令时错</span></span><br></pre></td></tr></table></figure>\n<p>查看所有容器</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker ps -a</span></span><br></pre></td></tr></table></figure>\n<p>立马强制性退出容器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">kill</span> 容器<span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure>\n<p>停止容器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">stop</span> 容器<span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure>\n<p>启动容器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">start</span> 容器<span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure>\n<p>进入容器</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -<span class=\"keyword\">it</span> 容器<span class=\"built_in\">id</span> /bin/bash</span><br></pre></td></tr></table></figure>\n<p>挂起容器</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pause 容器<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n<p>取消挂起正常运行容器</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker unpause 容器<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n<p>删除容器：（删除容器前需要停止容器）</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> 容器id</span><br><span class=\"line\">如：容器正在运行中需要删除容器，就需要添加参数<span class=\"operator\">-f</span></span><br><span class=\"line\">docker <span class=\"built_in\">rm</span> <span class=\"operator\">-f</span> 容器id</span><br></pre></td></tr></table></figure>\n<p>查看容器信息</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect 容器<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n<p>编写进入容器脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/bin/docker-enter</span><br><span class=\"line\">!/bin/sh</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -e $(dirname <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span>)/nsenter ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"> with boot2docker, nsenter is not <span class=\"keyword\">in</span> the PATH but it is <span class=\"keyword\">in</span> the same folder</span><br><span class=\"line\">  NSENTER=$(dirname <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span>)/nsenter</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  NSENTER=nsenter</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: `basename &quot;</span><span class=\"variable\">$0</span><span class=\"string\">&quot;` CONTAINER [COMMAND [ARG]...]&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Enters the Docker CONTAINER and executes the specified COMMAND.&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;If COMMAND is not specified, runs an interactive shell in CONTAINER.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  PID=$(docker inspect --format <span class=\"string\">&quot;&#123;&#123;.State.Pid&#125;&#125;&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$PID</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">shift</span></span><br><span class=\"line\">  OPTS=<span class=\"string\">&quot;--target <span class=\"variable\">$PID</span> --mount --uts --ipc --net --pid --&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># No command given.</span></span><br><span class=\"line\">    <span class=\"comment\"># Use su to clear all host environment variables except for TERM,</span></span><br><span class=\"line\">    <span class=\"comment\"># initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,</span></span><br><span class=\"line\">    <span class=\"comment\"># and start a login shell.</span></span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$NSENTER</span>&quot;</span> <span class=\"variable\">$OPTS</span> su - root</span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"comment\"># Use env to clear all host environment variables.</span></span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$NSENTER</span>&quot;</span> <span class=\"variable\">$OPTS</span> env --ignore-environment -- <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>给予权限</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x <span class=\"regexp\">/usr/</span>bin/docker-enter</span><br></pre></td></tr></table></figure>\n<p>可以使用该脚本，加容器name或者容器id来启动容器</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-enter 容器<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n<h5 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h5><p>虚拟机版本低于7.7，进如容器后无法使用网络，因为默认是关闭路由转发的，需要手动开启。<br>退出容器在宿主机执行以下操作：<br>echo “net.ipv4.ip_forward=1” &gt;&gt; /etc/sysctl.conf<br>sysctl -p</p>\n<h5 id=\"提示：\"><a href=\"#提示：\" class=\"headerlink\" title=\"提示：\"></a>提示：</h5><p>进入任何一个容器中，所有命令不可以使用，环境比脸都干净，需要自己手动安装命令。<br>如果想使用某一条命令就执行 yum provides 命令  该命令搜查出命令对应的安装包，安装成功后命令即可使用。</p>\n<p>如：<br>我想使用ifcofnig这条命令查看IP地址<br>安装前执行命令（报错：没有该命令）</p>\n<p><img src=\"/images/pasted-16.png\" alt=\"upload successful\"></p>\n<p>搜查命令对应的软件包</p>\n<p><img src=\"/images/pasted-17.png\" alt=\"upload successful\"><br>安装软件包</p>\n<p><img src=\"/images/pasted-18.png\" alt=\"upload successful\"><br>测试</p>\n<p><img src=\"/images/pasted-19.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/pasted-15.png\" alt=\"upload successful\"></p>\n<p>镜像小的原因：<br>Linux操作系统两个部分构成内核空间（kernel）、用户空间（rootfs）</p>\n<p>查看docker的基础信息</p>\n<p><code>docker info</code></p>\n<p>查看docker中已经存在的镜像</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">参数：</span><br><span class=\"line\">\t-<span class=\"ruby\">a：列出本地所有的镜像（含中间映像层）</span></span><br><span class=\"line\"><span class=\"ruby\">\t-q：只显示镜像id</span></span><br><span class=\"line\"><span class=\"ruby\">\t--digests：显示镜像的摘要信息</span></span><br><span class=\"line\"><span class=\"ruby\">\t--no-trunc：显示完整的镜像信息</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在docker hub中查看关于该镜像的所有镜像</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">search</span></span><br><span class=\"line\">例：</span><br><span class=\"line\">docker <span class=\"built_in\">search</span> ubuntu # 全网搜索ubuntu镜像</span><br></pre></td></tr></table></figure>\n\n<p>下载镜像</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> pull 镜像名   //默认下载tomcat:latest，意思是最新版，或者tomcat:<span class=\"number\">3</span>.<span class=\"number\">2</span>  下载<span class=\"number\">3</span>.<span class=\"number\">2</span>版本</span><br></pre></td></tr></table></figure>\n\n<p>删除镜像</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi 镜像名： 删除镜像，默认删除 镜像名:latest，这个镜像不能在运行中</span><br><span class=\"line\">docker rmi <span class=\"operator\">-f</span> 镜像名：强制删除</span><br><span class=\"line\">docker rmi <span class=\"operator\">-f</span> <span class=\"variable\">$</span>（docker images <span class=\"literal\">-qa</span>）：删除全部镜像</span><br></pre></td></tr></table></figure>\n<p>导出镜像</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">save</span> <span class=\"selector-tag\">-o</span> 压缩包名称 镜像名称</span><br><span class=\"line\">例：将镜像导出当前目录下</span><br><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">save</span> <span class=\"selector-tag\">-o</span> <span class=\"selector-tag\">centos</span><span class=\"selector-class\">.tar</span> <span class=\"selector-tag\">centos</span><span class=\"selector-pseudo\">:latest</span></span><br><span class=\"line\">将镜像<span class=\"selector-tag\">centos</span><span class=\"selector-pseudo\">:latest</span>另存到虚拟机当前目录下，命名为<span class=\"selector-tag\">centos</span><span class=\"selector-class\">.tar</span></span><br></pre></td></tr></table></figure>\n\n<p>导入镜像</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">load</span> &lt; <span class=\"selector-tag\">centos</span><span class=\"selector-class\">.tar</span></span><br></pre></td></tr></table></figure>\n<p>重命名镜像名称</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">tag</span> <span class=\"title\">旧镜像名称 新镜像名称</span></span><br><span class=\"line\"><span class=\"title\">例：</span></span><br><span class=\"line\"><span class=\"title\">docker</span> <span class=\"keyword\">tag</span> <span class=\"title\">500b941e6f79</span> tomcat7:jre7</span><br></pre></td></tr></table></figure>\n<p>创建不运行容器</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">create</span> <span class=\"comment\">--name web httpd</span></span><br></pre></td></tr></table></figure>\n<p>创建并运行容器</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd -p 88:80--name test --restart always centos:7 /bin/bash</span><br><span class=\"line\">可用docker ps -a，查看容器运行状态</span><br><span class=\"line\">参数：</span><br><span class=\"line\">    -<span class=\"ruby\">i  以交互方式登录</span></span><br><span class=\"line\"><span class=\"ruby\">    -t  允许以交互方式打开终端</span></span><br><span class=\"line\"><span class=\"ruby\">    -d  在后台运行</span></span><br><span class=\"line\"><span class=\"ruby\">    -p  映射端口，将容器中的<span class=\"number\">80</span>端口映射成物理机中的<span class=\"number\">88</span>端口</span></span><br><span class=\"line\"><span class=\"ruby\">    --name  添加容器名</span></span><br><span class=\"line\"><span class=\"ruby\">    --restart always  跟随docker启动而启动，就是当服务重启时、启动时，该容器也会运行</span></span><br><span class=\"line\"><span class=\"ruby\">    --rm  容器一旦停止就会被自动删除，不添加的话容器会永久保存在计算机中</span></span><br><span class=\"line\"><span class=\"ruby\">    --privileged  添加特权，不添加此参数 运行一些系统命令时错</span></span><br></pre></td></tr></table></figure>\n<p>查看所有容器</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker ps -a</span></span><br></pre></td></tr></table></figure>\n<p>立马强制性退出容器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">kill</span> 容器<span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure>\n<p>停止容器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">stop</span> 容器<span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure>\n<p>启动容器</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">start</span> 容器<span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure>\n<p>进入容器</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -<span class=\"keyword\">it</span> 容器<span class=\"built_in\">id</span> /bin/bash</span><br></pre></td></tr></table></figure>\n<p>挂起容器</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pause 容器<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n<p>取消挂起正常运行容器</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker unpause 容器<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n<p>删除容器：（删除容器前需要停止容器）</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> 容器id</span><br><span class=\"line\">如：容器正在运行中需要删除容器，就需要添加参数<span class=\"operator\">-f</span></span><br><span class=\"line\">docker <span class=\"built_in\">rm</span> <span class=\"operator\">-f</span> 容器id</span><br></pre></td></tr></table></figure>\n<p>查看容器信息</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect 容器<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n<p>编写进入容器脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/bin/docker-enter</span><br><span class=\"line\">!/bin/sh</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -e $(dirname <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span>)/nsenter ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"> with boot2docker, nsenter is not <span class=\"keyword\">in</span> the PATH but it is <span class=\"keyword\">in</span> the same folder</span><br><span class=\"line\">  NSENTER=$(dirname <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span>)/nsenter</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  NSENTER=nsenter</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: `basename &quot;</span><span class=\"variable\">$0</span><span class=\"string\">&quot;` CONTAINER [COMMAND [ARG]...]&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Enters the Docker CONTAINER and executes the specified COMMAND.&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;If COMMAND is not specified, runs an interactive shell in CONTAINER.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  PID=$(docker inspect --format <span class=\"string\">&quot;&#123;&#123;.State.Pid&#125;&#125;&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$PID</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">shift</span></span><br><span class=\"line\">  OPTS=<span class=\"string\">&quot;--target <span class=\"variable\">$PID</span> --mount --uts --ipc --net --pid --&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># No command given.</span></span><br><span class=\"line\">    <span class=\"comment\"># Use su to clear all host environment variables except for TERM,</span></span><br><span class=\"line\">    <span class=\"comment\"># initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,</span></span><br><span class=\"line\">    <span class=\"comment\"># and start a login shell.</span></span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$NSENTER</span>&quot;</span> <span class=\"variable\">$OPTS</span> su - root</span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"comment\"># Use env to clear all host environment variables.</span></span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"variable\">$NSENTER</span>&quot;</span> <span class=\"variable\">$OPTS</span> env --ignore-environment -- <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>给予权限</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x <span class=\"regexp\">/usr/</span>bin/docker-enter</span><br></pre></td></tr></table></figure>\n<p>可以使用该脚本，加容器name或者容器id来启动容器</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-enter 容器<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n<h5 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h5><p>虚拟机版本低于7.7，进如容器后无法使用网络，因为默认是关闭路由转发的，需要手动开启。<br>退出容器在宿主机执行以下操作：<br>echo “net.ipv4.ip_forward=1” &gt;&gt; /etc/sysctl.conf<br>sysctl -p</p>\n<h5 id=\"提示：\"><a href=\"#提示：\" class=\"headerlink\" title=\"提示：\"></a>提示：</h5><p>进入任何一个容器中，所有命令不可以使用，环境比脸都干净，需要自己手动安装命令。<br>如果想使用某一条命令就执行 yum provides 命令  该命令搜查出命令对应的安装包，安装成功后命令即可使用。</p>\n<p>如：<br>我想使用ifcofnig这条命令查看IP地址<br>安装前执行命令（报错：没有该命令）</p>\n<p><img src=\"/images/pasted-16.png\" alt=\"upload successful\"></p>\n<p>搜查命令对应的软件包</p>\n<p><img src=\"/images/pasted-17.png\" alt=\"upload successful\"><br>安装软件包</p>\n<p><img src=\"/images/pasted-18.png\" alt=\"upload successful\"><br>测试</p>\n<p><img src=\"/images/pasted-19.png\" alt=\"upload successful\"></p>\n"},{"title":"Docker的安装-镜像加速及理论","date":"2020-09-10T07:09:00.000Z","_content":"![upload successful](/images/pasted-1.png)\n![upload successful](/images/pasted-0.png)\n\n### Docker的安装\nDocker的[官网](https://www.docker.com/)\n\n必须是Centos7版本，最好是7.7的内核，docker目前不支持centos8\n\nDocker源路径的寻找\n\n点击`Get Docker`可以查看有关下载Docker的文档\n\n![upload successful](/images/pasted-2.png)\n\n在文档中找到对应的系统版本，就可以看到关于下载Docker的repo源\n\n![upload successful](/images/pasted-3.png)\n\n因为官网的Docker的repo源是通过走国外的网站来获取的，对于网络不是很好的，建议使用阿里的镜像站\n\n进入阿里的镜像站，找到`docker-ce`版本，在官网还有`docker-ee`版本，是企业版，会收费\n\n\n![upload successful](/images/pasted-4.png)\n\n这里好像阿里的网址改版了，进入后最下面的相关连接的下载地址才是我们想要的，也可以直接点击这里，根据系统版本选择对应的系统，这里以Linux为例\n\n\n![upload successful](/images/pasted-5.png)\n\n同样选择linux的系统版本，以centos为例\n\n\n![upload successful](/images/pasted-6.png)\n\n这里要求系统版本号为3.10，内核为7.5\n\n进入centos后，可以看到如图所示，其中gpg的路径用来校验安装docker的正确率，就是一个docker密钥，这个gpg的路径一会要用到，记下来`https://mirrors.aliyun.com/docker-ce/linux/centos/gpg`\n\n\n![upload successful](/images/pasted-8.png)\n\n根据上图再次选择centos的版本7，根据系统cpu选择`x86_64`\n\n\n![upload successful](/images/pasted-9.png)\n\n如上图所示stable代表稳定版本，稳定版本中的repodata，就是yum安装的源路径，Packages是安装是所用到的rpm包，所以正在编写yum源安装docker时，还需要记录稳定版本的路径`https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/`\n![upload successful](/images/pasted-7.png)\n\n#### 编写docker的yum源\n\n\n```java\nvim /etc/yum.repos.d/docker.repo   # 原来存在的repo文件不需要动\n 添加\n[docker]\nname=docker\n rpm源路径\nbaseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/\nenabled=1\ngpgcheck=1 # 启动密钥校验\ngpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg  # 密钥路径\n```\n#### 安装docker-ce\n```\nyum -y install docker-ce\ndocker -v # 查看docker版本\nsystemctl start docker  # 启动docker\ndocker version # 详细版本信息\n```\n##### 推荐下载以后学习中用到的镜像\n使用`docker pull`命令下载镜像\n```\ndocker pull centos  # 演示生产环境迁移或者安装软件时使用，默认下载完是8版本\ndocker pull busybox # 工具集，使用centos需要用到\ndocker pull httpd # apache\n```\n验证镜像是否下载完成\n```\ndocker images # 是否可以看到刚下载的三个镜像\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              latest              4e5021d210f6        2 days ago          64.2MB\nhttpd               latest              c5a012f9cf45        3 weeks ago         165MB\ncentos              latest              470671670cac        2 months ago        237MB\n下载完成后centos的版本需要特别注意，因为docker目前仅支持Centos7版本，所以要进入容器去看一下centos的版本\n```\n\n运行centos容器\n```\ndocker run -it centos\n```\n查看容器版本，如果是8版本需要删除下载7版本\n```\n[root@d280c874ea80 /]# cat /etc/redhat-release \nCentOS Linux release 8.1.1911 (Core) \n[root@d280c874ea80 /]# exit\n可以这里的centos是8版本，所以要将这个镜像删除\n```\n\n由于刚才是先使用镜像运行了容器，i才看到的版本号，容器占用了镜像在运行，所以要先将运行的容器关闭或者删除\n\n删除需要知道刚才运行容器的容器ID\n```\ndocker ps -a  # 查看运行容器\nCONTAINER ID  IMAGE    COMMAND       CREATED          STATUS                     PORTS   NAMES\nfaf96581cf3f  centos    \"/bin/bash\"  10 seconds ago   Exited (0) 3 seconds ago           recursing_goldstine\ndocker rm faf96581cf3f   # 停止容器运行\n删除镜像\n```\n\n删除centos:latest的最新版本\n```\ndocker rmi centos:latest  # 删除最新版本\ndocker pull centos:7  # 下载centos7版本\n```\n更改标签\n```\ndocker tag centos:7 centos:latest\ndocker rmi centos:7\n```\n可以使用上面的方法去查看centos的版本，已经变为7.7，或者直接查看\n```\ndocker run centos cat /etc/redhat-release\n```\n##### Docker的镜像加速\n\n即使使用了阿里云的镜像站，但是拿取的镜像还是走国外的网站，通过命令docker info可以看到\n```\n[root@192 ~]# docker info\nClient:\n Debug Mode: false\n \nServer:\n Containers: 0\n  Running: 0\n  Paused: 0\n  Stopped: 0\n Images: 2\n Server Version: 19.03.8\n Storage Driver: overlay2\n  Backing Filesystem: <unknown>\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\n Swarm: inactive\n Runtimes: runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: 7ad184331fa3e55e52b890ea95e65ba581ae3429\n runc version: dc9208a3303feef5b3839f4323d9beb36df0a9dd\n init version: fec3683\n Security Options:\n  seccomp\n   Profile: default\n Kernel Version: 3.10.0-862.el7.x86_64\n Operating System: CentOS Linux 7 (Core)\n OSType: linux\n Architecture: x86_64\n CPUs: 1\n Total Memory: 974.6MiB\n Name: 192.168.1.6\n ID: JZ5Z:EWGC:XMEA:VEVX:MR7N:ACYZ:PPVD:GAWU:HURX:7PZ4:YLKE:O47S\n Docker Root Dir: /var/lib/docker\n Debug Mode: false  \n Registry: https://index.docker.io/v1/  # 这就是国内镜像站镜像所在的仓库地址，还是docker的网站\n Labels:\n Experimental: false\n Insecure Registries:\n  127.0.0.0/8\n Live Restore Enabled: false\n ```\n##### 国内镜像站\n我们可以将镜像站改到国内的镜像站，这里国内有两个非常好用的镜像加速服务\n\n[Daocloud](daocloud.io)\n\n市面上比较大的公司\n\n注册登录后，在用户页面点击加速器的标志\n\n![upload successful](/images/pasted-10.png)\n\n然后找到对应的系统，复制命令在系统中执行即可\n\n![upload successful](/images/pasted-11.png)\n```\ncurl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io\n```\n执行完毕后，需要重启docker服务，再次查看docker info，会发现在最下方的输出信息如下\n```\nRegistry Mirrors:\n http://f1361db2.m.daocloud.io/\n ```\n这个配置会在/etc/docker/daemon.json文件中\n\n##### aliyun\n还有一种就是使用阿里云的镜像加速\n\n首先登录阿里云账号，进入控制台\n\n![upload successful](/images/pasted-12.png)\n\n第一次使用需要设置Registry登录密码\n\n图中部分就是我们要添加到docker配置文件中的内容，会自动生成，如果直接修改`daemon.json`配置文件，就复制加速器地址就可以，如果是还没有`daemon.json`，就复制以下配置加速器的命令即可完成阿里云镜像的加速\n\n\n![upload successful](/images/pasted-13.png)\n\n此时，在重启docker，去查看docker info会看到最后的输出信息变成了你复制的加速器地址\n```\nRegistry Mirrors:\n https://xxxxxx.mirror.aliyuncs.com/\n ```\n##### 镜像概念\n指计算机中默认的镜像，每个用户都可以进行修改，docker pull后的镜像没有在物理机，需要单独保存到物理机\n```\ndocker save -o 保存后的路径以及名字 要保存的镜像名:标签\n```\n如：\n```\ndocker save -o centos.tar centos:latest\n```\n##### Docker监听\n该已经发现了，启动docker后，使用netstat -anpt | grep docker并没有监听地址，但是查看启动进程ps -ef | grep docker是没有问题的\n\n现在希望docker变成一个有监听进程的服务\n```\nvim /usr/lib/systemd/system/docker.service \n 在service模块找到14行修改为以下添加了-H tcp://0.0.0.0\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0 --containerd=/run/containerd/containerd.sock\n```\n重新加载配置文件并重启服务\n```\nsystemctl daemon-reload\nsystemctl restart docker\n```\n再次查看端口\n```\nnetstat -anpt | grep docker\ntcp6       0      0 :::2375           :::*             LISTEN      60630/dockerd\n2375就是docker的端口\n```\n#### 所需要开启的功能\n```\n[root@localhost ~]# vi /etc/sysctl.conf\n添加：\nnet.bridge.bridge-nf-call-iptables = 1    //开启桥接流量转发\nnet.bridge.bridge-nf-call-ip6tables = 1   //开启ipv6的桥接流量转发\nnet.ipv4.ip_forward = 1  //路由表转发\n\n[root@localhost ~]# sysctl -p\n[root@localhost ~]# modprobe ip_vs_rr   //rr轮训转发\n[root@localhost ~]# modprobe br_netfilter //桥接卡的iptables的filter表\n```","source":"_posts/Docker的安装-镜像加速及理论.md","raw":"title: Docker的安装-镜像加速及理论\ncategories:\n  - Docker\ntags:\n  - Docker\ndate: 2020-09-10 15:09:00\n---\n![upload successful](/images/pasted-1.png)\n![upload successful](/images/pasted-0.png)\n\n### Docker的安装\nDocker的[官网](https://www.docker.com/)\n\n必须是Centos7版本，最好是7.7的内核，docker目前不支持centos8\n\nDocker源路径的寻找\n\n点击`Get Docker`可以查看有关下载Docker的文档\n\n![upload successful](/images/pasted-2.png)\n\n在文档中找到对应的系统版本，就可以看到关于下载Docker的repo源\n\n![upload successful](/images/pasted-3.png)\n\n因为官网的Docker的repo源是通过走国外的网站来获取的，对于网络不是很好的，建议使用阿里的镜像站\n\n进入阿里的镜像站，找到`docker-ce`版本，在官网还有`docker-ee`版本，是企业版，会收费\n\n\n![upload successful](/images/pasted-4.png)\n\n这里好像阿里的网址改版了，进入后最下面的相关连接的下载地址才是我们想要的，也可以直接点击这里，根据系统版本选择对应的系统，这里以Linux为例\n\n\n![upload successful](/images/pasted-5.png)\n\n同样选择linux的系统版本，以centos为例\n\n\n![upload successful](/images/pasted-6.png)\n\n这里要求系统版本号为3.10，内核为7.5\n\n进入centos后，可以看到如图所示，其中gpg的路径用来校验安装docker的正确率，就是一个docker密钥，这个gpg的路径一会要用到，记下来`https://mirrors.aliyun.com/docker-ce/linux/centos/gpg`\n\n\n![upload successful](/images/pasted-8.png)\n\n根据上图再次选择centos的版本7，根据系统cpu选择`x86_64`\n\n\n![upload successful](/images/pasted-9.png)\n\n如上图所示stable代表稳定版本，稳定版本中的repodata，就是yum安装的源路径，Packages是安装是所用到的rpm包，所以正在编写yum源安装docker时，还需要记录稳定版本的路径`https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/`\n![upload successful](/images/pasted-7.png)\n\n#### 编写docker的yum源\n\n\n```java\nvim /etc/yum.repos.d/docker.repo   # 原来存在的repo文件不需要动\n 添加\n[docker]\nname=docker\n rpm源路径\nbaseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/\nenabled=1\ngpgcheck=1 # 启动密钥校验\ngpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg  # 密钥路径\n```\n#### 安装docker-ce\n```\nyum -y install docker-ce\ndocker -v # 查看docker版本\nsystemctl start docker  # 启动docker\ndocker version # 详细版本信息\n```\n##### 推荐下载以后学习中用到的镜像\n使用`docker pull`命令下载镜像\n```\ndocker pull centos  # 演示生产环境迁移或者安装软件时使用，默认下载完是8版本\ndocker pull busybox # 工具集，使用centos需要用到\ndocker pull httpd # apache\n```\n验证镜像是否下载完成\n```\ndocker images # 是否可以看到刚下载的三个镜像\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              latest              4e5021d210f6        2 days ago          64.2MB\nhttpd               latest              c5a012f9cf45        3 weeks ago         165MB\ncentos              latest              470671670cac        2 months ago        237MB\n下载完成后centos的版本需要特别注意，因为docker目前仅支持Centos7版本，所以要进入容器去看一下centos的版本\n```\n\n运行centos容器\n```\ndocker run -it centos\n```\n查看容器版本，如果是8版本需要删除下载7版本\n```\n[root@d280c874ea80 /]# cat /etc/redhat-release \nCentOS Linux release 8.1.1911 (Core) \n[root@d280c874ea80 /]# exit\n可以这里的centos是8版本，所以要将这个镜像删除\n```\n\n由于刚才是先使用镜像运行了容器，i才看到的版本号，容器占用了镜像在运行，所以要先将运行的容器关闭或者删除\n\n删除需要知道刚才运行容器的容器ID\n```\ndocker ps -a  # 查看运行容器\nCONTAINER ID  IMAGE    COMMAND       CREATED          STATUS                     PORTS   NAMES\nfaf96581cf3f  centos    \"/bin/bash\"  10 seconds ago   Exited (0) 3 seconds ago           recursing_goldstine\ndocker rm faf96581cf3f   # 停止容器运行\n删除镜像\n```\n\n删除centos:latest的最新版本\n```\ndocker rmi centos:latest  # 删除最新版本\ndocker pull centos:7  # 下载centos7版本\n```\n更改标签\n```\ndocker tag centos:7 centos:latest\ndocker rmi centos:7\n```\n可以使用上面的方法去查看centos的版本，已经变为7.7，或者直接查看\n```\ndocker run centos cat /etc/redhat-release\n```\n##### Docker的镜像加速\n\n即使使用了阿里云的镜像站，但是拿取的镜像还是走国外的网站，通过命令docker info可以看到\n```\n[root@192 ~]# docker info\nClient:\n Debug Mode: false\n \nServer:\n Containers: 0\n  Running: 0\n  Paused: 0\n  Stopped: 0\n Images: 2\n Server Version: 19.03.8\n Storage Driver: overlay2\n  Backing Filesystem: <unknown>\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\n Swarm: inactive\n Runtimes: runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: 7ad184331fa3e55e52b890ea95e65ba581ae3429\n runc version: dc9208a3303feef5b3839f4323d9beb36df0a9dd\n init version: fec3683\n Security Options:\n  seccomp\n   Profile: default\n Kernel Version: 3.10.0-862.el7.x86_64\n Operating System: CentOS Linux 7 (Core)\n OSType: linux\n Architecture: x86_64\n CPUs: 1\n Total Memory: 974.6MiB\n Name: 192.168.1.6\n ID: JZ5Z:EWGC:XMEA:VEVX:MR7N:ACYZ:PPVD:GAWU:HURX:7PZ4:YLKE:O47S\n Docker Root Dir: /var/lib/docker\n Debug Mode: false  \n Registry: https://index.docker.io/v1/  # 这就是国内镜像站镜像所在的仓库地址，还是docker的网站\n Labels:\n Experimental: false\n Insecure Registries:\n  127.0.0.0/8\n Live Restore Enabled: false\n ```\n##### 国内镜像站\n我们可以将镜像站改到国内的镜像站，这里国内有两个非常好用的镜像加速服务\n\n[Daocloud](daocloud.io)\n\n市面上比较大的公司\n\n注册登录后，在用户页面点击加速器的标志\n\n![upload successful](/images/pasted-10.png)\n\n然后找到对应的系统，复制命令在系统中执行即可\n\n![upload successful](/images/pasted-11.png)\n```\ncurl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io\n```\n执行完毕后，需要重启docker服务，再次查看docker info，会发现在最下方的输出信息如下\n```\nRegistry Mirrors:\n http://f1361db2.m.daocloud.io/\n ```\n这个配置会在/etc/docker/daemon.json文件中\n\n##### aliyun\n还有一种就是使用阿里云的镜像加速\n\n首先登录阿里云账号，进入控制台\n\n![upload successful](/images/pasted-12.png)\n\n第一次使用需要设置Registry登录密码\n\n图中部分就是我们要添加到docker配置文件中的内容，会自动生成，如果直接修改`daemon.json`配置文件，就复制加速器地址就可以，如果是还没有`daemon.json`，就复制以下配置加速器的命令即可完成阿里云镜像的加速\n\n\n![upload successful](/images/pasted-13.png)\n\n此时，在重启docker，去查看docker info会看到最后的输出信息变成了你复制的加速器地址\n```\nRegistry Mirrors:\n https://xxxxxx.mirror.aliyuncs.com/\n ```\n##### 镜像概念\n指计算机中默认的镜像，每个用户都可以进行修改，docker pull后的镜像没有在物理机，需要单独保存到物理机\n```\ndocker save -o 保存后的路径以及名字 要保存的镜像名:标签\n```\n如：\n```\ndocker save -o centos.tar centos:latest\n```\n##### Docker监听\n该已经发现了，启动docker后，使用netstat -anpt | grep docker并没有监听地址，但是查看启动进程ps -ef | grep docker是没有问题的\n\n现在希望docker变成一个有监听进程的服务\n```\nvim /usr/lib/systemd/system/docker.service \n 在service模块找到14行修改为以下添加了-H tcp://0.0.0.0\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0 --containerd=/run/containerd/containerd.sock\n```\n重新加载配置文件并重启服务\n```\nsystemctl daemon-reload\nsystemctl restart docker\n```\n再次查看端口\n```\nnetstat -anpt | grep docker\ntcp6       0      0 :::2375           :::*             LISTEN      60630/dockerd\n2375就是docker的端口\n```\n#### 所需要开启的功能\n```\n[root@localhost ~]# vi /etc/sysctl.conf\n添加：\nnet.bridge.bridge-nf-call-iptables = 1    //开启桥接流量转发\nnet.bridge.bridge-nf-call-ip6tables = 1   //开启ipv6的桥接流量转发\nnet.ipv4.ip_forward = 1  //路由表转发\n\n[root@localhost ~]# sysctl -p\n[root@localhost ~]# modprobe ip_vs_rr   //rr轮训转发\n[root@localhost ~]# modprobe br_netfilter //桥接卡的iptables的filter表\n```","slug":"Docker的安装-镜像加速及理论","published":1,"updated":"2020-09-10T09:07:01.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0w0t1h0003fipv09xs8aic","content":"<p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"><br><img src=\"/images/pasted-0.png\" alt=\"upload successful\"></p>\n<h3 id=\"Docker的安装\"><a href=\"#Docker的安装\" class=\"headerlink\" title=\"Docker的安装\"></a>Docker的安装</h3><p>Docker的<a href=\"https://www.docker.com/\">官网</a></p>\n<p>必须是Centos7版本，最好是7.7的内核，docker目前不支持centos8</p>\n<p>Docker源路径的寻找</p>\n<p>点击<code>Get Docker</code>可以查看有关下载Docker的文档</p>\n<p><img src=\"/images/pasted-2.png\" alt=\"upload successful\"></p>\n<p>在文档中找到对应的系统版本，就可以看到关于下载Docker的repo源</p>\n<p><img src=\"/images/pasted-3.png\" alt=\"upload successful\"></p>\n<p>因为官网的Docker的repo源是通过走国外的网站来获取的，对于网络不是很好的，建议使用阿里的镜像站</p>\n<p>进入阿里的镜像站，找到<code>docker-ce</code>版本，在官网还有<code>docker-ee</code>版本，是企业版，会收费</p>\n<p><img src=\"/images/pasted-4.png\" alt=\"upload successful\"></p>\n<p>这里好像阿里的网址改版了，进入后最下面的相关连接的下载地址才是我们想要的，也可以直接点击这里，根据系统版本选择对应的系统，这里以Linux为例</p>\n<p><img src=\"/images/pasted-5.png\" alt=\"upload successful\"></p>\n<p>同样选择linux的系统版本，以centos为例</p>\n<p><img src=\"/images/pasted-6.png\" alt=\"upload successful\"></p>\n<p>这里要求系统版本号为3.10，内核为7.5</p>\n<p>进入centos后，可以看到如图所示，其中gpg的路径用来校验安装docker的正确率，就是一个docker密钥，这个gpg的路径一会要用到，记下来<code>https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</code></p>\n<p><img src=\"/images/pasted-8.png\" alt=\"upload successful\"></p>\n<p>根据上图再次选择centos的版本7，根据系统cpu选择<code>x86_64</code></p>\n<p><img src=\"/images/pasted-9.png\" alt=\"upload successful\"></p>\n<p>如上图所示stable代表稳定版本，稳定版本中的repodata，就是yum安装的源路径，Packages是安装是所用到的rpm包，所以正在编写yum源安装docker时，还需要记录稳定版本的路径<code>https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/</code><br><img src=\"/images/pasted-7.png\" alt=\"upload successful\"></p>\n<h4 id=\"编写docker的yum源\"><a href=\"#编写docker的yum源\" class=\"headerlink\" title=\"编写docker的yum源\"></a>编写docker的yum源</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum.repos.d/docker.repo   # 原来存在的repo文件不需要动</span><br><span class=\"line\"> 添加</span><br><span class=\"line\">[docker]</span><br><span class=\"line\">name=docker</span><br><span class=\"line\"> rpm源路径</span><br><span class=\"line\">baseurl=https:<span class=\"comment\">//mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/</span></span><br><span class=\"line\">enabled=<span class=\"number\">1</span></span><br><span class=\"line\">gpgcheck=1 # 启动密钥校验</span><br><span class=\"line\">gpgkey=https:<span class=\"comment\">//mirrors.aliyun.com/docker-ce/linux/centos/gpg  # 密钥路径</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装docker-ce\"><a href=\"#安装docker-ce\" class=\"headerlink\" title=\"安装docker-ce\"></a>安装docker-ce</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y <span class=\"keyword\">install</span> docker-ce</span><br><span class=\"line\">docker -v <span class=\"comment\"># 查看docker版本</span></span><br><span class=\"line\">systemctl <span class=\"keyword\">start</span> docker  <span class=\"comment\"># 启动docker</span></span><br><span class=\"line\">docker <span class=\"keyword\">version</span> <span class=\"comment\"># 详细版本信息</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"推荐下载以后学习中用到的镜像\"><a href=\"#推荐下载以后学习中用到的镜像\" class=\"headerlink\" title=\"推荐下载以后学习中用到的镜像\"></a>推荐下载以后学习中用到的镜像</h5><p>使用<code>docker pull</code>命令下载镜像</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull centos  <span class=\"comment\"># 演示生产环境迁移或者安装软件时使用，默认下载完是8版本</span></span><br><span class=\"line\">docker pull <span class=\"keyword\">busybox </span><span class=\"comment\"># 工具集，使用centos需要用到</span></span><br><span class=\"line\">docker pull httpd <span class=\"comment\"># apache</span></span><br></pre></td></tr></table></figure>\n<p>验证镜像是否下载完成</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images # 是否可以看到刚下载的三个镜像</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              latest              <span class=\"number\">4e5021</span>d210f6        <span class=\"number\">2</span> days ago          <span class=\"number\">64.2</span>MB</span><br><span class=\"line\">httpd               latest              c5a012f9cf45        <span class=\"number\">3</span> weeks ago         <span class=\"number\">165</span>MB</span><br><span class=\"line\">centos              latest              <span class=\"number\">470671670</span>cac        <span class=\"number\">2</span> months ago        <span class=\"number\">237</span>MB</span><br><span class=\"line\">下载完成后centos的版本需要特别注意，因为docker目前仅支持Centos7版本，所以要进入容器去看一下centos的版本</span><br></pre></td></tr></table></figure>\n\n<p>运行centos容器</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">run</span> -<span class=\"keyword\">it</span> centos</span><br></pre></td></tr></table></figure>\n<p>查看容器版本，如果是8版本需要删除下载7版本</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>d280c874ea80 /]# cat /etc/redhat-release </span><br><span class=\"line\">CentOS Linux release <span class=\"number\">8.1</span><span class=\"number\">.1911</span> (Core) </span><br><span class=\"line\">[<span class=\"symbol\">root@</span>d280c874ea80 /]# exit</span><br><span class=\"line\">可以这里的centos是<span class=\"number\">8</span>版本，所以要将这个镜像删除</span><br></pre></td></tr></table></figure>\n\n<p>由于刚才是先使用镜像运行了容器，i才看到的版本号，容器占用了镜像在运行，所以要先将运行的容器关闭或者删除</p>\n<p>删除需要知道刚才运行容器的容器ID</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -<span class=\"keyword\">a</span>  <span class=\"comment\"># 查看运行容器</span></span><br><span class=\"line\">CONTAINER ID  IMAGE    COMMAND       CREATED          STATUS                     PORTS   NAMES</span><br><span class=\"line\">faf96581cf3f  centos    <span class=\"string\">&quot;/bin/bash&quot;</span>  <span class=\"number\">10</span> <span class=\"built_in\">seconds</span> ago   Exited (<span class=\"number\">0</span>) <span class=\"number\">3</span> <span class=\"built_in\">seconds</span> ago           recursing_goldstine</span><br><span class=\"line\">docker rm faf96581cf3f   <span class=\"comment\"># 停止容器运行</span></span><br><span class=\"line\">删除镜像</span><br></pre></td></tr></table></figure>\n\n<p>删除centos:latest的最新版本</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> rmi centos:latest  <span class=\"comment\"># 删除最新版本</span></span><br><span class=\"line\">docker pull centos:<span class=\"number\">7</span>  <span class=\"comment\"># 下载centos7版本</span></span><br></pre></td></tr></table></figure>\n<p>更改标签</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">tag</span> cento<span class=\"variable\">s:7</span> cento<span class=\"variable\">s:latest</span></span><br><span class=\"line\">docker rmi cento<span class=\"variable\">s:7</span></span><br></pre></td></tr></table></figure>\n<p>可以使用上面的方法去查看centos的版本，已经变为7.7，或者直接查看</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">run</span> centos cat /etc/redhat-<span class=\"built_in\">release</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Docker的镜像加速\"><a href=\"#Docker的镜像加速\" class=\"headerlink\" title=\"Docker的镜像加速\"></a>Docker的镜像加速</h5><p>即使使用了阿里云的镜像站，但是拿取的镜像还是走国外的网站，通过命令docker info可以看到</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">root@192</span> <span class=\"string\">~</span>]<span class=\"comment\"># docker info</span></span><br><span class=\"line\"><span class=\"attr\">Client:</span></span><br><span class=\"line\"> <span class=\"attr\">Debug Mode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">Server:</span></span><br><span class=\"line\"> <span class=\"attr\">Containers:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">Running:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">Paused:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">Stopped:</span> <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"attr\">Images:</span> <span class=\"number\">2</span></span><br><span class=\"line\"> <span class=\"attr\">Server Version:</span> <span class=\"number\">19.03</span><span class=\"number\">.8</span></span><br><span class=\"line\"> <span class=\"attr\">Storage Driver:</span> <span class=\"string\">overlay2</span></span><br><span class=\"line\">  <span class=\"attr\">Backing Filesystem:</span> <span class=\"string\">&lt;unknown&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">Supports d_type:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">Native Overlay Diff:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> <span class=\"attr\">Logging Driver:</span> <span class=\"string\">json-file</span></span><br><span class=\"line\"> <span class=\"attr\">Cgroup Driver:</span> <span class=\"string\">cgroupfs</span></span><br><span class=\"line\"> <span class=\"attr\">Plugins:</span></span><br><span class=\"line\">  <span class=\"attr\">Volume:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"attr\">Network:</span> <span class=\"string\">bridge</span> <span class=\"string\">host</span> <span class=\"string\">ipvlan</span> <span class=\"string\">macvlan</span> <span class=\"literal\">null</span> <span class=\"string\">overlay</span></span><br><span class=\"line\">  <span class=\"attr\">Log:</span> <span class=\"string\">awslogs</span> <span class=\"string\">fluentd</span> <span class=\"string\">gcplogs</span> <span class=\"string\">gelf</span> <span class=\"string\">journald</span> <span class=\"string\">json-file</span> <span class=\"string\">local</span> <span class=\"string\">logentries</span> <span class=\"string\">splunk</span> <span class=\"string\">syslog</span></span><br><span class=\"line\"> <span class=\"attr\">Swarm:</span> <span class=\"string\">inactive</span></span><br><span class=\"line\"> <span class=\"attr\">Runtimes:</span> <span class=\"string\">runc</span></span><br><span class=\"line\"> <span class=\"attr\">Default Runtime:</span> <span class=\"string\">runc</span></span><br><span class=\"line\"> <span class=\"attr\">Init Binary:</span> <span class=\"string\">docker-init</span></span><br><span class=\"line\"> <span class=\"attr\">containerd version:</span> <span class=\"string\">7ad184331fa3e55e52b890ea95e65ba581ae3429</span></span><br><span class=\"line\"> <span class=\"attr\">runc version:</span> <span class=\"string\">dc9208a3303feef5b3839f4323d9beb36df0a9dd</span></span><br><span class=\"line\"> <span class=\"attr\">init version:</span> <span class=\"string\">fec3683</span></span><br><span class=\"line\"> <span class=\"attr\">Security Options:</span></span><br><span class=\"line\">  <span class=\"string\">seccomp</span></span><br><span class=\"line\">   <span class=\"attr\">Profile:</span> <span class=\"string\">default</span></span><br><span class=\"line\"> <span class=\"attr\">Kernel Version:</span> <span class=\"number\">3.10</span><span class=\"number\">.0</span><span class=\"number\">-862.</span><span class=\"string\">el7.x86_64</span></span><br><span class=\"line\"> <span class=\"attr\">Operating System:</span> <span class=\"string\">CentOS</span> <span class=\"string\">Linux</span> <span class=\"number\">7</span> <span class=\"string\">(Core)</span></span><br><span class=\"line\"> <span class=\"attr\">OSType:</span> <span class=\"string\">linux</span></span><br><span class=\"line\"> <span class=\"attr\">Architecture:</span> <span class=\"string\">x86_64</span></span><br><span class=\"line\"> <span class=\"attr\">CPUs:</span> <span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"attr\">Total Memory:</span> <span class=\"number\">974.</span><span class=\"string\">6MiB</span></span><br><span class=\"line\"> <span class=\"attr\">Name:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.6</span></span><br><span class=\"line\"> <span class=\"attr\">ID:</span> <span class=\"string\">JZ5Z:EWGC:XMEA:VEVX:MR7N:ACYZ:PPVD:GAWU:HURX:7PZ4:YLKE:O47S</span></span><br><span class=\"line\"> <span class=\"attr\">Docker Root Dir:</span> <span class=\"string\">/var/lib/docker</span></span><br><span class=\"line\"> <span class=\"attr\">Debug Mode:</span> <span class=\"literal\">false</span>  </span><br><span class=\"line\"> <span class=\"attr\">Registry:</span> <span class=\"string\">https://index.docker.io/v1/</span>  <span class=\"comment\"># 这就是国内镜像站镜像所在的仓库地址，还是docker的网站</span></span><br><span class=\"line\"> <span class=\"attr\">Labels:</span></span><br><span class=\"line\"> <span class=\"attr\">Experimental:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> <span class=\"attr\">Insecure Registries:</span></span><br><span class=\"line\">  <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/8</span></span><br><span class=\"line\"> <span class=\"attr\">Live Restore Enabled:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"国内镜像站\"><a href=\"#国内镜像站\" class=\"headerlink\" title=\"国内镜像站\"></a>国内镜像站</h5><p>我们可以将镜像站改到国内的镜像站，这里国内有两个非常好用的镜像加速服务</p>\n<p><a href=\"daocloud.io\">Daocloud</a></p>\n<p>市面上比较大的公司</p>\n<p>注册登录后，在用户页面点击加速器的标志</p>\n<p><img src=\"/images/pasted-10.png\" alt=\"upload successful\"></p>\n<p>然后找到对应的系统，复制命令在系统中执行即可</p>\n<p><img src=\"/images/pasted-11.png\" alt=\"upload successful\"></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https:<span class=\"regexp\">//g</span>et.daocloud.io<span class=\"regexp\">/daotools/</span>set_mirror.sh | sh -s http:<span class=\"regexp\">//</span>f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>\n<p>执行完毕后，需要重启docker服务，再次查看docker info，会发现在最下方的输出信息如下</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Registry</span> Mirrors:</span><br><span class=\"line\"> <span class=\"attribute\">http</span>://f<span class=\"number\">1361</span>db<span class=\"number\">2</span>.m.daocloud.io/</span><br></pre></td></tr></table></figure>\n<p>这个配置会在/etc/docker/daemon.json文件中</p>\n<h5 id=\"aliyun\"><a href=\"#aliyun\" class=\"headerlink\" title=\"aliyun\"></a>aliyun</h5><p>还有一种就是使用阿里云的镜像加速</p>\n<p>首先登录阿里云账号，进入控制台</p>\n<p><img src=\"/images/pasted-12.png\" alt=\"upload successful\"></p>\n<p>第一次使用需要设置Registry登录密码</p>\n<p>图中部分就是我们要添加到docker配置文件中的内容，会自动生成，如果直接修改<code>daemon.json</code>配置文件，就复制加速器地址就可以，如果是还没有<code>daemon.json</code>，就复制以下配置加速器的命令即可完成阿里云镜像的加速</p>\n<p><img src=\"/images/pasted-13.png\" alt=\"upload successful\"></p>\n<p>此时，在重启docker，去查看docker info会看到最后的输出信息变成了你复制的加速器地址</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Registry Mirror<span class=\"variable\">s:</span></span><br><span class=\"line\"> http<span class=\"variable\">s:</span>//xxxxxx.mirror.aliyuncs.<span class=\"keyword\">com</span>/</span><br></pre></td></tr></table></figure>\n<h5 id=\"镜像概念\"><a href=\"#镜像概念\" class=\"headerlink\" title=\"镜像概念\"></a>镜像概念</h5><p>指计算机中默认的镜像，每个用户都可以进行修改，docker pull后的镜像没有在物理机，需要单独保存到物理机</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">save</span> -o 保存后的路径以及名字 要保存的镜像名:标签</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">save</span> <span class=\"selector-tag\">-o</span> <span class=\"selector-tag\">centos</span><span class=\"selector-class\">.tar</span> <span class=\"selector-tag\">centos</span><span class=\"selector-pseudo\">:latest</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Docker监听\"><a href=\"#Docker监听\" class=\"headerlink\" title=\"Docker监听\"></a>Docker监听</h5><p>该已经发现了，启动docker后，使用netstat -anpt | grep docker并没有监听地址，但是查看启动进程ps -ef | grep docker是没有问题的</p>\n<p>现在希望docker变成一个有监听进程的服务</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">systemd</span>/<span class=\"title\">system</span>/<span class=\"title\">docker</span>.<span class=\"title\">service</span> </span></span><br><span class=\"line\"> 在service模块找到<span class=\"number\">14</span>行修改为以下添加了-H <span class=\"symbol\">tcp:</span>/<span class=\"regexp\">/0.0.0.0</span></span><br><span class=\"line\"><span class=\"regexp\">ExecStart=/usr</span><span class=\"regexp\">/bin/dockerd</span> -H <span class=\"symbol\">fd:</span>/<span class=\"regexp\">/ -H tcp:/</span><span class=\"regexp\">/0.0.0.0 --containerd=/run</span><span class=\"regexp\">/containerd/containerd</span>.sock</span><br></pre></td></tr></table></figure>\n<p>重新加载配置文件并重启服务</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">systemctl</span> <span class=\"string\">daemon-reload</span></span><br><span class=\"line\"><span class=\"attr\">systemctl</span> <span class=\"string\">restart docker</span></span><br></pre></td></tr></table></figure>\n<p>再次查看端口</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anpt | grep docker</span><br><span class=\"line\">tcp6       <span class=\"number\">0</span>      <span class=\"number\">0</span> :::<span class=\"number\">2375</span>           :::*             LISTEN      <span class=\"number\">60630</span>/dockerd</span><br><span class=\"line\"><span class=\"number\">2375</span>就是docker的端口</span><br></pre></td></tr></table></figure>\n<h4 id=\"所需要开启的功能\"><a href=\"#所需要开启的功能\" class=\"headerlink\" title=\"所需要开启的功能\"></a>所需要开启的功能</h4><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# vi /etc/sysctl.conf</span><br><span class=\"line\">添加：</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = <span class=\"number\">1</span>    <span class=\"comment\">//开启桥接流量转发</span></span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = <span class=\"number\">1</span>   <span class=\"comment\">//开启ipv6的桥接流量转发</span></span><br><span class=\"line\">net.ipv4.ip_forward = <span class=\"number\">1</span>  <span class=\"comment\">//路由表转发</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# sysctl -p</span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# modprobe ip_vs_rr   <span class=\"comment\">//rr轮训转发</span></span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# modprobe br_netfilter <span class=\"comment\">//桥接卡的iptables的filter表</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"><br><img src=\"/images/pasted-0.png\" alt=\"upload successful\"></p>\n<h3 id=\"Docker的安装\"><a href=\"#Docker的安装\" class=\"headerlink\" title=\"Docker的安装\"></a>Docker的安装</h3><p>Docker的<a href=\"https://www.docker.com/\">官网</a></p>\n<p>必须是Centos7版本，最好是7.7的内核，docker目前不支持centos8</p>\n<p>Docker源路径的寻找</p>\n<p>点击<code>Get Docker</code>可以查看有关下载Docker的文档</p>\n<p><img src=\"/images/pasted-2.png\" alt=\"upload successful\"></p>\n<p>在文档中找到对应的系统版本，就可以看到关于下载Docker的repo源</p>\n<p><img src=\"/images/pasted-3.png\" alt=\"upload successful\"></p>\n<p>因为官网的Docker的repo源是通过走国外的网站来获取的，对于网络不是很好的，建议使用阿里的镜像站</p>\n<p>进入阿里的镜像站，找到<code>docker-ce</code>版本，在官网还有<code>docker-ee</code>版本，是企业版，会收费</p>\n<p><img src=\"/images/pasted-4.png\" alt=\"upload successful\"></p>\n<p>这里好像阿里的网址改版了，进入后最下面的相关连接的下载地址才是我们想要的，也可以直接点击这里，根据系统版本选择对应的系统，这里以Linux为例</p>\n<p><img src=\"/images/pasted-5.png\" alt=\"upload successful\"></p>\n<p>同样选择linux的系统版本，以centos为例</p>\n<p><img src=\"/images/pasted-6.png\" alt=\"upload successful\"></p>\n<p>这里要求系统版本号为3.10，内核为7.5</p>\n<p>进入centos后，可以看到如图所示，其中gpg的路径用来校验安装docker的正确率，就是一个docker密钥，这个gpg的路径一会要用到，记下来<code>https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</code></p>\n<p><img src=\"/images/pasted-8.png\" alt=\"upload successful\"></p>\n<p>根据上图再次选择centos的版本7，根据系统cpu选择<code>x86_64</code></p>\n<p><img src=\"/images/pasted-9.png\" alt=\"upload successful\"></p>\n<p>如上图所示stable代表稳定版本，稳定版本中的repodata，就是yum安装的源路径，Packages是安装是所用到的rpm包，所以正在编写yum源安装docker时，还需要记录稳定版本的路径<code>https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/</code><br><img src=\"/images/pasted-7.png\" alt=\"upload successful\"></p>\n<h4 id=\"编写docker的yum源\"><a href=\"#编写docker的yum源\" class=\"headerlink\" title=\"编写docker的yum源\"></a>编写docker的yum源</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum.repos.d/docker.repo   # 原来存在的repo文件不需要动</span><br><span class=\"line\"> 添加</span><br><span class=\"line\">[docker]</span><br><span class=\"line\">name=docker</span><br><span class=\"line\"> rpm源路径</span><br><span class=\"line\">baseurl=https:<span class=\"comment\">//mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/</span></span><br><span class=\"line\">enabled=<span class=\"number\">1</span></span><br><span class=\"line\">gpgcheck=1 # 启动密钥校验</span><br><span class=\"line\">gpgkey=https:<span class=\"comment\">//mirrors.aliyun.com/docker-ce/linux/centos/gpg  # 密钥路径</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装docker-ce\"><a href=\"#安装docker-ce\" class=\"headerlink\" title=\"安装docker-ce\"></a>安装docker-ce</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y <span class=\"keyword\">install</span> docker-ce</span><br><span class=\"line\">docker -v <span class=\"comment\"># 查看docker版本</span></span><br><span class=\"line\">systemctl <span class=\"keyword\">start</span> docker  <span class=\"comment\"># 启动docker</span></span><br><span class=\"line\">docker <span class=\"keyword\">version</span> <span class=\"comment\"># 详细版本信息</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"推荐下载以后学习中用到的镜像\"><a href=\"#推荐下载以后学习中用到的镜像\" class=\"headerlink\" title=\"推荐下载以后学习中用到的镜像\"></a>推荐下载以后学习中用到的镜像</h5><p>使用<code>docker pull</code>命令下载镜像</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull centos  <span class=\"comment\"># 演示生产环境迁移或者安装软件时使用，默认下载完是8版本</span></span><br><span class=\"line\">docker pull <span class=\"keyword\">busybox </span><span class=\"comment\"># 工具集，使用centos需要用到</span></span><br><span class=\"line\">docker pull httpd <span class=\"comment\"># apache</span></span><br></pre></td></tr></table></figure>\n<p>验证镜像是否下载完成</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images # 是否可以看到刚下载的三个镜像</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              latest              <span class=\"number\">4e5021</span>d210f6        <span class=\"number\">2</span> days ago          <span class=\"number\">64.2</span>MB</span><br><span class=\"line\">httpd               latest              c5a012f9cf45        <span class=\"number\">3</span> weeks ago         <span class=\"number\">165</span>MB</span><br><span class=\"line\">centos              latest              <span class=\"number\">470671670</span>cac        <span class=\"number\">2</span> months ago        <span class=\"number\">237</span>MB</span><br><span class=\"line\">下载完成后centos的版本需要特别注意，因为docker目前仅支持Centos7版本，所以要进入容器去看一下centos的版本</span><br></pre></td></tr></table></figure>\n\n<p>运行centos容器</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">run</span> -<span class=\"keyword\">it</span> centos</span><br></pre></td></tr></table></figure>\n<p>查看容器版本，如果是8版本需要删除下载7版本</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>d280c874ea80 /]# cat /etc/redhat-release </span><br><span class=\"line\">CentOS Linux release <span class=\"number\">8.1</span><span class=\"number\">.1911</span> (Core) </span><br><span class=\"line\">[<span class=\"symbol\">root@</span>d280c874ea80 /]# exit</span><br><span class=\"line\">可以这里的centos是<span class=\"number\">8</span>版本，所以要将这个镜像删除</span><br></pre></td></tr></table></figure>\n\n<p>由于刚才是先使用镜像运行了容器，i才看到的版本号，容器占用了镜像在运行，所以要先将运行的容器关闭或者删除</p>\n<p>删除需要知道刚才运行容器的容器ID</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -<span class=\"keyword\">a</span>  <span class=\"comment\"># 查看运行容器</span></span><br><span class=\"line\">CONTAINER ID  IMAGE    COMMAND       CREATED          STATUS                     PORTS   NAMES</span><br><span class=\"line\">faf96581cf3f  centos    <span class=\"string\">&quot;/bin/bash&quot;</span>  <span class=\"number\">10</span> <span class=\"built_in\">seconds</span> ago   Exited (<span class=\"number\">0</span>) <span class=\"number\">3</span> <span class=\"built_in\">seconds</span> ago           recursing_goldstine</span><br><span class=\"line\">docker rm faf96581cf3f   <span class=\"comment\"># 停止容器运行</span></span><br><span class=\"line\">删除镜像</span><br></pre></td></tr></table></figure>\n\n<p>删除centos:latest的最新版本</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> rmi centos:latest  <span class=\"comment\"># 删除最新版本</span></span><br><span class=\"line\">docker pull centos:<span class=\"number\">7</span>  <span class=\"comment\"># 下载centos7版本</span></span><br></pre></td></tr></table></figure>\n<p>更改标签</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">tag</span> cento<span class=\"variable\">s:7</span> cento<span class=\"variable\">s:latest</span></span><br><span class=\"line\">docker rmi cento<span class=\"variable\">s:7</span></span><br></pre></td></tr></table></figure>\n<p>可以使用上面的方法去查看centos的版本，已经变为7.7，或者直接查看</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">run</span> centos cat /etc/redhat-<span class=\"built_in\">release</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Docker的镜像加速\"><a href=\"#Docker的镜像加速\" class=\"headerlink\" title=\"Docker的镜像加速\"></a>Docker的镜像加速</h5><p>即使使用了阿里云的镜像站，但是拿取的镜像还是走国外的网站，通过命令docker info可以看到</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">root@192</span> <span class=\"string\">~</span>]<span class=\"comment\"># docker info</span></span><br><span class=\"line\"><span class=\"attr\">Client:</span></span><br><span class=\"line\"> <span class=\"attr\">Debug Mode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">Server:</span></span><br><span class=\"line\"> <span class=\"attr\">Containers:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">Running:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">Paused:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">Stopped:</span> <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"attr\">Images:</span> <span class=\"number\">2</span></span><br><span class=\"line\"> <span class=\"attr\">Server Version:</span> <span class=\"number\">19.03</span><span class=\"number\">.8</span></span><br><span class=\"line\"> <span class=\"attr\">Storage Driver:</span> <span class=\"string\">overlay2</span></span><br><span class=\"line\">  <span class=\"attr\">Backing Filesystem:</span> <span class=\"string\">&lt;unknown&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">Supports d_type:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">Native Overlay Diff:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> <span class=\"attr\">Logging Driver:</span> <span class=\"string\">json-file</span></span><br><span class=\"line\"> <span class=\"attr\">Cgroup Driver:</span> <span class=\"string\">cgroupfs</span></span><br><span class=\"line\"> <span class=\"attr\">Plugins:</span></span><br><span class=\"line\">  <span class=\"attr\">Volume:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"attr\">Network:</span> <span class=\"string\">bridge</span> <span class=\"string\">host</span> <span class=\"string\">ipvlan</span> <span class=\"string\">macvlan</span> <span class=\"literal\">null</span> <span class=\"string\">overlay</span></span><br><span class=\"line\">  <span class=\"attr\">Log:</span> <span class=\"string\">awslogs</span> <span class=\"string\">fluentd</span> <span class=\"string\">gcplogs</span> <span class=\"string\">gelf</span> <span class=\"string\">journald</span> <span class=\"string\">json-file</span> <span class=\"string\">local</span> <span class=\"string\">logentries</span> <span class=\"string\">splunk</span> <span class=\"string\">syslog</span></span><br><span class=\"line\"> <span class=\"attr\">Swarm:</span> <span class=\"string\">inactive</span></span><br><span class=\"line\"> <span class=\"attr\">Runtimes:</span> <span class=\"string\">runc</span></span><br><span class=\"line\"> <span class=\"attr\">Default Runtime:</span> <span class=\"string\">runc</span></span><br><span class=\"line\"> <span class=\"attr\">Init Binary:</span> <span class=\"string\">docker-init</span></span><br><span class=\"line\"> <span class=\"attr\">containerd version:</span> <span class=\"string\">7ad184331fa3e55e52b890ea95e65ba581ae3429</span></span><br><span class=\"line\"> <span class=\"attr\">runc version:</span> <span class=\"string\">dc9208a3303feef5b3839f4323d9beb36df0a9dd</span></span><br><span class=\"line\"> <span class=\"attr\">init version:</span> <span class=\"string\">fec3683</span></span><br><span class=\"line\"> <span class=\"attr\">Security Options:</span></span><br><span class=\"line\">  <span class=\"string\">seccomp</span></span><br><span class=\"line\">   <span class=\"attr\">Profile:</span> <span class=\"string\">default</span></span><br><span class=\"line\"> <span class=\"attr\">Kernel Version:</span> <span class=\"number\">3.10</span><span class=\"number\">.0</span><span class=\"number\">-862.</span><span class=\"string\">el7.x86_64</span></span><br><span class=\"line\"> <span class=\"attr\">Operating System:</span> <span class=\"string\">CentOS</span> <span class=\"string\">Linux</span> <span class=\"number\">7</span> <span class=\"string\">(Core)</span></span><br><span class=\"line\"> <span class=\"attr\">OSType:</span> <span class=\"string\">linux</span></span><br><span class=\"line\"> <span class=\"attr\">Architecture:</span> <span class=\"string\">x86_64</span></span><br><span class=\"line\"> <span class=\"attr\">CPUs:</span> <span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"attr\">Total Memory:</span> <span class=\"number\">974.</span><span class=\"string\">6MiB</span></span><br><span class=\"line\"> <span class=\"attr\">Name:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.6</span></span><br><span class=\"line\"> <span class=\"attr\">ID:</span> <span class=\"string\">JZ5Z:EWGC:XMEA:VEVX:MR7N:ACYZ:PPVD:GAWU:HURX:7PZ4:YLKE:O47S</span></span><br><span class=\"line\"> <span class=\"attr\">Docker Root Dir:</span> <span class=\"string\">/var/lib/docker</span></span><br><span class=\"line\"> <span class=\"attr\">Debug Mode:</span> <span class=\"literal\">false</span>  </span><br><span class=\"line\"> <span class=\"attr\">Registry:</span> <span class=\"string\">https://index.docker.io/v1/</span>  <span class=\"comment\"># 这就是国内镜像站镜像所在的仓库地址，还是docker的网站</span></span><br><span class=\"line\"> <span class=\"attr\">Labels:</span></span><br><span class=\"line\"> <span class=\"attr\">Experimental:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> <span class=\"attr\">Insecure Registries:</span></span><br><span class=\"line\">  <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/8</span></span><br><span class=\"line\"> <span class=\"attr\">Live Restore Enabled:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"国内镜像站\"><a href=\"#国内镜像站\" class=\"headerlink\" title=\"国内镜像站\"></a>国内镜像站</h5><p>我们可以将镜像站改到国内的镜像站，这里国内有两个非常好用的镜像加速服务</p>\n<p><a href=\"daocloud.io\">Daocloud</a></p>\n<p>市面上比较大的公司</p>\n<p>注册登录后，在用户页面点击加速器的标志</p>\n<p><img src=\"/images/pasted-10.png\" alt=\"upload successful\"></p>\n<p>然后找到对应的系统，复制命令在系统中执行即可</p>\n<p><img src=\"/images/pasted-11.png\" alt=\"upload successful\"></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https:<span class=\"regexp\">//g</span>et.daocloud.io<span class=\"regexp\">/daotools/</span>set_mirror.sh | sh -s http:<span class=\"regexp\">//</span>f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>\n<p>执行完毕后，需要重启docker服务，再次查看docker info，会发现在最下方的输出信息如下</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Registry</span> Mirrors:</span><br><span class=\"line\"> <span class=\"attribute\">http</span>://f<span class=\"number\">1361</span>db<span class=\"number\">2</span>.m.daocloud.io/</span><br></pre></td></tr></table></figure>\n<p>这个配置会在/etc/docker/daemon.json文件中</p>\n<h5 id=\"aliyun\"><a href=\"#aliyun\" class=\"headerlink\" title=\"aliyun\"></a>aliyun</h5><p>还有一种就是使用阿里云的镜像加速</p>\n<p>首先登录阿里云账号，进入控制台</p>\n<p><img src=\"/images/pasted-12.png\" alt=\"upload successful\"></p>\n<p>第一次使用需要设置Registry登录密码</p>\n<p>图中部分就是我们要添加到docker配置文件中的内容，会自动生成，如果直接修改<code>daemon.json</code>配置文件，就复制加速器地址就可以，如果是还没有<code>daemon.json</code>，就复制以下配置加速器的命令即可完成阿里云镜像的加速</p>\n<p><img src=\"/images/pasted-13.png\" alt=\"upload successful\"></p>\n<p>此时，在重启docker，去查看docker info会看到最后的输出信息变成了你复制的加速器地址</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Registry Mirror<span class=\"variable\">s:</span></span><br><span class=\"line\"> http<span class=\"variable\">s:</span>//xxxxxx.mirror.aliyuncs.<span class=\"keyword\">com</span>/</span><br></pre></td></tr></table></figure>\n<h5 id=\"镜像概念\"><a href=\"#镜像概念\" class=\"headerlink\" title=\"镜像概念\"></a>镜像概念</h5><p>指计算机中默认的镜像，每个用户都可以进行修改，docker pull后的镜像没有在物理机，需要单独保存到物理机</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">save</span> -o 保存后的路径以及名字 要保存的镜像名:标签</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">docker</span> <span class=\"selector-tag\">save</span> <span class=\"selector-tag\">-o</span> <span class=\"selector-tag\">centos</span><span class=\"selector-class\">.tar</span> <span class=\"selector-tag\">centos</span><span class=\"selector-pseudo\">:latest</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Docker监听\"><a href=\"#Docker监听\" class=\"headerlink\" title=\"Docker监听\"></a>Docker监听</h5><p>该已经发现了，启动docker后，使用netstat -anpt | grep docker并没有监听地址，但是查看启动进程ps -ef | grep docker是没有问题的</p>\n<p>现在希望docker变成一个有监听进程的服务</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">systemd</span>/<span class=\"title\">system</span>/<span class=\"title\">docker</span>.<span class=\"title\">service</span> </span></span><br><span class=\"line\"> 在service模块找到<span class=\"number\">14</span>行修改为以下添加了-H <span class=\"symbol\">tcp:</span>/<span class=\"regexp\">/0.0.0.0</span></span><br><span class=\"line\"><span class=\"regexp\">ExecStart=/usr</span><span class=\"regexp\">/bin/dockerd</span> -H <span class=\"symbol\">fd:</span>/<span class=\"regexp\">/ -H tcp:/</span><span class=\"regexp\">/0.0.0.0 --containerd=/run</span><span class=\"regexp\">/containerd/containerd</span>.sock</span><br></pre></td></tr></table></figure>\n<p>重新加载配置文件并重启服务</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">systemctl</span> <span class=\"string\">daemon-reload</span></span><br><span class=\"line\"><span class=\"attr\">systemctl</span> <span class=\"string\">restart docker</span></span><br></pre></td></tr></table></figure>\n<p>再次查看端口</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anpt | grep docker</span><br><span class=\"line\">tcp6       <span class=\"number\">0</span>      <span class=\"number\">0</span> :::<span class=\"number\">2375</span>           :::*             LISTEN      <span class=\"number\">60630</span>/dockerd</span><br><span class=\"line\"><span class=\"number\">2375</span>就是docker的端口</span><br></pre></td></tr></table></figure>\n<h4 id=\"所需要开启的功能\"><a href=\"#所需要开启的功能\" class=\"headerlink\" title=\"所需要开启的功能\"></a>所需要开启的功能</h4><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# vi /etc/sysctl.conf</span><br><span class=\"line\">添加：</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = <span class=\"number\">1</span>    <span class=\"comment\">//开启桥接流量转发</span></span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = <span class=\"number\">1</span>   <span class=\"comment\">//开启ipv6的桥接流量转发</span></span><br><span class=\"line\">net.ipv4.ip_forward = <span class=\"number\">1</span>  <span class=\"comment\">//路由表转发</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# sysctl -p</span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# modprobe ip_vs_rr   <span class=\"comment\">//rr轮训转发</span></span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# modprobe br_netfilter <span class=\"comment\">//桥接卡的iptables的filter表</span></span><br></pre></td></tr></table></figure>"},{"title":"Docker私有仓库","author":"Semaik.","date":"2020-09-10T09:30:00.000Z","_content":"##### [Docker的公共仓库](https://hub.docker.com/)\n\n由Docker公司维护的Registry，用户也可以将自己的镜像保存到DockerHub上中免费的response中，因为在国内访问由很多的限制\n登录方法\n```\ndocker login -u 用户名 密码 https://\n```\n登录后下载方法\n```\ndocker pull 用户名/images名:tag\n```\n##### [Quay](https://quay.io/)\n\n被红帽收购后速度相当慢，红帽对国内还不是完全开放，是一个私人注册托管中心，它上面更多的是很多用户自己上传制作的镜像，没有很多的官方镜像，使用面也不是很广\n\n##### 阿里云镜像仓库\n\n是国内提供docker镜像的仓库，需要用户登录后在控制中心，找到容器镜像服务，可以镜像镜像搜索、新建自己的仓库、也包括官方镜像和其他用户开放的镜像，官方镜像是直接拿取的DockerHub的镜像，属于国内的一个缓存。\n\n这些公有镜像不适合工作中去使用，接下来就看私有仓库\n\n##### 使用registry私有仓库镜像\nHarbor仓库在微服务架构的文章中已经写到怎么使用了，这里就不多说了\n\n环境要：Docker服务器必须开启路由转发\n\n使用两台主机来完成接下来验证私有仓库的使用\n\n|主机\t\t\t  |   \t服务       |\t备注 |\n|:---------------:|:--------------------:|:--------:|\n|192.168.1.11\t|已安装启动docker\t|私有仓库|\n|192.168.1.12\t|已安装启动docker\t| \t\t |\n\n###### 步骤\n两台主机都做路由转发\n```\necho \"net.ipv4.ip_forward = 1\" >> /etc/sysctl.conf\nsysctl -p\n```\n###### 下载私库镜像\n\n`192.168.1.11`\n\n下载2版本的私有仓库镜像，2版本是go语言写的，速度和安全性都比1要好，1是python写的\n```\n[root@localhost ~]# docker pull registry:2\n```\n创建私库在本地物理机的存放路径\n```\n[root@localhost ~]# mkdir -p /opt/data/registry\n```\n运行私库\n\n使用镜像实例化，并进行相应的指定，后台运行仓库\n```\ndocker run -itd -p 5000:5000 --restart always \\\n--volume /opt/data/registry/:/var/lib/registry registry:2\n# 解释参数\n-p：指定端口，5000:5000表示在物理机开一个端口，在容器内开一个端口\n--restart always：无论容器遇到什么错误就会重启容器\n-v/--volume：本地目录映射到容器内的目录\n5000：是registry的端口号\n/var/lib/registry：是registry仓库中存放镜像的目录\n```\n运行起来后，在本地是可以监听到5000端口的\n```\n[root@localhost ~]# netstat -anput | grep 5000\ntcp6     0      0 :::5000      :::*         LISTEN      80040/docker-proxy\n```\n查看仓库中的镜像\n```\n[root@localhost ~]# curl 192.168.1.11:5000/v2/_catalog\n{\"repositories\":[]}  # 表示没有任何镜像\n```\n###### 指定私库地址\n\n需要修改docker的服务文件，让docker知道私有仓库地址\n```\n[root@localhost ~]# vim /usr/lib/systemd/system/docker.service \n# 14行的末尾添加--insecure-registry 192.168.1.11:5000\n# 14行也就是以ExecStart开头的一行\n```\n重新加载配置文件，并重启服务生效\n```\n[root@localhost ~]# systemctl daemon-reload \n[root@localhost ~]# systemctl restart docker\n```\n查看服务状态，可以看到是否识别到了私有仓库\n```\n[root@localhost ~]# systemctl status docker -l\n# 找到以下关键信息，则代表识别私库地址成功\n   CGroup: /system.slice/docker.service\n           ├─80357 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --insecure-registry 192.168.1.11:5000\n           └─80477 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 5000 -container-ip 172.17.0.2 -container-port 5000\n ```\n`192.168.1.12`\n进行修改docker的文件去指向docker的私有仓库地址\n```\n[root@localhost ~]# vim /usr/lib/systemd/system/docker.service \n# 14行的末尾添加--insecure-registry 192.168.1.11:5000\n# 14行也就是以ExecStart开头的一行\n[root@localhost ~]# systemctl daemon-reload \n[root@localhost ~]# systemctl restart docker\n```\n###### 验证\n\n`192.168.1.11`\n使用tag为镜像改个名字\n注意：改名字要按照格式来私库ip:5000/镜像名，否则会上传失败\n此时镜像名的作用：push到私库中（私库ip:5000），镜像名为httpd\n```\n[root@localhost ~]# docker tag httpd:latest 192.168.1.11:5000/httpd\n[root@localhost ~]# docker tag centos:latest 192.168.1.11:5000/centos\n[root@localhost ~]# docker tag busybox:latest 192.168.1.11:5000/busybox\n```\n将改名后的镜像上传到私有仓库中\n```\n[root@localhost ~]# docker push 192.168.1.11:5000/httpd\nThe push refers to repository [192.168.1.11:5000/httpd]\n25a92d79dbfe: Pushed \nb5432b464616: Pushed \ne6699b4fc2e3: Pushed \n762ba19e7ef1: Pushed \nf2cb0ecef392: Pushed \n[root@localhost ~]# docker push 192.168.1.11:5000/centos\nThe push refers to repository [192.168.1.11:5000/centos]\n77b174a6a187: Pushed \n[root@localhost ~]# docker push 192.168.1.11:5000/busybox\nThe push refers to repository [192.168.1.11:5000/busybox]\na6d503001157: Pushed\n```\n查看上传后的私库中的镜像\n`192.168.1.12`\n查看到的镜像名和前面讲的是一样的\n```\n[root@localhost ~]# curl 192.168.1.11:5000/v2/_catalog\n{\"repositories\":[\"busybox\",\"centos\",\"httpd\"]}\n```\n下载镜像，速度相当快\n```\n[root@localhost ~]# docker pull 192.168.1.11:5000/httpd\n# 最后会输出下载地址\nStatus: Downloaded newer image for 192.168.1.11:5000/httpd:latest\n192.168.1.11:5000/httpd:latest\n```\n`192.168.1.11`\n查看镜像映射到本地的存储目录\n```\n[root@localhost ~]# ls /opt/data/registry/docker/registry/v2/repositories\nbusybox  centos  httpd\n```\n###### 查看仓库中镜像的信息\n查看httpd镜像的tags\n```\n[root@localhost ~]# curl 192.168.1.11:5000/v2/httpd/tags/list\n{\"name\":\"httpd\",\"tags\":[\"latest\"]}\n```\n查看镜像的hash值\n```\ncurl 192.168.1.11:5000/v2/httpd/manifests/latest \\\n--header \"Accept: application/vnd.docker.distribution.manifest.v2+json\"\n# 找到第一个\"digest\":的值就是该镜像的hash值，以下的\"digest\":都是镜像层的hash值\n```\n删除私库镜像\n```\n# 直接进入目录删除其中一个镜像的目录即可\n[root@localhost ~]# rm -rf /opt/data/registry/docker/registry/v2/repositories/httpd\n[root@localhost ~]# curl 192.168.1.11:5000/v2/_catalog\n{\"repositories\":[\"busybox\",\"centos\"]}\n ```\n \n","source":"_posts/Docker私有仓库.md","raw":"title: Docker私有仓库\nauthor: Semaik.\ntags:\n  - Docker\ncategories:\n  - Docker\ndate: 2020-09-10 17:30:00\n---\n##### [Docker的公共仓库](https://hub.docker.com/)\n\n由Docker公司维护的Registry，用户也可以将自己的镜像保存到DockerHub上中免费的response中，因为在国内访问由很多的限制\n登录方法\n```\ndocker login -u 用户名 密码 https://\n```\n登录后下载方法\n```\ndocker pull 用户名/images名:tag\n```\n##### [Quay](https://quay.io/)\n\n被红帽收购后速度相当慢，红帽对国内还不是完全开放，是一个私人注册托管中心，它上面更多的是很多用户自己上传制作的镜像，没有很多的官方镜像，使用面也不是很广\n\n##### 阿里云镜像仓库\n\n是国内提供docker镜像的仓库，需要用户登录后在控制中心，找到容器镜像服务，可以镜像镜像搜索、新建自己的仓库、也包括官方镜像和其他用户开放的镜像，官方镜像是直接拿取的DockerHub的镜像，属于国内的一个缓存。\n\n这些公有镜像不适合工作中去使用，接下来就看私有仓库\n\n##### 使用registry私有仓库镜像\nHarbor仓库在微服务架构的文章中已经写到怎么使用了，这里就不多说了\n\n环境要：Docker服务器必须开启路由转发\n\n使用两台主机来完成接下来验证私有仓库的使用\n\n|主机\t\t\t  |   \t服务       |\t备注 |\n|:---------------:|:--------------------:|:--------:|\n|192.168.1.11\t|已安装启动docker\t|私有仓库|\n|192.168.1.12\t|已安装启动docker\t| \t\t |\n\n###### 步骤\n两台主机都做路由转发\n```\necho \"net.ipv4.ip_forward = 1\" >> /etc/sysctl.conf\nsysctl -p\n```\n###### 下载私库镜像\n\n`192.168.1.11`\n\n下载2版本的私有仓库镜像，2版本是go语言写的，速度和安全性都比1要好，1是python写的\n```\n[root@localhost ~]# docker pull registry:2\n```\n创建私库在本地物理机的存放路径\n```\n[root@localhost ~]# mkdir -p /opt/data/registry\n```\n运行私库\n\n使用镜像实例化，并进行相应的指定，后台运行仓库\n```\ndocker run -itd -p 5000:5000 --restart always \\\n--volume /opt/data/registry/:/var/lib/registry registry:2\n# 解释参数\n-p：指定端口，5000:5000表示在物理机开一个端口，在容器内开一个端口\n--restart always：无论容器遇到什么错误就会重启容器\n-v/--volume：本地目录映射到容器内的目录\n5000：是registry的端口号\n/var/lib/registry：是registry仓库中存放镜像的目录\n```\n运行起来后，在本地是可以监听到5000端口的\n```\n[root@localhost ~]# netstat -anput | grep 5000\ntcp6     0      0 :::5000      :::*         LISTEN      80040/docker-proxy\n```\n查看仓库中的镜像\n```\n[root@localhost ~]# curl 192.168.1.11:5000/v2/_catalog\n{\"repositories\":[]}  # 表示没有任何镜像\n```\n###### 指定私库地址\n\n需要修改docker的服务文件，让docker知道私有仓库地址\n```\n[root@localhost ~]# vim /usr/lib/systemd/system/docker.service \n# 14行的末尾添加--insecure-registry 192.168.1.11:5000\n# 14行也就是以ExecStart开头的一行\n```\n重新加载配置文件，并重启服务生效\n```\n[root@localhost ~]# systemctl daemon-reload \n[root@localhost ~]# systemctl restart docker\n```\n查看服务状态，可以看到是否识别到了私有仓库\n```\n[root@localhost ~]# systemctl status docker -l\n# 找到以下关键信息，则代表识别私库地址成功\n   CGroup: /system.slice/docker.service\n           ├─80357 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --insecure-registry 192.168.1.11:5000\n           └─80477 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 5000 -container-ip 172.17.0.2 -container-port 5000\n ```\n`192.168.1.12`\n进行修改docker的文件去指向docker的私有仓库地址\n```\n[root@localhost ~]# vim /usr/lib/systemd/system/docker.service \n# 14行的末尾添加--insecure-registry 192.168.1.11:5000\n# 14行也就是以ExecStart开头的一行\n[root@localhost ~]# systemctl daemon-reload \n[root@localhost ~]# systemctl restart docker\n```\n###### 验证\n\n`192.168.1.11`\n使用tag为镜像改个名字\n注意：改名字要按照格式来私库ip:5000/镜像名，否则会上传失败\n此时镜像名的作用：push到私库中（私库ip:5000），镜像名为httpd\n```\n[root@localhost ~]# docker tag httpd:latest 192.168.1.11:5000/httpd\n[root@localhost ~]# docker tag centos:latest 192.168.1.11:5000/centos\n[root@localhost ~]# docker tag busybox:latest 192.168.1.11:5000/busybox\n```\n将改名后的镜像上传到私有仓库中\n```\n[root@localhost ~]# docker push 192.168.1.11:5000/httpd\nThe push refers to repository [192.168.1.11:5000/httpd]\n25a92d79dbfe: Pushed \nb5432b464616: Pushed \ne6699b4fc2e3: Pushed \n762ba19e7ef1: Pushed \nf2cb0ecef392: Pushed \n[root@localhost ~]# docker push 192.168.1.11:5000/centos\nThe push refers to repository [192.168.1.11:5000/centos]\n77b174a6a187: Pushed \n[root@localhost ~]# docker push 192.168.1.11:5000/busybox\nThe push refers to repository [192.168.1.11:5000/busybox]\na6d503001157: Pushed\n```\n查看上传后的私库中的镜像\n`192.168.1.12`\n查看到的镜像名和前面讲的是一样的\n```\n[root@localhost ~]# curl 192.168.1.11:5000/v2/_catalog\n{\"repositories\":[\"busybox\",\"centos\",\"httpd\"]}\n```\n下载镜像，速度相当快\n```\n[root@localhost ~]# docker pull 192.168.1.11:5000/httpd\n# 最后会输出下载地址\nStatus: Downloaded newer image for 192.168.1.11:5000/httpd:latest\n192.168.1.11:5000/httpd:latest\n```\n`192.168.1.11`\n查看镜像映射到本地的存储目录\n```\n[root@localhost ~]# ls /opt/data/registry/docker/registry/v2/repositories\nbusybox  centos  httpd\n```\n###### 查看仓库中镜像的信息\n查看httpd镜像的tags\n```\n[root@localhost ~]# curl 192.168.1.11:5000/v2/httpd/tags/list\n{\"name\":\"httpd\",\"tags\":[\"latest\"]}\n```\n查看镜像的hash值\n```\ncurl 192.168.1.11:5000/v2/httpd/manifests/latest \\\n--header \"Accept: application/vnd.docker.distribution.manifest.v2+json\"\n# 找到第一个\"digest\":的值就是该镜像的hash值，以下的\"digest\":都是镜像层的hash值\n```\n删除私库镜像\n```\n# 直接进入目录删除其中一个镜像的目录即可\n[root@localhost ~]# rm -rf /opt/data/registry/docker/registry/v2/repositories/httpd\n[root@localhost ~]# curl 192.168.1.11:5000/v2/_catalog\n{\"repositories\":[\"busybox\",\"centos\"]}\n ```\n \n","slug":"Docker私有仓库","published":1,"updated":"2020-09-10T09:39:40.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0w0t1v0007fipva6ex1f0q","content":"<h5 id=\"Docker的公共仓库\"><a href=\"#Docker的公共仓库\" class=\"headerlink\" title=\"Docker的公共仓库\"></a><a href=\"https://hub.docker.com/\">Docker的公共仓库</a></h5><p>由Docker公司维护的Registry，用户也可以将自己的镜像保存到DockerHub上中免费的response中，因为在国内访问由很多的限制<br>登录方法</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login -u 用户名 密码 https:<span class=\"regexp\">//</span></span><br></pre></td></tr></table></figure>\n<p>登录后下载方法</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 用户名/images名:<span class=\"keyword\">tag</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Quay\"><a href=\"#Quay\" class=\"headerlink\" title=\"Quay\"></a><a href=\"https://quay.io/\">Quay</a></h5><p>被红帽收购后速度相当慢，红帽对国内还不是完全开放，是一个私人注册托管中心，它上面更多的是很多用户自己上传制作的镜像，没有很多的官方镜像，使用面也不是很广</p>\n<h5 id=\"阿里云镜像仓库\"><a href=\"#阿里云镜像仓库\" class=\"headerlink\" title=\"阿里云镜像仓库\"></a>阿里云镜像仓库</h5><p>是国内提供docker镜像的仓库，需要用户登录后在控制中心，找到容器镜像服务，可以镜像镜像搜索、新建自己的仓库、也包括官方镜像和其他用户开放的镜像，官方镜像是直接拿取的DockerHub的镜像，属于国内的一个缓存。</p>\n<p>这些公有镜像不适合工作中去使用，接下来就看私有仓库</p>\n<h5 id=\"使用registry私有仓库镜像\"><a href=\"#使用registry私有仓库镜像\" class=\"headerlink\" title=\"使用registry私有仓库镜像\"></a>使用registry私有仓库镜像</h5><p>Harbor仓库在微服务架构的文章中已经写到怎么使用了，这里就不多说了</p>\n<p>环境要：Docker服务器必须开启路由转发</p>\n<p>使用两台主机来完成接下来验证私有仓库的使用</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机</th>\n<th align=\"center\">服务</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">192.168.1.11</td>\n<td align=\"center\">已安装启动docker</td>\n<td align=\"center\">私有仓库</td>\n</tr>\n<tr>\n<td align=\"center\">192.168.1.12</td>\n<td align=\"center\">已安装启动docker</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h6 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h6><p>两台主机都做路由转发</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; <span class=\"regexp\">/etc/</span>sysctl.conf</span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<h6 id=\"下载私库镜像\"><a href=\"#下载私库镜像\" class=\"headerlink\" title=\"下载私库镜像\"></a>下载私库镜像</h6><p><code>192.168.1.11</code></p>\n<p>下载2版本的私有仓库镜像，2版本是go语言写的，速度和安全性都比1要好，1是python写的</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker pull registry:<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>创建私库在本地物理机的存放路径</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@localhost</span> ~]<span class=\"meta\"># mkdir -p /opt/data/registry</span></span><br></pre></td></tr></table></figure>\n<p>运行私库</p>\n<p>使用镜像实例化，并进行相应的指定，后台运行仓库</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd -p 5000:5000 --restart always \\</span><br><span class=\"line\">-<span class=\"ruby\">-volume /opt/data/registry/<span class=\"symbol\">:/var/lib/registry</span> <span class=\"symbol\">registry:</span><span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"ruby\"><span class=\"comment\"># 解释参数</span></span></span><br><span class=\"line\"><span class=\"ruby\">-p：指定端口，<span class=\"number\">5000</span><span class=\"symbol\">:</span><span class=\"number\">5000</span>表示在物理机开一个端口，在容器内开一个端口</span></span><br><span class=\"line\"><span class=\"ruby\">--restart always：无论容器遇到什么错误就会重启容器</span></span><br><span class=\"line\"><span class=\"ruby\">-v/--volume：本地目录映射到容器内的目录</span></span><br><span class=\"line\"><span class=\"ruby\"><span class=\"number\">5000</span>：是registry的端口号</span></span><br><span class=\"line\"><span class=\"ruby\">/var/lib/registry：是registry仓库中存放镜像的目录</span></span><br></pre></td></tr></table></figure>\n<p>运行起来后，在本地是可以监听到5000端口的</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# netstat -anput | grep <span class=\"number\">5000</span></span><br><span class=\"line\">tcp6     <span class=\"number\">0</span>      <span class=\"number\">0</span> :::<span class=\"number\">5000</span>      :::*         LISTEN      <span class=\"number\">80040</span>/docker-proxy</span><br></pre></td></tr></table></figure>\n<p>查看仓库中的镜像</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# curl <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/v2/_catalog</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;repositories&quot;</span>:[]&#125;  # 表示没有任何镜像</span><br></pre></td></tr></table></figure>\n<h6 id=\"指定私库地址\"><a href=\"#指定私库地址\" class=\"headerlink\" title=\"指定私库地址\"></a>指定私库地址</h6><p>需要修改docker的服务文件，让docker知道私有仓库地址</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# vim /usr/lib/systemd/system/docker.service </span><br><span class=\"line\"># <span class=\"number\">14</span>行的末尾添加--insecure-registry <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span></span><br><span class=\"line\"># <span class=\"number\">14</span>行也就是以ExecStart开头的一行</span><br></pre></td></tr></table></figure>\n<p>重新加载配置文件，并重启服务生效</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@localhost</span> ~]<span class=\"meta\"># systemctl daemon-reload </span></span><br><span class=\"line\">[root<span class=\"symbol\">@localhost</span> ~]<span class=\"meta\"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>\n<p>查看服务状态，可以看到是否识别到了私有仓库</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">root@localhost</span> <span class=\"string\">~</span>]<span class=\"comment\"># systemctl status docker -l</span></span><br><span class=\"line\"><span class=\"comment\"># 找到以下关键信息，则代表识别私库地址成功</span></span><br><span class=\"line\">   <span class=\"attr\">CGroup:</span> <span class=\"string\">/system.slice/docker.service</span></span><br><span class=\"line\">           <span class=\"string\">├─80357</span> <span class=\"string\">/usr/bin/dockerd</span> <span class=\"string\">-H</span> <span class=\"string\">fd://</span> <span class=\"string\">--containerd=/run/containerd/containerd.sock</span> <span class=\"string\">--insecure-registry</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span><span class=\"string\">:5000</span></span><br><span class=\"line\">           <span class=\"string\">└─80477</span> <span class=\"string\">/usr/bin/docker-proxy</span> <span class=\"string\">-proto</span> <span class=\"string\">tcp</span> <span class=\"string\">-host-ip</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span> <span class=\"string\">-host-port</span> <span class=\"number\">5000</span> <span class=\"string\">-container-ip</span> <span class=\"number\">172.17</span><span class=\"number\">.0</span><span class=\"number\">.2</span> <span class=\"string\">-container-port</span> <span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n<p><code>192.168.1.12</code><br>进行修改docker的文件去指向docker的私有仓库地址</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# vim /usr/lib/systemd/system/docker.service </span><br><span class=\"line\"># <span class=\"number\">14</span>行的末尾添加--insecure-registry <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span></span><br><span class=\"line\"># <span class=\"number\">14</span>行也就是以ExecStart开头的一行</span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# systemctl daemon-reload </span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h6 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h6><p><code>192.168.1.11</code><br>使用tag为镜像改个名字<br>注意：改名字要按照格式来私库ip:5000/镜像名，否则会上传失败<br>此时镜像名的作用：push到私库中（私库ip:5000），镜像名为httpd</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker tag httpd:latest <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/httpd</span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker tag centos:latest <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/centos</span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker tag busybox:latest <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/busybox</span><br></pre></td></tr></table></figure>\n<p>将改名后的镜像上传到私有仓库中</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker push <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/httpd</span><br><span class=\"line\">The push <span class=\"built_in\">ref</span>ers to repository [<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/httpd]</span><br><span class=\"line\"><span class=\"number\">25</span>a92d79dbfe: Pushed </span><br><span class=\"line\">b5432b464616: Pushed </span><br><span class=\"line\">e6699b4fc2e3: Pushed </span><br><span class=\"line\"><span class=\"number\">762</span>ba19e7ef1: Pushed </span><br><span class=\"line\">f2cb0ecef392: Pushed </span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker push <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/centos</span><br><span class=\"line\">The push <span class=\"built_in\">ref</span>ers to repository [<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/centos]</span><br><span class=\"line\"><span class=\"number\">77</span>b174a6a187: Pushed </span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker push <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/busybox</span><br><span class=\"line\">The push <span class=\"built_in\">ref</span>ers to repository [<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/busybox]</span><br><span class=\"line\">a6d503001157: Pushed</span><br></pre></td></tr></table></figure>\n<p>查看上传后的私库中的镜像<br><code>192.168.1.12</code><br>查看到的镜像名和前面讲的是一样的</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@localhost</span> ~]<span class=\"meta\"># curl 192.168.1.11:5000/v2/_catalog</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;repositories&quot;</span>:[<span class=\"string\">&quot;busybox&quot;</span>,<span class=\"string\">&quot;centos&quot;</span>,<span class=\"string\">&quot;httpd&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>\n<p>下载镜像，速度相当快</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker pull <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/httpd</span><br><span class=\"line\"># 最后会输出下载地址</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/httpd:latest</span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/httpd:latest</span><br></pre></td></tr></table></figure>\n<p><code>192.168.1.11</code><br>查看镜像映射到本地的存储目录</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# ls <span class=\"regexp\">/opt/</span>data<span class=\"regexp\">/registry/</span>docker<span class=\"regexp\">/registry/</span>v2/<span class=\"keyword\">repositories</span></span><br><span class=\"line\">busybox  centos  httpd</span><br></pre></td></tr></table></figure>\n<h6 id=\"查看仓库中镜像的信息\"><a href=\"#查看仓库中镜像的信息\" class=\"headerlink\" title=\"查看仓库中镜像的信息\"></a>查看仓库中镜像的信息</h6><p>查看httpd镜像的tags</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# curl <span class=\"number\">192.168</span>.<span class=\"number\">1.11</span>:<span class=\"number\">5000</span><span class=\"regexp\">/v2/</span>httpd<span class=\"regexp\">/tags/</span>list</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;httpd&quot;</span>,<span class=\"string\">&quot;tags&quot;</span>:[<span class=\"string\">&quot;latest&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>\n<p>查看镜像的hash值</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl <span class=\"number\">192.168</span>.<span class=\"number\">1.11</span>:<span class=\"number\">5000</span><span class=\"regexp\">/v2/</span>httpd<span class=\"regexp\">/manifests/</span>latest \\</span><br><span class=\"line\">--header <span class=\"string\">&quot;Accept: application/vnd.docker.distribution.manifest.v2+json&quot;</span></span><br><span class=\"line\"># 找到第一个<span class=\"string\">&quot;digest&quot;</span>:的值就是该镜像的hash值，以下的<span class=\"string\">&quot;digest&quot;</span>:都是镜像层的hash值</span><br></pre></td></tr></table></figure>\n<p>删除私库镜像</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 直接进入目录删除其中一个镜像的目录即可</span><br><span class=\"line\">[root@localhost ~]# rm -rf <span class=\"regexp\">/opt/</span>data<span class=\"regexp\">/registry/</span>docker<span class=\"regexp\">/registry/</span>v2<span class=\"regexp\">/repositories/</span>httpd</span><br><span class=\"line\">[root@localhost ~]# curl <span class=\"number\">192.168</span>.<span class=\"number\">1.11</span>:<span class=\"number\">5000</span><span class=\"regexp\">/v2/</span>_catalog</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;repositories&quot;</span>:[<span class=\"string\">&quot;busybox&quot;</span>,<span class=\"string\">&quot;centos&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"Docker的公共仓库\"><a href=\"#Docker的公共仓库\" class=\"headerlink\" title=\"Docker的公共仓库\"></a><a href=\"https://hub.docker.com/\">Docker的公共仓库</a></h5><p>由Docker公司维护的Registry，用户也可以将自己的镜像保存到DockerHub上中免费的response中，因为在国内访问由很多的限制<br>登录方法</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login -u 用户名 密码 https:<span class=\"regexp\">//</span></span><br></pre></td></tr></table></figure>\n<p>登录后下载方法</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 用户名/images名:<span class=\"keyword\">tag</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Quay\"><a href=\"#Quay\" class=\"headerlink\" title=\"Quay\"></a><a href=\"https://quay.io/\">Quay</a></h5><p>被红帽收购后速度相当慢，红帽对国内还不是完全开放，是一个私人注册托管中心，它上面更多的是很多用户自己上传制作的镜像，没有很多的官方镜像，使用面也不是很广</p>\n<h5 id=\"阿里云镜像仓库\"><a href=\"#阿里云镜像仓库\" class=\"headerlink\" title=\"阿里云镜像仓库\"></a>阿里云镜像仓库</h5><p>是国内提供docker镜像的仓库，需要用户登录后在控制中心，找到容器镜像服务，可以镜像镜像搜索、新建自己的仓库、也包括官方镜像和其他用户开放的镜像，官方镜像是直接拿取的DockerHub的镜像，属于国内的一个缓存。</p>\n<p>这些公有镜像不适合工作中去使用，接下来就看私有仓库</p>\n<h5 id=\"使用registry私有仓库镜像\"><a href=\"#使用registry私有仓库镜像\" class=\"headerlink\" title=\"使用registry私有仓库镜像\"></a>使用registry私有仓库镜像</h5><p>Harbor仓库在微服务架构的文章中已经写到怎么使用了，这里就不多说了</p>\n<p>环境要：Docker服务器必须开启路由转发</p>\n<p>使用两台主机来完成接下来验证私有仓库的使用</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">主机</th>\n<th align=\"center\">服务</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">192.168.1.11</td>\n<td align=\"center\">已安装启动docker</td>\n<td align=\"center\">私有仓库</td>\n</tr>\n<tr>\n<td align=\"center\">192.168.1.12</td>\n<td align=\"center\">已安装启动docker</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h6 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h6><p>两台主机都做路由转发</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; <span class=\"regexp\">/etc/</span>sysctl.conf</span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n<h6 id=\"下载私库镜像\"><a href=\"#下载私库镜像\" class=\"headerlink\" title=\"下载私库镜像\"></a>下载私库镜像</h6><p><code>192.168.1.11</code></p>\n<p>下载2版本的私有仓库镜像，2版本是go语言写的，速度和安全性都比1要好，1是python写的</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker pull registry:<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>创建私库在本地物理机的存放路径</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@localhost</span> ~]<span class=\"meta\"># mkdir -p /opt/data/registry</span></span><br></pre></td></tr></table></figure>\n<p>运行私库</p>\n<p>使用镜像实例化，并进行相应的指定，后台运行仓库</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd -p 5000:5000 --restart always \\</span><br><span class=\"line\">-<span class=\"ruby\">-volume /opt/data/registry/<span class=\"symbol\">:/var/lib/registry</span> <span class=\"symbol\">registry:</span><span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"ruby\"><span class=\"comment\"># 解释参数</span></span></span><br><span class=\"line\"><span class=\"ruby\">-p：指定端口，<span class=\"number\">5000</span><span class=\"symbol\">:</span><span class=\"number\">5000</span>表示在物理机开一个端口，在容器内开一个端口</span></span><br><span class=\"line\"><span class=\"ruby\">--restart always：无论容器遇到什么错误就会重启容器</span></span><br><span class=\"line\"><span class=\"ruby\">-v/--volume：本地目录映射到容器内的目录</span></span><br><span class=\"line\"><span class=\"ruby\"><span class=\"number\">5000</span>：是registry的端口号</span></span><br><span class=\"line\"><span class=\"ruby\">/var/lib/registry：是registry仓库中存放镜像的目录</span></span><br></pre></td></tr></table></figure>\n<p>运行起来后，在本地是可以监听到5000端口的</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# netstat -anput | grep <span class=\"number\">5000</span></span><br><span class=\"line\">tcp6     <span class=\"number\">0</span>      <span class=\"number\">0</span> :::<span class=\"number\">5000</span>      :::*         LISTEN      <span class=\"number\">80040</span>/docker-proxy</span><br></pre></td></tr></table></figure>\n<p>查看仓库中的镜像</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# curl <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/v2/_catalog</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;repositories&quot;</span>:[]&#125;  # 表示没有任何镜像</span><br></pre></td></tr></table></figure>\n<h6 id=\"指定私库地址\"><a href=\"#指定私库地址\" class=\"headerlink\" title=\"指定私库地址\"></a>指定私库地址</h6><p>需要修改docker的服务文件，让docker知道私有仓库地址</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# vim /usr/lib/systemd/system/docker.service </span><br><span class=\"line\"># <span class=\"number\">14</span>行的末尾添加--insecure-registry <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span></span><br><span class=\"line\"># <span class=\"number\">14</span>行也就是以ExecStart开头的一行</span><br></pre></td></tr></table></figure>\n<p>重新加载配置文件，并重启服务生效</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@localhost</span> ~]<span class=\"meta\"># systemctl daemon-reload </span></span><br><span class=\"line\">[root<span class=\"symbol\">@localhost</span> ~]<span class=\"meta\"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>\n<p>查看服务状态，可以看到是否识别到了私有仓库</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">root@localhost</span> <span class=\"string\">~</span>]<span class=\"comment\"># systemctl status docker -l</span></span><br><span class=\"line\"><span class=\"comment\"># 找到以下关键信息，则代表识别私库地址成功</span></span><br><span class=\"line\">   <span class=\"attr\">CGroup:</span> <span class=\"string\">/system.slice/docker.service</span></span><br><span class=\"line\">           <span class=\"string\">├─80357</span> <span class=\"string\">/usr/bin/dockerd</span> <span class=\"string\">-H</span> <span class=\"string\">fd://</span> <span class=\"string\">--containerd=/run/containerd/containerd.sock</span> <span class=\"string\">--insecure-registry</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span><span class=\"string\">:5000</span></span><br><span class=\"line\">           <span class=\"string\">└─80477</span> <span class=\"string\">/usr/bin/docker-proxy</span> <span class=\"string\">-proto</span> <span class=\"string\">tcp</span> <span class=\"string\">-host-ip</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span> <span class=\"string\">-host-port</span> <span class=\"number\">5000</span> <span class=\"string\">-container-ip</span> <span class=\"number\">172.17</span><span class=\"number\">.0</span><span class=\"number\">.2</span> <span class=\"string\">-container-port</span> <span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n<p><code>192.168.1.12</code><br>进行修改docker的文件去指向docker的私有仓库地址</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# vim /usr/lib/systemd/system/docker.service </span><br><span class=\"line\"># <span class=\"number\">14</span>行的末尾添加--insecure-registry <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span></span><br><span class=\"line\"># <span class=\"number\">14</span>行也就是以ExecStart开头的一行</span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# systemctl daemon-reload </span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h6 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h6><p><code>192.168.1.11</code><br>使用tag为镜像改个名字<br>注意：改名字要按照格式来私库ip:5000/镜像名，否则会上传失败<br>此时镜像名的作用：push到私库中（私库ip:5000），镜像名为httpd</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker tag httpd:latest <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/httpd</span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker tag centos:latest <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/centos</span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker tag busybox:latest <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/busybox</span><br></pre></td></tr></table></figure>\n<p>将改名后的镜像上传到私有仓库中</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker push <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/httpd</span><br><span class=\"line\">The push <span class=\"built_in\">ref</span>ers to repository [<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/httpd]</span><br><span class=\"line\"><span class=\"number\">25</span>a92d79dbfe: Pushed </span><br><span class=\"line\">b5432b464616: Pushed </span><br><span class=\"line\">e6699b4fc2e3: Pushed </span><br><span class=\"line\"><span class=\"number\">762</span>ba19e7ef1: Pushed </span><br><span class=\"line\">f2cb0ecef392: Pushed </span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker push <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/centos</span><br><span class=\"line\">The push <span class=\"built_in\">ref</span>ers to repository [<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/centos]</span><br><span class=\"line\"><span class=\"number\">77</span>b174a6a187: Pushed </span><br><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker push <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/busybox</span><br><span class=\"line\">The push <span class=\"built_in\">ref</span>ers to repository [<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/busybox]</span><br><span class=\"line\">a6d503001157: Pushed</span><br></pre></td></tr></table></figure>\n<p>查看上传后的私库中的镜像<br><code>192.168.1.12</code><br>查看到的镜像名和前面讲的是一样的</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@localhost</span> ~]<span class=\"meta\"># curl 192.168.1.11:5000/v2/_catalog</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;repositories&quot;</span>:[<span class=\"string\">&quot;busybox&quot;</span>,<span class=\"string\">&quot;centos&quot;</span>,<span class=\"string\">&quot;httpd&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>\n<p>下载镜像，速度相当快</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>localhost ~]# docker pull <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/httpd</span><br><span class=\"line\"># 最后会输出下载地址</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/httpd:latest</span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.11</span>:<span class=\"number\">5000</span>/httpd:latest</span><br></pre></td></tr></table></figure>\n<p><code>192.168.1.11</code><br>查看镜像映射到本地的存储目录</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# ls <span class=\"regexp\">/opt/</span>data<span class=\"regexp\">/registry/</span>docker<span class=\"regexp\">/registry/</span>v2/<span class=\"keyword\">repositories</span></span><br><span class=\"line\">busybox  centos  httpd</span><br></pre></td></tr></table></figure>\n<h6 id=\"查看仓库中镜像的信息\"><a href=\"#查看仓库中镜像的信息\" class=\"headerlink\" title=\"查看仓库中镜像的信息\"></a>查看仓库中镜像的信息</h6><p>查看httpd镜像的tags</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# curl <span class=\"number\">192.168</span>.<span class=\"number\">1.11</span>:<span class=\"number\">5000</span><span class=\"regexp\">/v2/</span>httpd<span class=\"regexp\">/tags/</span>list</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;httpd&quot;</span>,<span class=\"string\">&quot;tags&quot;</span>:[<span class=\"string\">&quot;latest&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>\n<p>查看镜像的hash值</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl <span class=\"number\">192.168</span>.<span class=\"number\">1.11</span>:<span class=\"number\">5000</span><span class=\"regexp\">/v2/</span>httpd<span class=\"regexp\">/manifests/</span>latest \\</span><br><span class=\"line\">--header <span class=\"string\">&quot;Accept: application/vnd.docker.distribution.manifest.v2+json&quot;</span></span><br><span class=\"line\"># 找到第一个<span class=\"string\">&quot;digest&quot;</span>:的值就是该镜像的hash值，以下的<span class=\"string\">&quot;digest&quot;</span>:都是镜像层的hash值</span><br></pre></td></tr></table></figure>\n<p>删除私库镜像</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 直接进入目录删除其中一个镜像的目录即可</span><br><span class=\"line\">[root@localhost ~]# rm -rf <span class=\"regexp\">/opt/</span>data<span class=\"regexp\">/registry/</span>docker<span class=\"regexp\">/registry/</span>v2<span class=\"regexp\">/repositories/</span>httpd</span><br><span class=\"line\">[root@localhost ~]# curl <span class=\"number\">192.168</span>.<span class=\"number\">1.11</span>:<span class=\"number\">5000</span><span class=\"regexp\">/v2/</span>_catalog</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;repositories&quot;</span>:[<span class=\"string\">&quot;busybox&quot;</span>,<span class=\"string\">&quot;centos&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Docker部署nginx及web集群","author":"Semaik.","date":"2020-09-10T09:42:00.000Z","_content":"在容器部署基于centos镜像的nginx：\n\n首先将nginx软件包放入物理机（虚拟机）中\n\n进去容器后，什么都没有，环境相当干净，所以各种命令需要自己安装\n\n使用yum provides 查看命令的软件包，并且进行安装，即可使用\n```\nyum provides ip/ifconfig/scp\nyum -y install iproute   //ip\nyum -y install net-tools //ifconfig\nyum -y install openssh-clients  //scp\n```\n准备nginx环境\n```\nyum -y install gcc gcc-c++ pcre-devel zlib-devel openssl-devel make\n```\n查看容器的IP地址\n\n![upload successful](/images/pasted-20.png)\n\n退出容器：exit\n \n查看本地ip，docker网卡\n\n![upload successful](/images/pasted-21.png)\n\n方法一：在容器中，将物理机的软件包拷贝到容器中\n\n![upload successful](/images/pasted-22.png)\n\n方法二：在物理机中，3a9f...0c4为容器的id，也可以使用容器名（--name指定的名称）\n\n![upload successful](/images/pasted-23.png)\n\n \n###### 安装nginx\n```\ntar zxf nginx-1.12.0.tar.gz -C /usr/src\ncd /usr/src/nginx-1.12.0/\n./configure --prefix=/usr/local/nginx --user=nginx --group=ngixn --with-http_stub_status_module --with-pcre && make && make install\nuseradd nginx\nln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/nginx\n/nginx\n```\n \n修改页面文件\n```\necho \"172.17.0.2\" > /usr/local/nginx/html/index.html\n```\n \n启动nginx\n\n![upload successful](/images/pasted-24.png)\n \n测试\n\n![upload successful](/images/pasted-25.png)\n \n为了后面做web集群时方便使用，可以将上面安装好命令与nginx的容器做一个镜像，方便后期使用。\n\n将配置好的容器制作成一个镜像\n\ndocker commit 容器id  镜像名称\n\n![upload successful](/images/pasted-26.png)\n \n将做好的镜像导出到本地（用于做备份）\n\n![upload successful](/images/pasted-27.png)\n \n模拟误删除镜像\n\n![upload successful](/images/pasted-28.png)\n\n将已导出的镜像tar包，再导入进来（这时发现删除的镜像又回来了）\n\n![upload successful](/images/pasted-29.png)\n \nWEB集群\n使用zu镜像做一个web2容器\n\n![upload successful](/images/pasted-30.png)\n\n![upload successful](/images/pasted-31.png)\n\n修改页面文件\n\n![upload successful](/images/pasted-32.png)\n\n启动nginx，并退出容器\n\n![upload successful](/images/pasted-33.png)\n\n使用zu镜像做一个web3容器\n\n![upload successful](/images/pasted-34.png)\n\n修改页面文件\n\n![upload successful](/images/pasted-35.png)\n\n启动nginx\n\n![upload successful](/images/pasted-36.png)\n\n![upload successful](/images/pasted-37.png)\n\n \n###### 本地部署nginx\n安装环境\n```\nyum -y install  pcre-devel zlib-devel openssl-devel\n```\n安装nginx\n```\ntar zxf nginx-1.12.0.tar.gz -C /usr/src/\ncd /usr/src/nginx-1.12.0/\n./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_stub_status_module --with-pcre && make && make install\nuseradd nginx\nln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/nginx\n```\n修改配置文件\nvim /usr/local/nginx/conf/nginx.conf\n\n![upload successful](/images/pasted-38.png)\n启动nginx\n\n![upload successful](/images/pasted-39.png)\n测试\n \n![upload successful](/images/pasted-40.png)\n\n","source":"_posts/Docker部署nginx及web集群.md","raw":"title: Docker部署nginx及web集群\nauthor: Semaik.\ntags:\n  - Docker\ncategories:\n  - Docker\ndate: 2020-09-10 17:42:00\n---\n在容器部署基于centos镜像的nginx：\n\n首先将nginx软件包放入物理机（虚拟机）中\n\n进去容器后，什么都没有，环境相当干净，所以各种命令需要自己安装\n\n使用yum provides 查看命令的软件包，并且进行安装，即可使用\n```\nyum provides ip/ifconfig/scp\nyum -y install iproute   //ip\nyum -y install net-tools //ifconfig\nyum -y install openssh-clients  //scp\n```\n准备nginx环境\n```\nyum -y install gcc gcc-c++ pcre-devel zlib-devel openssl-devel make\n```\n查看容器的IP地址\n\n![upload successful](/images/pasted-20.png)\n\n退出容器：exit\n \n查看本地ip，docker网卡\n\n![upload successful](/images/pasted-21.png)\n\n方法一：在容器中，将物理机的软件包拷贝到容器中\n\n![upload successful](/images/pasted-22.png)\n\n方法二：在物理机中，3a9f...0c4为容器的id，也可以使用容器名（--name指定的名称）\n\n![upload successful](/images/pasted-23.png)\n\n \n###### 安装nginx\n```\ntar zxf nginx-1.12.0.tar.gz -C /usr/src\ncd /usr/src/nginx-1.12.0/\n./configure --prefix=/usr/local/nginx --user=nginx --group=ngixn --with-http_stub_status_module --with-pcre && make && make install\nuseradd nginx\nln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/nginx\n/nginx\n```\n \n修改页面文件\n```\necho \"172.17.0.2\" > /usr/local/nginx/html/index.html\n```\n \n启动nginx\n\n![upload successful](/images/pasted-24.png)\n \n测试\n\n![upload successful](/images/pasted-25.png)\n \n为了后面做web集群时方便使用，可以将上面安装好命令与nginx的容器做一个镜像，方便后期使用。\n\n将配置好的容器制作成一个镜像\n\ndocker commit 容器id  镜像名称\n\n![upload successful](/images/pasted-26.png)\n \n将做好的镜像导出到本地（用于做备份）\n\n![upload successful](/images/pasted-27.png)\n \n模拟误删除镜像\n\n![upload successful](/images/pasted-28.png)\n\n将已导出的镜像tar包，再导入进来（这时发现删除的镜像又回来了）\n\n![upload successful](/images/pasted-29.png)\n \nWEB集群\n使用zu镜像做一个web2容器\n\n![upload successful](/images/pasted-30.png)\n\n![upload successful](/images/pasted-31.png)\n\n修改页面文件\n\n![upload successful](/images/pasted-32.png)\n\n启动nginx，并退出容器\n\n![upload successful](/images/pasted-33.png)\n\n使用zu镜像做一个web3容器\n\n![upload successful](/images/pasted-34.png)\n\n修改页面文件\n\n![upload successful](/images/pasted-35.png)\n\n启动nginx\n\n![upload successful](/images/pasted-36.png)\n\n![upload successful](/images/pasted-37.png)\n\n \n###### 本地部署nginx\n安装环境\n```\nyum -y install  pcre-devel zlib-devel openssl-devel\n```\n安装nginx\n```\ntar zxf nginx-1.12.0.tar.gz -C /usr/src/\ncd /usr/src/nginx-1.12.0/\n./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_stub_status_module --with-pcre && make && make install\nuseradd nginx\nln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/nginx\n```\n修改配置文件\nvim /usr/local/nginx/conf/nginx.conf\n\n![upload successful](/images/pasted-38.png)\n启动nginx\n\n![upload successful](/images/pasted-39.png)\n测试\n \n![upload successful](/images/pasted-40.png)\n\n","slug":"Docker部署nginx及web集群","published":1,"updated":"2020-09-10T09:47:12.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0w0t1w0008fipvh6hn8qnq","content":"<p>在容器部署基于centos镜像的nginx：</p>\n<p>首先将nginx软件包放入物理机（虚拟机）中</p>\n<p>进去容器后，什么都没有，环境相当干净，所以各种命令需要自己安装</p>\n<p>使用yum provides 查看命令的软件包，并且进行安装，即可使用</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum provides ip<span class=\"regexp\">/ifconfig/</span>scp</span><br><span class=\"line\">yum -y install iproute   <span class=\"regexp\">//i</span>p</span><br><span class=\"line\">yum -y install net-tools <span class=\"regexp\">//i</span>fconfig</span><br><span class=\"line\">yum -y install openssh-clients  <span class=\"regexp\">//</span>scp</span><br></pre></td></tr></table></figure>\n<p>准备nginx环境</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">yum</span> <span class=\"literal\">-</span><span class=\"comment\">y</span> <span class=\"comment\">install</span> <span class=\"comment\">gcc</span> <span class=\"comment\">gcc</span><span class=\"literal\">-</span><span class=\"comment\">c</span>++ <span class=\"comment\">pcre</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">zlib</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">openssl</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">make</span></span><br></pre></td></tr></table></figure>\n<p>查看容器的IP地址</p>\n<p><img src=\"/images/pasted-20.png\" alt=\"upload successful\"></p>\n<p>退出容器：exit</p>\n<p>查看本地ip，docker网卡</p>\n<p><img src=\"/images/pasted-21.png\" alt=\"upload successful\"></p>\n<p>方法一：在容器中，将物理机的软件包拷贝到容器中</p>\n<p><img src=\"/images/pasted-22.png\" alt=\"upload successful\"></p>\n<p>方法二：在物理机中，3a9f…0c4为容器的id，也可以使用容器名（–name指定的名称）</p>\n<p><img src=\"/images/pasted-23.png\" alt=\"upload successful\"></p>\n<h6 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h6><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf nginx-<span class=\"number\">1.12</span>.<span class=\"number\">0</span>.tar.gz -C <span class=\"regexp\">/usr/</span>src</span><br><span class=\"line\">cd <span class=\"regexp\">/usr/</span>src<span class=\"regexp\">/nginx-1.12.0/</span></span><br><span class=\"line\">.<span class=\"regexp\">/configure --prefix=/u</span>sr<span class=\"regexp\">/local/</span>nginx --user=nginx --<span class=\"keyword\">group</span>=ngixn --with-http_stub_status_module --with-pcre &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">useradd nginx</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx /u</span>sr<span class=\"regexp\">/local/</span>sbin/nginx</span><br><span class=\"line\">/nginx</span><br></pre></td></tr></table></figure>\n\n<p>修改页面文件</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">&quot;172.17.0.2&quot;</span> &gt; <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>html/index.html</span><br></pre></td></tr></table></figure>\n\n<p>启动nginx</p>\n<p><img src=\"/images/pasted-24.png\" alt=\"upload successful\"></p>\n<p>测试</p>\n<p><img src=\"/images/pasted-25.png\" alt=\"upload successful\"></p>\n<p>为了后面做web集群时方便使用，可以将上面安装好命令与nginx的容器做一个镜像，方便后期使用。</p>\n<p>将配置好的容器制作成一个镜像</p>\n<p>docker commit 容器id  镜像名称</p>\n<p><img src=\"/images/pasted-26.png\" alt=\"upload successful\"></p>\n<p>将做好的镜像导出到本地（用于做备份）</p>\n<p><img src=\"/images/pasted-27.png\" alt=\"upload successful\"></p>\n<p>模拟误删除镜像</p>\n<p><img src=\"/images/pasted-28.png\" alt=\"upload successful\"></p>\n<p>将已导出的镜像tar包，再导入进来（这时发现删除的镜像又回来了）</p>\n<p><img src=\"/images/pasted-29.png\" alt=\"upload successful\"></p>\n<p>WEB集群<br>使用zu镜像做一个web2容器</p>\n<p><img src=\"/images/pasted-30.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-31.png\" alt=\"upload successful\"></p>\n<p>修改页面文件</p>\n<p><img src=\"/images/pasted-32.png\" alt=\"upload successful\"></p>\n<p>启动nginx，并退出容器</p>\n<p><img src=\"/images/pasted-33.png\" alt=\"upload successful\"></p>\n<p>使用zu镜像做一个web3容器</p>\n<p><img src=\"/images/pasted-34.png\" alt=\"upload successful\"></p>\n<p>修改页面文件</p>\n<p><img src=\"/images/pasted-35.png\" alt=\"upload successful\"></p>\n<p>启动nginx</p>\n<p><img src=\"/images/pasted-36.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-37.png\" alt=\"upload successful\"></p>\n<h6 id=\"本地部署nginx\"><a href=\"#本地部署nginx\" class=\"headerlink\" title=\"本地部署nginx\"></a>本地部署nginx</h6><p>安装环境</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y <span class=\"keyword\">install</span>  pcre-devel zlib-devel openssl-devel</span><br></pre></td></tr></table></figure>\n<p>安装nginx</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf nginx-<span class=\"number\">1.12</span>.<span class=\"number\">0</span>.tar.gz -C <span class=\"regexp\">/usr/</span>src/</span><br><span class=\"line\">cd <span class=\"regexp\">/usr/</span>src<span class=\"regexp\">/nginx-1.12.0/</span></span><br><span class=\"line\">.<span class=\"regexp\">/configure --prefix=/u</span>sr<span class=\"regexp\">/local/</span>nginx --user=nginx --<span class=\"keyword\">group</span>=nginx --with-http_stub_status_module --with-pcre &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">useradd nginx</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx /u</span>sr<span class=\"regexp\">/local/</span>sbin/nginx</span><br></pre></td></tr></table></figure>\n<p>修改配置文件<br>vim /usr/local/nginx/conf/nginx.conf</p>\n<p><img src=\"/images/pasted-38.png\" alt=\"upload successful\"><br>启动nginx</p>\n<p><img src=\"/images/pasted-39.png\" alt=\"upload successful\"><br>测试</p>\n<p><img src=\"/images/pasted-40.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在容器部署基于centos镜像的nginx：</p>\n<p>首先将nginx软件包放入物理机（虚拟机）中</p>\n<p>进去容器后，什么都没有，环境相当干净，所以各种命令需要自己安装</p>\n<p>使用yum provides 查看命令的软件包，并且进行安装，即可使用</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum provides ip<span class=\"regexp\">/ifconfig/</span>scp</span><br><span class=\"line\">yum -y install iproute   <span class=\"regexp\">//i</span>p</span><br><span class=\"line\">yum -y install net-tools <span class=\"regexp\">//i</span>fconfig</span><br><span class=\"line\">yum -y install openssh-clients  <span class=\"regexp\">//</span>scp</span><br></pre></td></tr></table></figure>\n<p>准备nginx环境</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">yum</span> <span class=\"literal\">-</span><span class=\"comment\">y</span> <span class=\"comment\">install</span> <span class=\"comment\">gcc</span> <span class=\"comment\">gcc</span><span class=\"literal\">-</span><span class=\"comment\">c</span>++ <span class=\"comment\">pcre</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">zlib</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">openssl</span><span class=\"literal\">-</span><span class=\"comment\">devel</span> <span class=\"comment\">make</span></span><br></pre></td></tr></table></figure>\n<p>查看容器的IP地址</p>\n<p><img src=\"/images/pasted-20.png\" alt=\"upload successful\"></p>\n<p>退出容器：exit</p>\n<p>查看本地ip，docker网卡</p>\n<p><img src=\"/images/pasted-21.png\" alt=\"upload successful\"></p>\n<p>方法一：在容器中，将物理机的软件包拷贝到容器中</p>\n<p><img src=\"/images/pasted-22.png\" alt=\"upload successful\"></p>\n<p>方法二：在物理机中，3a9f…0c4为容器的id，也可以使用容器名（–name指定的名称）</p>\n<p><img src=\"/images/pasted-23.png\" alt=\"upload successful\"></p>\n<h6 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h6><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf nginx-<span class=\"number\">1.12</span>.<span class=\"number\">0</span>.tar.gz -C <span class=\"regexp\">/usr/</span>src</span><br><span class=\"line\">cd <span class=\"regexp\">/usr/</span>src<span class=\"regexp\">/nginx-1.12.0/</span></span><br><span class=\"line\">.<span class=\"regexp\">/configure --prefix=/u</span>sr<span class=\"regexp\">/local/</span>nginx --user=nginx --<span class=\"keyword\">group</span>=ngixn --with-http_stub_status_module --with-pcre &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">useradd nginx</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx /u</span>sr<span class=\"regexp\">/local/</span>sbin/nginx</span><br><span class=\"line\">/nginx</span><br></pre></td></tr></table></figure>\n\n<p>修改页面文件</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">&quot;172.17.0.2&quot;</span> &gt; <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>html/index.html</span><br></pre></td></tr></table></figure>\n\n<p>启动nginx</p>\n<p><img src=\"/images/pasted-24.png\" alt=\"upload successful\"></p>\n<p>测试</p>\n<p><img src=\"/images/pasted-25.png\" alt=\"upload successful\"></p>\n<p>为了后面做web集群时方便使用，可以将上面安装好命令与nginx的容器做一个镜像，方便后期使用。</p>\n<p>将配置好的容器制作成一个镜像</p>\n<p>docker commit 容器id  镜像名称</p>\n<p><img src=\"/images/pasted-26.png\" alt=\"upload successful\"></p>\n<p>将做好的镜像导出到本地（用于做备份）</p>\n<p><img src=\"/images/pasted-27.png\" alt=\"upload successful\"></p>\n<p>模拟误删除镜像</p>\n<p><img src=\"/images/pasted-28.png\" alt=\"upload successful\"></p>\n<p>将已导出的镜像tar包，再导入进来（这时发现删除的镜像又回来了）</p>\n<p><img src=\"/images/pasted-29.png\" alt=\"upload successful\"></p>\n<p>WEB集群<br>使用zu镜像做一个web2容器</p>\n<p><img src=\"/images/pasted-30.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-31.png\" alt=\"upload successful\"></p>\n<p>修改页面文件</p>\n<p><img src=\"/images/pasted-32.png\" alt=\"upload successful\"></p>\n<p>启动nginx，并退出容器</p>\n<p><img src=\"/images/pasted-33.png\" alt=\"upload successful\"></p>\n<p>使用zu镜像做一个web3容器</p>\n<p><img src=\"/images/pasted-34.png\" alt=\"upload successful\"></p>\n<p>修改页面文件</p>\n<p><img src=\"/images/pasted-35.png\" alt=\"upload successful\"></p>\n<p>启动nginx</p>\n<p><img src=\"/images/pasted-36.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-37.png\" alt=\"upload successful\"></p>\n<h6 id=\"本地部署nginx\"><a href=\"#本地部署nginx\" class=\"headerlink\" title=\"本地部署nginx\"></a>本地部署nginx</h6><p>安装环境</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y <span class=\"keyword\">install</span>  pcre-devel zlib-devel openssl-devel</span><br></pre></td></tr></table></figure>\n<p>安装nginx</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf nginx-<span class=\"number\">1.12</span>.<span class=\"number\">0</span>.tar.gz -C <span class=\"regexp\">/usr/</span>src/</span><br><span class=\"line\">cd <span class=\"regexp\">/usr/</span>src<span class=\"regexp\">/nginx-1.12.0/</span></span><br><span class=\"line\">.<span class=\"regexp\">/configure --prefix=/u</span>sr<span class=\"regexp\">/local/</span>nginx --user=nginx --<span class=\"keyword\">group</span>=nginx --with-http_stub_status_module --with-pcre &amp;&amp; make &amp;&amp; make install</span><br><span class=\"line\">useradd nginx</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx /u</span>sr<span class=\"regexp\">/local/</span>sbin/nginx</span><br></pre></td></tr></table></figure>\n<p>修改配置文件<br>vim /usr/local/nginx/conf/nginx.conf</p>\n<p><img src=\"/images/pasted-38.png\" alt=\"upload successful\"><br>启动nginx</p>\n<p><img src=\"/images/pasted-39.png\" alt=\"upload successful\"><br>测试</p>\n<p><img src=\"/images/pasted-40.png\" alt=\"upload successful\"></p>\n"},{"title":"Hexo如何发布文章","date":"2020-09-10T04:57:45.000Z","_content":"#### 输入以下命令：\n```java\n$ hexo new [layout] <title>\n```\n","source":"_posts/Hexo如何发布文章.md","raw":"---\ntitle: Hexo如何发布文章\ndate: 2020-09-10 12:57:45\ncategories: Hexo\ntags: \n    - Hexo\n---\n#### 输入以下命令：\n```java\n$ hexo new [layout] <title>\n```\n","slug":"Hexo如何发布文章","published":1,"updated":"2020-09-10T05:12:18.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0w0t1x0009fipv63bx9r5j","content":"<h4 id=\"输入以下命令：\"><a href=\"#输入以下命令：\" class=\"headerlink\" title=\"输入以下命令：\"></a>输入以下命令：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"输入以下命令：\"><a href=\"#输入以下命令：\" class=\"headerlink\" title=\"输入以下命令：\"></a>输入以下命令：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"Hexo添加分类和标签","date":"2020-09-10T05:21:18.000Z","_content":"#### 1.创建\"分类\"选项\n生成“分类”页并添加tpye属性,进入博客目录。执行命令下方命令\n```java\n$ hexo new page categories\n```\ncategories文件夹下会有index.md这个文件，打开后默认内容是这样的：\n```java\n\n---\ntitle: categories\ndate: 2019-04-22 14:47:40\n---\n```\n添加type: \"categories\"到内容中，添加后是这样的：\n```java\n\n---\ntitle: 分类\ndate: 2019-04-24 15:30:30\ntype: categories\n---\n```\n保存并关闭文件。\n\n给文章添加“categories”属性\n\n打开需要添加分类的文章，为其添加categories属性。下方的categories:Hexo表示这篇文章添加到到“Hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。\n```java\n---\ntitle: Hexo 添加分类及标签\ndate: 2017-05-26 12:12:57\ncategories: Hexo\n---\n```\n至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。\n#### 2.创建\"标签\"选项\n生成“标签”页并添加tpye属性\n```java\n$ hexo new page tags\n```\n在tags文件夹下，找到index.md这个文件，打开后默认内容是这样的：\n```java\n---\ntitle: 标签\ndate: 2019-04-22 14:22:08\n---\n```\n添加type: \"tags\"到内容中，添加后是这样的：\n```java\n---\ntitle: 标签\ndate: 2019-04-24 15:40:24\ntype: tags\n---\n```\n保存并关闭文件。\n\n给文章添加“tags”属性,打开需要添加标签的文章，为其添加tags属性。\n```java\n---\ntitle: Hexo 添加分类及标签\ndate: 2019-04-24 15:40:24\ncategories: \n           - Hexo\ntags:\n           - 博客\n---\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Hexo添加分类和标签.md","raw":"---\ntitle: Hexo添加分类和标签\ndate: 2020-09-10 13:21:18\ntags:\n    - Hexo\ncategories: Hexo\n---\n#### 1.创建\"分类\"选项\n生成“分类”页并添加tpye属性,进入博客目录。执行命令下方命令\n```java\n$ hexo new page categories\n```\ncategories文件夹下会有index.md这个文件，打开后默认内容是这样的：\n```java\n\n---\ntitle: categories\ndate: 2019-04-22 14:47:40\n---\n```\n添加type: \"categories\"到内容中，添加后是这样的：\n```java\n\n---\ntitle: 分类\ndate: 2019-04-24 15:30:30\ntype: categories\n---\n```\n保存并关闭文件。\n\n给文章添加“categories”属性\n\n打开需要添加分类的文章，为其添加categories属性。下方的categories:Hexo表示这篇文章添加到到“Hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。\n```java\n---\ntitle: Hexo 添加分类及标签\ndate: 2017-05-26 12:12:57\ncategories: Hexo\n---\n```\n至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。\n#### 2.创建\"标签\"选项\n生成“标签”页并添加tpye属性\n```java\n$ hexo new page tags\n```\n在tags文件夹下，找到index.md这个文件，打开后默认内容是这样的：\n```java\n---\ntitle: 标签\ndate: 2019-04-22 14:22:08\n---\n```\n添加type: \"tags\"到内容中，添加后是这样的：\n```java\n---\ntitle: 标签\ndate: 2019-04-24 15:40:24\ntype: tags\n---\n```\n保存并关闭文件。\n\n给文章添加“tags”属性,打开需要添加标签的文章，为其添加tags属性。\n```java\n---\ntitle: Hexo 添加分类及标签\ndate: 2019-04-24 15:40:24\ncategories: \n           - Hexo\ntags:\n           - 博客\n---\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Hexo添加分类和标签","published":1,"updated":"2020-09-10T05:26:57.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0w0t1z000dfipvhnzgcefi","content":"<h4 id=\"1-创建”分类”选项\"><a href=\"#1-创建”分类”选项\" class=\"headerlink\" title=\"1.创建”分类”选项\"></a>1.创建”分类”选项</h4><p>生成“分类”页并添加tpye属性,进入博客目录。执行命令下方命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> page categories</span><br></pre></td></tr></table></figure>\n<p>categories文件夹下会有index.md这个文件，打开后默认内容是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">date: <span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">22</span> <span class=\"number\">14</span>:<span class=\"number\">47</span>:<span class=\"number\">40</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>添加type: “categories”到内容中，添加后是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">title: 分类</span><br><span class=\"line\">date: <span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">30</span>:<span class=\"number\">30</span></span><br><span class=\"line\">type: categories</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>保存并关闭文件。</p>\n<p>给文章添加“categories”属性</p>\n<p>打开需要添加分类的文章，为其添加categories属性。下方的categories:Hexo表示这篇文章添加到到“Hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo 添加分类及标签</span><br><span class=\"line\">date: <span class=\"number\">2017</span>-<span class=\"number\">05</span>-<span class=\"number\">26</span> <span class=\"number\">12</span>:<span class=\"number\">12</span>:<span class=\"number\">57</span></span><br><span class=\"line\">categories: Hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p>\n<h4 id=\"2-创建”标签”选项\"><a href=\"#2-创建”标签”选项\" class=\"headerlink\" title=\"2.创建”标签”选项\"></a>2.创建”标签”选项</h4><p>生成“标签”页并添加tpye属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> page tags</span><br></pre></td></tr></table></figure>\n<p>在tags文件夹下，找到index.md这个文件，打开后默认内容是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: <span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">22</span> <span class=\"number\">14</span>:<span class=\"number\">22</span>:<span class=\"number\">08</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>添加type: “tags”到内容中，添加后是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: <span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">40</span>:<span class=\"number\">24</span></span><br><span class=\"line\">type: tags</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>保存并关闭文件。</p>\n<p>给文章添加“tags”属性,打开需要添加标签的文章，为其添加tags属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo 添加分类及标签</span><br><span class=\"line\">date: <span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">40</span>:<span class=\"number\">24</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\">           - Hexo</span><br><span class=\"line\">tags:</span><br><span class=\"line\">           - 博客</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-创建”分类”选项\"><a href=\"#1-创建”分类”选项\" class=\"headerlink\" title=\"1.创建”分类”选项\"></a>1.创建”分类”选项</h4><p>生成“分类”页并添加tpye属性,进入博客目录。执行命令下方命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> page categories</span><br></pre></td></tr></table></figure>\n<p>categories文件夹下会有index.md这个文件，打开后默认内容是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">date: <span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">22</span> <span class=\"number\">14</span>:<span class=\"number\">47</span>:<span class=\"number\">40</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>添加type: “categories”到内容中，添加后是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">title: 分类</span><br><span class=\"line\">date: <span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">30</span>:<span class=\"number\">30</span></span><br><span class=\"line\">type: categories</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>保存并关闭文件。</p>\n<p>给文章添加“categories”属性</p>\n<p>打开需要添加分类的文章，为其添加categories属性。下方的categories:Hexo表示这篇文章添加到到“Hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo 添加分类及标签</span><br><span class=\"line\">date: <span class=\"number\">2017</span>-<span class=\"number\">05</span>-<span class=\"number\">26</span> <span class=\"number\">12</span>:<span class=\"number\">12</span>:<span class=\"number\">57</span></span><br><span class=\"line\">categories: Hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p>\n<h4 id=\"2-创建”标签”选项\"><a href=\"#2-创建”标签”选项\" class=\"headerlink\" title=\"2.创建”标签”选项\"></a>2.创建”标签”选项</h4><p>生成“标签”页并添加tpye属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> page tags</span><br></pre></td></tr></table></figure>\n<p>在tags文件夹下，找到index.md这个文件，打开后默认内容是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: <span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">22</span> <span class=\"number\">14</span>:<span class=\"number\">22</span>:<span class=\"number\">08</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>添加type: “tags”到内容中，添加后是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: <span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">40</span>:<span class=\"number\">24</span></span><br><span class=\"line\">type: tags</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>保存并关闭文件。</p>\n<p>给文章添加“tags”属性,打开需要添加标签的文章，为其添加tags属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo 添加分类及标签</span><br><span class=\"line\">date: <span class=\"number\">2019</span>-<span class=\"number\">04</span>-<span class=\"number\">24</span> <span class=\"number\">15</span>:<span class=\"number\">40</span>:<span class=\"number\">24</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\">           - Hexo</span><br><span class=\"line\">tags:</span><br><span class=\"line\">           - 博客</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"Linux高效文件处理三剑客","date":"2020-09-10T06:39:48.000Z","_content":"> grep、sed、awk我们叫他们三剑客，掌握它们可以更好的运维，提升工作效率，即使不是运维，对我们处理数据都是非常方便的～就很多数据处理来讲，写程序肯定是也能处理的，但是远没有已经存在特定功能的命令更高效，我们只需要操作命令即可。通过本文可以讲解三剑客的一些基础知识和实用;\n\n### Grep\n简介\ngrep是一款强大的文本搜索工具，支持正则表达式。\n全称（ global search regular expression(RE) and print out the line）\n语法:grep [option]... PATTERN [FILE]...\n常用:\n```java\nusage: grep [-abcDEFGHhIiJLlmnOoqRSsUVvwxZ] [-A num] [-B num] [-C[num]]\n [-e pattern] [-f file] [--binary-files=value] [--color=when]\n [--context[=num]] [--directories=action] [--label] [--line-buffered]\n [--null] [pattern] [file ...]\n```\n常用参数：\n```java\n            -v        取反\n            -i        忽略大小写\n            -c        符合条件的行数\n            -n        输出的同时打印行号\n            ^*        以*开头         \n            *$         以*结尾 \n            ^$         空行 \n```\n实际使用\n准备好一个小故事txt：\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# cat monkey\nOne day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.\nHe looks in the well and shouts :它往井里一瞧,高喊道：\n“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”\nAn older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,\n“Goodness me!The moon is really in the water!” “糟啦!月亮掉在井里头啦!”\nAnd olderly monkey comes over.老猴子也跑过来.\nHe is very surprised as well and cries out:他也非常惊奇,喊道：\n“The moon is in the well.” “糟了,月亮掉在井里头了!”\nA group of monkeys run over to the well .一群猴子跑到井边来,\nThey look at the moon in the well and shout:他们看到井里的月亮,喊道：\n“The moon did fall into the well!Come on!Let’get it out!”\n“月亮掉在井里头啦!快来!让我们把它捞起来!”\nThen,the oldest monkey hangs on the tree up side down ,with his feet on the branch .\n然后,老猴子倒挂在大树上,\nAnd he pulls the next monkey’s feet with his hands.拉住大猴子的脚,\nAll the other monkeys follow his suit,其他的猴子一个个跟着,\nAnd they join each other one by one down to the moon in the well.\n它们一只连着一只直到井里.\nJust before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢\nHe yells excitedly “Don’t be so foolish!The moon is still in the sky!”\n它兴奋地大叫：“别蠢了!月亮还好好地挂在天上呢!\n```\n#### 直接查找符合条件的行\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep moon monkey\n“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”\n“Goodness me!The moon is really in the water!” “糟啦!月亮掉在井里头啦!”\n“The moon is in the well.” “糟了,月亮掉在井里头了!”\nThey look at the moon in the well and shout:他们看到井里的月亮,喊道：\n“The moon did fall into the well!Come on!Let’get it out!”\nAnd they join each other one by one down to the moon in the well.\nJust before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢\nHe yells excitedly “Don’t be so foolish!The moon is still in the sky!”\n```\n#### 查找反向符合条件的行\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep -v  moon monkey\nOne day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.\nHe looks in the well and shouts :它往井里一瞧,高喊道：\nAn older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,\nAnd olderly monkey comes over.老猴子也跑过来.\nHe is very surprised as well and cries out:他也非常惊奇,喊道：\nA group of monkeys run over to the well .一群猴子跑到井边来,\n“月亮掉在井里头啦!快来!让我们把它捞起来!”\nThen,the oldest monkey hangs on the tree up side down ,with his feet on the branch .\n然后,老猴子倒挂在大树上,\nAnd he pulls the next monkey’s feet with his hands.拉住大猴子的脚,\nAll the other monkeys follow his suit,其他的猴子一个个跟着,\n它们一只连着一只直到井里.\n它兴奋地大叫：“别蠢了!月亮还好好地挂在天上呢!”\n```\n#### 直接查找符合条件的行数\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep -c  moon monkey\n8\n```\n#### 忽略大小写查找符合条件的行数\n先来看一下直接查找的结果\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep my monkey\n```\n#### 忽略大小写查看\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep -i my monkey\n“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”\n```\n#### 查找符合条件的行并输出行号\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep -n monkey monkey\n1:One day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.\n4:An older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,\n6:And olderly monkey comes over.老猴子也跑过来.\n9:A group of monkeys run over to the well .一群猴子跑到井边来,\n13:Then,the oldest monkey hangs on the tree up side down ,with his feet on the branch .\n15:And he pulls the next monkey’s feet with his hands.拉住大猴子的脚,\n16:All the other monkeys follow his suit,其他的猴子一个个跟着,\n19:Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢\n```\n#### 查找开头是J的行\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep '^J' monkey\nJust before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢\n```\n#### 查找结尾是呢的行\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep \"呢$\" monkey\nJust before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢\n```\n\n### Sed\n> sed是一种流编辑器，是一款处理文本比较优秀的工具，可以结合正则表达式一起使用。\n#### sed命令\n命令: sed\n语法 : sed [选项]... {命令集} [输入文件]...\n```java\n常用参数:\n            d  删除选择的行    \n            s   查找    \n            y  替换\n            i   当前行前面插入一行\n            a  当前行后面插入一行\n            p  打印行       \n            q  退出     \n\n 替换符:\n\n            数字 ：替换第几处    \n            g :  全局替换    \n            \\1:  子串匹配标记，前面搜索可以用元字符集\\(..\\)\n            &:  保留搜索刀的字符用来替换其他字符\n#### 操作\n##### 替换操作\n查看文件：\n```java\n# cat word\nTwinkle, twinkle, little star\nHow I wonder what you are\nUp above the world so high\nLike a diamond in the sky\nWhen the blazing sun is gone\n```\n替换：\n```java\n# sed 's/little/big/' word\nTwinkle, twinkle, big star\nHow I wonder what you are\nUp above the world so high\nLike a diamond in the sky\nWhen the blazing sun is gone\n```\n查看文本：\n```java\n# word1\nOh if there's one thing to be taught\nit's dreams are made to be caught\nand friends can never be bought\nDoesn't matter how long it's been\nI know you'll always jump in\n'Cause we don't know how to quit\n```\n全局替换：\n```java\n# sed 's/to/can/g' word1\nOh if there's one thing can be taught\nit's dreams are made can be caught\nand friends can nev\n```\n按行替换（替换2到最后一行)\n```java\n# sed '2,$s/to/can/' word1\nOh if there's one thing to be taught\nit's dreams are made can be caught\nand friends can never be bought\nDoesn't matter how long it's been\nI know you'll always jump in\n'Cause we don't know how can quit\n```java\n##### 删除操作:\n查看文本:\n```java\n# cat word\nTwinkle, twinkle, little star\nHow I wonder what you are\nUp above the world so high\nLike a diamond in the sky\nWhen the blazing sun is gone\n```\n删除:\n```java\n# sed '2d' word\nTwinkle, twinkle, little star\nUp above the world so high\nLike a diamond in the sky\nWhen the blazing sun is gone\n```\n显示行号:\n```java\n# sed '=;2d' word\n1\nTwinkle, twinkle, little star\n2\n3\nUp above the world so high\n4\nLike a diamond in the sky\n5\nWhen the blazing sun is gone\n```\n删除第2行到第四行:\n```java\n# sed '=;2,4d' word\n1\nTwinkle, twinkle, little star\n2\n3\n4\n5\nWhen the blazing sun is gone\n```\n##### 添加行操作:\n向前插入:\n```java\n# echo \"hello\" | sed 'i\\kitty'\nkitty\nhello\n```\n向后插入:\n```java\n# echo \"kitty\" | sed 'i\\hello'\nhello\nkitty\n```\n##### 修改行操作:\n替换第二行为hello kitty\n```java\n# sed '2c\\hello kitty' word\nTwinkle, twinkle, little star\nhello kitty\nUp above the world so high\nLike a diamond in the sky\nWhen the blazing sun is gone\n```\n替换第二行到最后一行为hello kitty\n```java\n# sed '2,$c\\hello kitty' word\nTwinkle, twinkle, little star\nhello kitty\n```\n##### 写入行操作\n把带star的行写入c文件中,c提前创建\n```java\n# sed -n '/star/w c' word\n# cat c\nTwinkle, twinkle, little star\n```\n##### 退出\n打印3行后，退出sed\n```java\n# sed '3q' word\nTwinkle, twinkle, little star\nHow I wonder what you are\nUp above the world so higher be bought\nDoesn't matter how long it's been\nI know you'll always jump in\n'Cause we don't know how can quit\n```\n\n### Awk\n> awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。\n\n命令格式：\nawk [option] 'scrip' var=value\n\n参数：\noption：\n-F 指定输入的分割字符，默认为 空格\n-v var=value 赋值一个用户自定义变量\n-f scripfile 从脚本中读取 awk 命令\n#### AWK 模式和操作awk 脚本是由模式和操作组成的。\n\n##### 模式\n模式可以是以下任意一个：\n```java\n/正则表达式/： 使用通配符的扩展集\n关系表达式：    使用运算符进行操作，可以是字符串或者数字比较测试\n模式匹配表达式：用运算符~9匹配和~！（不匹配）\nBEGIN 语句块，pattern语句块、END语句块\n```\n##### 操作\n操作有一个或者多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内、主要部分有：\n```java\n变量或属组赋值\n输出命令\n内置函数\n控制流程语句\n```\n##### 实例\n例： 只是显示最近登录的5个帐号\n```java\n[root@localhost ~]# last -n 5 \nroot     pts/0        192.168.116.1    Fri Jun 12 10:59   still logged in   \nreboot   system boot  3.10.0-862.el7.x Fri Jun 12 10:58 - 11:36  (00:38)    \nreboot   system boot  3.10.0-862.el7.x Fri Jun  5 21:07 - 11:36 (6+14:28)   \nroot     pts/0        192.168.116.1    Fri Jun  5 18:40 - crash  (02:27)    \nreboot   system boot  3.10.0-862.el7.x Fri Jun  5 17:28 - 11:36 (6+18:08)   \n\nwtmp begins Thu Oct 10 22:36:04 2019\n[root@localhost ~]# last -n 5 | awk '{print $1}'\nroot\nreboot\nreboot\nroot\nreboot\n```\n例： 只显示/etc/passwd的账户\n```java\n[root@localhost ~]# cat /etc/passwd | awk -F ':' '{print $1}'\nroot\nbin\ndaemon\nadm\nlp\nsync\nshutdown\nhalt\nmail\noperator\ngames\nftp\nnobody\nsystemd-network\ndbus\npolkitd\ntss\nsshd\npostfix\nchrony\nmysql\n```\n例：只显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割\n```java\n[root@localhost ~]# cat /etc/passwd | awk -F ':' '{print $1\"\\t\"$7}' \ndbus    /sbin/nologin\npolkitd    /sbin/nologin\ntss    /sbin/nologin\nsshd    /sbin/nologin\npostfix    /sbin/nologin\nchrony    /sbin/nologin\nmysql    /bin/bash\n```\n例：只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加”blue,/bin/nosh”\n```java\n[root@localhost ~]# cat /etc/passwd | awk -F ':' 'BEGIN {print \"name,shell\"} {print $1\"\\t\"$7} END {print \"Hello,/bin/nosh\"}'\ndbus    /sbin/nologin\npolkitd    /sbin/nologin\ntss    /sbin/nologin\nsshd    /sbin/nologin\npostfix    /sbin/nologin\nchrony    /sbin/nologin\nmysql    /bin/bash\nHello,/bin/nosh\n```\n> awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。\n\n```java\n第一步： 执行 BEGIN {commond} 指令\n第二步： 从文件或标准输入{stdin}读取一行然后执行 pattern { commmod } \n第三步； 从读至输入流末尾，执行 END {commod}语句\n```\n> BEGIN 在awk 开始输入读取之前被执行，属于一个可选的模块，一般用于变量初始化、打印输出表头\n> \n> pattern 通用命令，是最重要的一块，属于可选的，一般用于打印出指定的列，如果没有指定 petter 模块，则默认执行 {print $0} 既打印出所有读取到的内容\n> \n> END 在 AWK 从输入流中读取完所有的内容之后再执行，在 awk 整个语句输入中末尾执行\n\n例：搜索 /etc/passwd 有 root 关键字的行\n```java\n[root@localhost ~]# awk -F: '/root/' /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\noperator:x:11:0:operator:/root:/sbin/nologin\n```\n例：搜索/etc/passwd有root关键字的所有行，并显示对应的shell\n```java\n[root@localhost ~]# awk -F: '/root/{print $7}' /etc/passwd\n/bin/bash\n/sbin/nologin\n```\n","source":"_posts/Linux高效文件处理三剑客.md","raw":"---\ntitle: Linux高效文件处理三剑客\ndate: 2020-09-10 14:39:48\ncategories: Linux\ntags: \n    - Linux\n---\n> grep、sed、awk我们叫他们三剑客，掌握它们可以更好的运维，提升工作效率，即使不是运维，对我们处理数据都是非常方便的～就很多数据处理来讲，写程序肯定是也能处理的，但是远没有已经存在特定功能的命令更高效，我们只需要操作命令即可。通过本文可以讲解三剑客的一些基础知识和实用;\n\n### Grep\n简介\ngrep是一款强大的文本搜索工具，支持正则表达式。\n全称（ global search regular expression(RE) and print out the line）\n语法:grep [option]... PATTERN [FILE]...\n常用:\n```java\nusage: grep [-abcDEFGHhIiJLlmnOoqRSsUVvwxZ] [-A num] [-B num] [-C[num]]\n [-e pattern] [-f file] [--binary-files=value] [--color=when]\n [--context[=num]] [--directories=action] [--label] [--line-buffered]\n [--null] [pattern] [file ...]\n```\n常用参数：\n```java\n            -v        取反\n            -i        忽略大小写\n            -c        符合条件的行数\n            -n        输出的同时打印行号\n            ^*        以*开头         \n            *$         以*结尾 \n            ^$         空行 \n```\n实际使用\n准备好一个小故事txt：\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# cat monkey\nOne day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.\nHe looks in the well and shouts :它往井里一瞧,高喊道：\n“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”\nAn older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,\n“Goodness me!The moon is really in the water!” “糟啦!月亮掉在井里头啦!”\nAnd olderly monkey comes over.老猴子也跑过来.\nHe is very surprised as well and cries out:他也非常惊奇,喊道：\n“The moon is in the well.” “糟了,月亮掉在井里头了!”\nA group of monkeys run over to the well .一群猴子跑到井边来,\nThey look at the moon in the well and shout:他们看到井里的月亮,喊道：\n“The moon did fall into the well!Come on!Let’get it out!”\n“月亮掉在井里头啦!快来!让我们把它捞起来!”\nThen,the oldest monkey hangs on the tree up side down ,with his feet on the branch .\n然后,老猴子倒挂在大树上,\nAnd he pulls the next monkey’s feet with his hands.拉住大猴子的脚,\nAll the other monkeys follow his suit,其他的猴子一个个跟着,\nAnd they join each other one by one down to the moon in the well.\n它们一只连着一只直到井里.\nJust before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢\nHe yells excitedly “Don’t be so foolish!The moon is still in the sky!”\n它兴奋地大叫：“别蠢了!月亮还好好地挂在天上呢!\n```\n#### 直接查找符合条件的行\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep moon monkey\n“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”\n“Goodness me!The moon is really in the water!” “糟啦!月亮掉在井里头啦!”\n“The moon is in the well.” “糟了,月亮掉在井里头了!”\nThey look at the moon in the well and shout:他们看到井里的月亮,喊道：\n“The moon did fall into the well!Come on!Let’get it out!”\nAnd they join each other one by one down to the moon in the well.\nJust before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢\nHe yells excitedly “Don’t be so foolish!The moon is still in the sky!”\n```\n#### 查找反向符合条件的行\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep -v  moon monkey\nOne day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.\nHe looks in the well and shouts :它往井里一瞧,高喊道：\nAn older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,\nAnd olderly monkey comes over.老猴子也跑过来.\nHe is very surprised as well and cries out:他也非常惊奇,喊道：\nA group of monkeys run over to the well .一群猴子跑到井边来,\n“月亮掉在井里头啦!快来!让我们把它捞起来!”\nThen,the oldest monkey hangs on the tree up side down ,with his feet on the branch .\n然后,老猴子倒挂在大树上,\nAnd he pulls the next monkey’s feet with his hands.拉住大猴子的脚,\nAll the other monkeys follow his suit,其他的猴子一个个跟着,\n它们一只连着一只直到井里.\n它兴奋地大叫：“别蠢了!月亮还好好地挂在天上呢!”\n```\n#### 直接查找符合条件的行数\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep -c  moon monkey\n8\n```\n#### 忽略大小写查找符合条件的行数\n先来看一下直接查找的结果\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep my monkey\n```\n#### 忽略大小写查看\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep -i my monkey\n“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”\n```\n#### 查找符合条件的行并输出行号\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep -n monkey monkey\n1:One day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.\n4:An older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,\n6:And olderly monkey comes over.老猴子也跑过来.\n9:A group of monkeys run over to the well .一群猴子跑到井边来,\n13:Then,the oldest monkey hangs on the tree up side down ,with his feet on the branch .\n15:And he pulls the next monkey’s feet with his hands.拉住大猴子的脚,\n16:All the other monkeys follow his suit,其他的猴子一个个跟着,\n19:Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢\n```\n#### 查找开头是J的行\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep '^J' monkey\nJust before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢\n```\n#### 查找结尾是呢的行\n```java\n[root@iz2ze76ybn73dvwmdij06zz ~]# grep \"呢$\" monkey\nJust before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢\n```\n\n### Sed\n> sed是一种流编辑器，是一款处理文本比较优秀的工具，可以结合正则表达式一起使用。\n#### sed命令\n命令: sed\n语法 : sed [选项]... {命令集} [输入文件]...\n```java\n常用参数:\n            d  删除选择的行    \n            s   查找    \n            y  替换\n            i   当前行前面插入一行\n            a  当前行后面插入一行\n            p  打印行       \n            q  退出     \n\n 替换符:\n\n            数字 ：替换第几处    \n            g :  全局替换    \n            \\1:  子串匹配标记，前面搜索可以用元字符集\\(..\\)\n            &:  保留搜索刀的字符用来替换其他字符\n#### 操作\n##### 替换操作\n查看文件：\n```java\n# cat word\nTwinkle, twinkle, little star\nHow I wonder what you are\nUp above the world so high\nLike a diamond in the sky\nWhen the blazing sun is gone\n```\n替换：\n```java\n# sed 's/little/big/' word\nTwinkle, twinkle, big star\nHow I wonder what you are\nUp above the world so high\nLike a diamond in the sky\nWhen the blazing sun is gone\n```\n查看文本：\n```java\n# word1\nOh if there's one thing to be taught\nit's dreams are made to be caught\nand friends can never be bought\nDoesn't matter how long it's been\nI know you'll always jump in\n'Cause we don't know how to quit\n```\n全局替换：\n```java\n# sed 's/to/can/g' word1\nOh if there's one thing can be taught\nit's dreams are made can be caught\nand friends can nev\n```\n按行替换（替换2到最后一行)\n```java\n# sed '2,$s/to/can/' word1\nOh if there's one thing to be taught\nit's dreams are made can be caught\nand friends can never be bought\nDoesn't matter how long it's been\nI know you'll always jump in\n'Cause we don't know how can quit\n```java\n##### 删除操作:\n查看文本:\n```java\n# cat word\nTwinkle, twinkle, little star\nHow I wonder what you are\nUp above the world so high\nLike a diamond in the sky\nWhen the blazing sun is gone\n```\n删除:\n```java\n# sed '2d' word\nTwinkle, twinkle, little star\nUp above the world so high\nLike a diamond in the sky\nWhen the blazing sun is gone\n```\n显示行号:\n```java\n# sed '=;2d' word\n1\nTwinkle, twinkle, little star\n2\n3\nUp above the world so high\n4\nLike a diamond in the sky\n5\nWhen the blazing sun is gone\n```\n删除第2行到第四行:\n```java\n# sed '=;2,4d' word\n1\nTwinkle, twinkle, little star\n2\n3\n4\n5\nWhen the blazing sun is gone\n```\n##### 添加行操作:\n向前插入:\n```java\n# echo \"hello\" | sed 'i\\kitty'\nkitty\nhello\n```\n向后插入:\n```java\n# echo \"kitty\" | sed 'i\\hello'\nhello\nkitty\n```\n##### 修改行操作:\n替换第二行为hello kitty\n```java\n# sed '2c\\hello kitty' word\nTwinkle, twinkle, little star\nhello kitty\nUp above the world so high\nLike a diamond in the sky\nWhen the blazing sun is gone\n```\n替换第二行到最后一行为hello kitty\n```java\n# sed '2,$c\\hello kitty' word\nTwinkle, twinkle, little star\nhello kitty\n```\n##### 写入行操作\n把带star的行写入c文件中,c提前创建\n```java\n# sed -n '/star/w c' word\n# cat c\nTwinkle, twinkle, little star\n```\n##### 退出\n打印3行后，退出sed\n```java\n# sed '3q' word\nTwinkle, twinkle, little star\nHow I wonder what you are\nUp above the world so higher be bought\nDoesn't matter how long it's been\nI know you'll always jump in\n'Cause we don't know how can quit\n```\n\n### Awk\n> awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。\n\n命令格式：\nawk [option] 'scrip' var=value\n\n参数：\noption：\n-F 指定输入的分割字符，默认为 空格\n-v var=value 赋值一个用户自定义变量\n-f scripfile 从脚本中读取 awk 命令\n#### AWK 模式和操作awk 脚本是由模式和操作组成的。\n\n##### 模式\n模式可以是以下任意一个：\n```java\n/正则表达式/： 使用通配符的扩展集\n关系表达式：    使用运算符进行操作，可以是字符串或者数字比较测试\n模式匹配表达式：用运算符~9匹配和~！（不匹配）\nBEGIN 语句块，pattern语句块、END语句块\n```\n##### 操作\n操作有一个或者多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内、主要部分有：\n```java\n变量或属组赋值\n输出命令\n内置函数\n控制流程语句\n```\n##### 实例\n例： 只是显示最近登录的5个帐号\n```java\n[root@localhost ~]# last -n 5 \nroot     pts/0        192.168.116.1    Fri Jun 12 10:59   still logged in   \nreboot   system boot  3.10.0-862.el7.x Fri Jun 12 10:58 - 11:36  (00:38)    \nreboot   system boot  3.10.0-862.el7.x Fri Jun  5 21:07 - 11:36 (6+14:28)   \nroot     pts/0        192.168.116.1    Fri Jun  5 18:40 - crash  (02:27)    \nreboot   system boot  3.10.0-862.el7.x Fri Jun  5 17:28 - 11:36 (6+18:08)   \n\nwtmp begins Thu Oct 10 22:36:04 2019\n[root@localhost ~]# last -n 5 | awk '{print $1}'\nroot\nreboot\nreboot\nroot\nreboot\n```\n例： 只显示/etc/passwd的账户\n```java\n[root@localhost ~]# cat /etc/passwd | awk -F ':' '{print $1}'\nroot\nbin\ndaemon\nadm\nlp\nsync\nshutdown\nhalt\nmail\noperator\ngames\nftp\nnobody\nsystemd-network\ndbus\npolkitd\ntss\nsshd\npostfix\nchrony\nmysql\n```\n例：只显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割\n```java\n[root@localhost ~]# cat /etc/passwd | awk -F ':' '{print $1\"\\t\"$7}' \ndbus    /sbin/nologin\npolkitd    /sbin/nologin\ntss    /sbin/nologin\nsshd    /sbin/nologin\npostfix    /sbin/nologin\nchrony    /sbin/nologin\nmysql    /bin/bash\n```\n例：只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加”blue,/bin/nosh”\n```java\n[root@localhost ~]# cat /etc/passwd | awk -F ':' 'BEGIN {print \"name,shell\"} {print $1\"\\t\"$7} END {print \"Hello,/bin/nosh\"}'\ndbus    /sbin/nologin\npolkitd    /sbin/nologin\ntss    /sbin/nologin\nsshd    /sbin/nologin\npostfix    /sbin/nologin\nchrony    /sbin/nologin\nmysql    /bin/bash\nHello,/bin/nosh\n```\n> awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。\n\n```java\n第一步： 执行 BEGIN {commond} 指令\n第二步： 从文件或标准输入{stdin}读取一行然后执行 pattern { commmod } \n第三步； 从读至输入流末尾，执行 END {commod}语句\n```\n> BEGIN 在awk 开始输入读取之前被执行，属于一个可选的模块，一般用于变量初始化、打印输出表头\n> \n> pattern 通用命令，是最重要的一块，属于可选的，一般用于打印出指定的列，如果没有指定 petter 模块，则默认执行 {print $0} 既打印出所有读取到的内容\n> \n> END 在 AWK 从输入流中读取完所有的内容之后再执行，在 awk 整个语句输入中末尾执行\n\n例：搜索 /etc/passwd 有 root 关键字的行\n```java\n[root@localhost ~]# awk -F: '/root/' /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\noperator:x:11:0:operator:/root:/sbin/nologin\n```\n例：搜索/etc/passwd有root关键字的所有行，并显示对应的shell\n```java\n[root@localhost ~]# awk -F: '/root/{print $7}' /etc/passwd\n/bin/bash\n/sbin/nologin\n```\n","slug":"Linux高效文件处理三剑客","published":1,"updated":"2020-09-10T07:00:45.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0w0t20000ffipvaoa940js","content":"<blockquote>\n<p>grep、sed、awk我们叫他们三剑客，掌握它们可以更好的运维，提升工作效率，即使不是运维，对我们处理数据都是非常方便的～就很多数据处理来讲，写程序肯定是也能处理的，但是远没有已经存在特定功能的命令更高效，我们只需要操作命令即可。通过本文可以讲解三剑客的一些基础知识和实用;</p>\n</blockquote>\n<h3 id=\"Grep\"><a href=\"#Grep\" class=\"headerlink\" title=\"Grep\"></a>Grep</h3><p>简介<br>grep是一款强大的文本搜索工具，支持正则表达式。<br>全称（ global search regular expression(RE) and print out the line）<br>语法:grep [option]… PATTERN [FILE]…<br>常用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: grep [-abcDEFGHhIiJLlmnOoqRSsUVvwxZ] [-A num] [-B num] [-C[num]]</span><br><span class=\"line\"> [-e pattern] [-f file] [--binary-files=value] [--color=when]</span><br><span class=\"line\"> [--context[=num]] [--directories=action] [--label] [--line-buffered]</span><br><span class=\"line\"> [--<span class=\"keyword\">null</span>] [pattern] [file ...]</span><br></pre></td></tr></table></figure>\n<p>常用参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-v        取反</span><br><span class=\"line\">-i        忽略大小写</span><br><span class=\"line\">-c        符合条件的行数</span><br><span class=\"line\">-n        输出的同时打印行号</span><br><span class=\"line\">^*        以*开头         </span><br><span class=\"line\">*$         以*结尾 </span><br><span class=\"line\">^$         空行 </span><br></pre></td></tr></table></figure>\n<p>实际使用<br>准备好一个小故事txt：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# cat monkey</span><br><span class=\"line\">One day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.</span><br><span class=\"line\">He looks in the well and shouts :它往井里一瞧,高喊道：</span><br><span class=\"line\">“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”</span><br><span class=\"line\">An older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,</span><br><span class=\"line\">“Goodness me!The moon is really in the water!” “糟啦!月亮掉在井里头啦!”</span><br><span class=\"line\">And olderly monkey comes over.老猴子也跑过来.</span><br><span class=\"line\">He is very surprised as well and cries out:他也非常惊奇,喊道：</span><br><span class=\"line\">“The moon is in the well.” “糟了,月亮掉在井里头了!”</span><br><span class=\"line\">A group of monkeys run over to the well .一群猴子跑到井边来,</span><br><span class=\"line\">They look at the moon in the well and shout:他们看到井里的月亮,喊道：</span><br><span class=\"line\">“The moon did fall into the well!Come on!Let’get it out!”</span><br><span class=\"line\">“月亮掉在井里头啦!快来!让我们把它捞起来!”</span><br><span class=\"line\">Then,the oldest monkey hangs on the tree up side down ,with his feet on the branch .</span><br><span class=\"line\">然后,老猴子倒挂在大树上,</span><br><span class=\"line\">And he pulls the next monkey’s feet with his hands.拉住大猴子的脚,</span><br><span class=\"line\">All the other monkeys follow his suit,其他的猴子一个个跟着,</span><br><span class=\"line\">And they join each other one by one down to the moon in the well.</span><br><span class=\"line\">它们一只连着一只直到井里.</span><br><span class=\"line\">Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br><span class=\"line\">He yells excitedly “Don’t be so foolish!The moon is still in the sky!”</span><br><span class=\"line\">它兴奋地大叫：“别蠢了!月亮还好好地挂在天上呢!</span><br></pre></td></tr></table></figure>\n<h4 id=\"直接查找符合条件的行\"><a href=\"#直接查找符合条件的行\" class=\"headerlink\" title=\"直接查找符合条件的行\"></a>直接查找符合条件的行</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep moon monkey</span><br><span class=\"line\">“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”</span><br><span class=\"line\">“Goodness me!The moon is really in the water!” “糟啦!月亮掉在井里头啦!”</span><br><span class=\"line\">“The moon is in the well.” “糟了,月亮掉在井里头了!”</span><br><span class=\"line\">They look at the moon in the well and shout:他们看到井里的月亮,喊道：</span><br><span class=\"line\">“The moon did fall into the well!Come on!Let’get it out!”</span><br><span class=\"line\">And they join each other one by one down to the moon in the well.</span><br><span class=\"line\">Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br><span class=\"line\">He yells excitedly “Don’t be so foolish!The moon is still in the sky!”</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找反向符合条件的行\"><a href=\"#查找反向符合条件的行\" class=\"headerlink\" title=\"查找反向符合条件的行\"></a>查找反向符合条件的行</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep -v  moon monkey</span><br><span class=\"line\">One day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.</span><br><span class=\"line\">He looks in the well and shouts :它往井里一瞧,高喊道：</span><br><span class=\"line\">An older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,</span><br><span class=\"line\">And olderly monkey comes over.老猴子也跑过来.</span><br><span class=\"line\">He is very surprised as well and cries out:他也非常惊奇,喊道：</span><br><span class=\"line\">A group of monkeys run over to the well .一群猴子跑到井边来,</span><br><span class=\"line\">“月亮掉在井里头啦!快来!让我们把它捞起来!”</span><br><span class=\"line\">Then,the oldest monkey hangs on the tree up side down ,with his feet on the branch .</span><br><span class=\"line\">然后,老猴子倒挂在大树上,</span><br><span class=\"line\">And he pulls the next monkey’s feet with his hands.拉住大猴子的脚,</span><br><span class=\"line\">All the other monkeys follow his suit,其他的猴子一个个跟着,</span><br><span class=\"line\">它们一只连着一只直到井里.</span><br><span class=\"line\">它兴奋地大叫：“别蠢了!月亮还好好地挂在天上呢!”</span><br></pre></td></tr></table></figure>\n<h4 id=\"直接查找符合条件的行数\"><a href=\"#直接查找符合条件的行数\" class=\"headerlink\" title=\"直接查找符合条件的行数\"></a>直接查找符合条件的行数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep -c  moon monkey</span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"忽略大小写查找符合条件的行数\"><a href=\"#忽略大小写查找符合条件的行数\" class=\"headerlink\" title=\"忽略大小写查找符合条件的行数\"></a>忽略大小写查找符合条件的行数</h4><p>先来看一下直接查找的结果</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep my monkey</span><br></pre></td></tr></table></figure>\n<h4 id=\"忽略大小写查看\"><a href=\"#忽略大小写查看\" class=\"headerlink\" title=\"忽略大小写查看\"></a>忽略大小写查看</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep -i my monkey</span><br><span class=\"line\">“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找符合条件的行并输出行号\"><a href=\"#查找符合条件的行并输出行号\" class=\"headerlink\" title=\"查找符合条件的行并输出行号\"></a>查找符合条件的行并输出行号</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep -n monkey monkey</span><br><span class=\"line\"><span class=\"number\">1</span>:One day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.</span><br><span class=\"line\"><span class=\"number\">4</span>:An older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,</span><br><span class=\"line\"><span class=\"number\">6</span>:And olderly monkey comes over.老猴子也跑过来.</span><br><span class=\"line\"><span class=\"number\">9</span>:A group of monkeys run over to the well .一群猴子跑到井边来,</span><br><span class=\"line\"><span class=\"number\">13</span>:Then,the oldest monkey hangs on the tree up side down ,with his feet on the branch .</span><br><span class=\"line\"><span class=\"number\">15</span>:And he pulls the next monkey’s feet with his hands.拉住大猴子的脚,</span><br><span class=\"line\"><span class=\"number\">16</span>:All the other monkeys follow his suit,其他的猴子一个个跟着,</span><br><span class=\"line\"><span class=\"number\">19</span>:Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找开头是J的行\"><a href=\"#查找开头是J的行\" class=\"headerlink\" title=\"查找开头是J的行\"></a>查找开头是J的行</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep &#x27;^J&#x27; monkey</span><br><span class=\"line\">Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找结尾是呢的行\"><a href=\"#查找结尾是呢的行\" class=\"headerlink\" title=\"查找结尾是呢的行\"></a>查找结尾是呢的行</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep &quot;呢$&quot; monkey</span><br><span class=\"line\">Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sed\"><a href=\"#Sed\" class=\"headerlink\" title=\"Sed\"></a>Sed</h3><blockquote>\n<p>sed是一种流编辑器，是一款处理文本比较优秀的工具，可以结合正则表达式一起使用。</p>\n</blockquote>\n<h4 id=\"sed命令\"><a href=\"#sed命令\" class=\"headerlink\" title=\"sed命令\"></a>sed命令</h4><p>命令: sed<br>语法 : sed [选项]… {命令集} [输入文件]…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常用参数:</span><br><span class=\"line\">            d  删除选择的行    </span><br><span class=\"line\">            s   查找    </span><br><span class=\"line\">            y  替换</span><br><span class=\"line\">            i   当前行前面插入一行</span><br><span class=\"line\">            a  当前行后面插入一行</span><br><span class=\"line\">            p  打印行       </span><br><span class=\"line\">            q  退出     </span><br><span class=\"line\"></span><br><span class=\"line\"> 替换符:</span><br><span class=\"line\"></span><br><span class=\"line\">            数字 ：替换第几处    </span><br><span class=\"line\">            g :  全局替换    </span><br><span class=\"line\">            \\<span class=\"number\">1</span>:  子串匹配标记，前面搜索可以用元字符集\\(..\\)</span><br><span class=\"line\">            &amp;:  保留搜索刀的字符用来替换其他字符</span><br><span class=\"line\">#### 操作</span><br><span class=\"line\">##### 替换操作</span><br><span class=\"line\">查看文件：</span><br><span class=\"line\">```java</span><br><span class=\"line\"># cat word</span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\">How I wonder what you are</span><br><span class=\"line\">Up above the world so high</span><br><span class=\"line\">Like a diamond in the sky</span><br><span class=\"line\">When the blazing sun is gone</span><br></pre></td></tr></table></figure>\n<p>替换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;s/little/big/&#x27; word</span><br><span class=\"line\">Twinkle, twinkle, big star</span><br><span class=\"line\">How I wonder what you are</span><br><span class=\"line\">Up above the world so high</span><br><span class=\"line\">Like a diamond in the sky</span><br><span class=\"line\">When the blazing sun is gone</span><br></pre></td></tr></table></figure>\n<p>查看文本：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># word1</span><br><span class=\"line\">Oh <span class=\"keyword\">if</span> there<span class=\"string\">&#x27;s one thing to be taught</span></span><br><span class=\"line\"><span class=\"string\">it&#x27;</span>s dreams are made to be caught</span><br><span class=\"line\">and friends can never be bought</span><br><span class=\"line\">Doesn<span class=\"string\">&#x27;t matter how long it&#x27;</span>s been</span><br><span class=\"line\">I know you<span class=\"string\">&#x27;ll always jump in</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>Cause we don<span class=\"string\">&#x27;t know how to quit</span></span><br></pre></td></tr></table></figure>\n<p>全局替换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;s/to/can/g&#x27; word1</span><br><span class=\"line\">Oh <span class=\"keyword\">if</span> there<span class=\"string\">&#x27;s one thing can be taught</span></span><br><span class=\"line\"><span class=\"string\">it&#x27;</span>s dreams are made can be caught</span><br><span class=\"line\">and friends can nev</span><br></pre></td></tr></table></figure>\n<p>按行替换（替换2到最后一行)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;2,$s/to/can/&#x27; word1</span><br><span class=\"line\">Oh <span class=\"keyword\">if</span> there<span class=\"string\">&#x27;s one thing to be taught</span></span><br><span class=\"line\"><span class=\"string\">it&#x27;</span>s dreams are made can be caught</span><br><span class=\"line\">and friends can never be bought</span><br><span class=\"line\">Doesn<span class=\"string\">&#x27;t matter how long it&#x27;</span>s been</span><br><span class=\"line\">I know you<span class=\"string\">&#x27;ll always jump in</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>Cause we don<span class=\"string\">&#x27;t know how can quit</span></span><br><span class=\"line\"><span class=\"string\">```java</span></span><br><span class=\"line\"><span class=\"string\">##### 删除操作:</span></span><br><span class=\"line\"><span class=\"string\">查看文本:</span></span><br><span class=\"line\"><span class=\"string\">```java</span></span><br><span class=\"line\"><span class=\"string\"># cat word</span></span><br><span class=\"line\"><span class=\"string\">Twinkle, twinkle, little star</span></span><br><span class=\"line\"><span class=\"string\">How I wonder what you are</span></span><br><span class=\"line\"><span class=\"string\">Up above the world so high</span></span><br><span class=\"line\"><span class=\"string\">Like a diamond in the sky</span></span><br><span class=\"line\"><span class=\"string\">When the blazing sun is gone</span></span><br></pre></td></tr></table></figure>\n<p>删除:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;2d&#x27; word</span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\">Up above the world so high</span><br><span class=\"line\">Like a diamond in the sky</span><br><span class=\"line\">When the blazing sun is gone</span><br></pre></td></tr></table></figure>\n<p>显示行号:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;=;2d&#x27; word</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Up above the world so high</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">Like a diamond in the sky</span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">When the blazing sun is gone</span><br></pre></td></tr></table></figure>\n<p>删除第2行到第四行:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;=;2,4d&#x27; word</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">When the blazing sun is gone</span><br></pre></td></tr></table></figure>\n<h5 id=\"添加行操作\"><a href=\"#添加行操作\" class=\"headerlink\" title=\"添加行操作:\"></a>添加行操作:</h5><p>向前插入:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo &quot;hello&quot; | sed &#x27;i\\kitty&#x27;</span><br><span class=\"line\">kitty</span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\n<p>向后插入:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo &quot;kitty&quot; | sed &#x27;i\\hello&#x27;</span><br><span class=\"line\">hello</span><br><span class=\"line\">kitty</span><br></pre></td></tr></table></figure>\n<h5 id=\"修改行操作\"><a href=\"#修改行操作\" class=\"headerlink\" title=\"修改行操作:\"></a>修改行操作:</h5><p>替换第二行为hello kitty</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;2c\\hello kitty&#x27; word</span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\">hello kitty</span><br><span class=\"line\">Up above the world so high</span><br><span class=\"line\">Like a diamond in the sky</span><br><span class=\"line\">When the blazing sun is gone</span><br></pre></td></tr></table></figure>\n<p>替换第二行到最后一行为hello kitty</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;2,$c\\hello kitty&#x27; word</span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\">hello kitty</span><br></pre></td></tr></table></figure>\n<h5 id=\"写入行操作\"><a href=\"#写入行操作\" class=\"headerlink\" title=\"写入行操作\"></a>写入行操作</h5><p>把带star的行写入c文件中,c提前创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed -n &#x27;/star/w c&#x27; word</span><br><span class=\"line\"># cat c</span><br><span class=\"line\">Twinkle, twinkle, little star</span><br></pre></td></tr></table></figure>\n<h5 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h5><p>打印3行后，退出sed</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;3q&#x27; word</span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\">How I wonder what you are</span><br><span class=\"line\">Up above the world so higher be bought</span><br><span class=\"line\">Doesn<span class=\"string\">&#x27;t matter how long it&#x27;</span>s been</span><br><span class=\"line\">I know you<span class=\"string\">&#x27;ll always jump in</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>Cause we don<span class=\"string\">&#x27;t know how can quit</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Awk\"><a href=\"#Awk\" class=\"headerlink\" title=\"Awk\"></a>Awk</h3><blockquote>\n<p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>\n</blockquote>\n<p>命令格式：<br>awk [option] ‘scrip’ var=value</p>\n<p>参数：<br>option：<br>-F 指定输入的分割字符，默认为 空格<br>-v var=value 赋值一个用户自定义变量<br>-f scripfile 从脚本中读取 awk 命令</p>\n<h4 id=\"AWK-模式和操作awk-脚本是由模式和操作组成的。\"><a href=\"#AWK-模式和操作awk-脚本是由模式和操作组成的。\" class=\"headerlink\" title=\"AWK 模式和操作awk 脚本是由模式和操作组成的。\"></a>AWK 模式和操作awk 脚本是由模式和操作组成的。</h4><h5 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h5><p>模式可以是以下任意一个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/正则表达式/： 使用通配符的扩展集</span><br><span class=\"line\">关系表达式：    使用运算符进行操作，可以是字符串或者数字比较测试</span><br><span class=\"line\">模式匹配表达式：用运算符~<span class=\"number\">9</span>匹配和~！（不匹配）</span><br><span class=\"line\">BEGIN 语句块，pattern语句块、END语句块</span><br></pre></td></tr></table></figure>\n<h5 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h5><p>操作有一个或者多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内、主要部分有：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量或属组赋值</span><br><span class=\"line\">输出命令</span><br><span class=\"line\">内置函数</span><br><span class=\"line\">控制流程语句</span><br></pre></td></tr></table></figure>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>例： 只是显示最近登录的5个帐号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# last -n 5 </span><br><span class=\"line\">root     pts/<span class=\"number\">0</span>        <span class=\"number\">192.168</span>.<span class=\"number\">116.1</span>    Fri Jun <span class=\"number\">12</span> <span class=\"number\">10</span>:<span class=\"number\">59</span>   still logged in   </span><br><span class=\"line\">reboot   system boot  <span class=\"number\">3.10</span>.<span class=\"number\">0</span>-<span class=\"number\">862.</span>el7.x Fri Jun <span class=\"number\">12</span> <span class=\"number\">10</span>:<span class=\"number\">58</span> - <span class=\"number\">11</span>:<span class=\"number\">36</span>  (<span class=\"number\">00</span>:<span class=\"number\">38</span>)    </span><br><span class=\"line\">reboot   system boot  <span class=\"number\">3.10</span>.<span class=\"number\">0</span>-<span class=\"number\">862.</span>el7.x Fri Jun  <span class=\"number\">5</span> <span class=\"number\">21</span>:<span class=\"number\">07</span> - <span class=\"number\">11</span>:<span class=\"number\">36</span> (<span class=\"number\">6</span>+<span class=\"number\">14</span>:<span class=\"number\">28</span>)   </span><br><span class=\"line\">root     pts/<span class=\"number\">0</span>        <span class=\"number\">192.168</span>.<span class=\"number\">116.1</span>    Fri Jun  <span class=\"number\">5</span> <span class=\"number\">18</span>:<span class=\"number\">40</span> - crash  (<span class=\"number\">02</span>:<span class=\"number\">27</span>)    </span><br><span class=\"line\">reboot   system boot  <span class=\"number\">3.10</span>.<span class=\"number\">0</span>-<span class=\"number\">862.</span>el7.x Fri Jun  <span class=\"number\">5</span> <span class=\"number\">17</span>:<span class=\"number\">28</span> - <span class=\"number\">11</span>:<span class=\"number\">36</span> (<span class=\"number\">6</span>+<span class=\"number\">18</span>:<span class=\"number\">08</span>)   </span><br><span class=\"line\"></span><br><span class=\"line\">wtmp begins Thu Oct <span class=\"number\">10</span> <span class=\"number\">22</span>:<span class=\"number\">36</span>:<span class=\"number\">04</span> <span class=\"number\">2019</span></span><br><span class=\"line\">[root@localhost ~]# last -n 5 | awk &#x27;&#123;print $1&#125;&#x27;</span><br><span class=\"line\">root</span><br><span class=\"line\">reboot</span><br><span class=\"line\">reboot</span><br><span class=\"line\">root</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p>例： 只显示/etc/passwd的账户</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;&#123;print $1&#125;&#x27;</span><br><span class=\"line\">root</span><br><span class=\"line\">bin</span><br><span class=\"line\">daemon</span><br><span class=\"line\">adm</span><br><span class=\"line\">lp</span><br><span class=\"line\">sync</span><br><span class=\"line\">shutdown</span><br><span class=\"line\">halt</span><br><span class=\"line\">mail</span><br><span class=\"line\">operator</span><br><span class=\"line\">games</span><br><span class=\"line\">ftp</span><br><span class=\"line\">nobody</span><br><span class=\"line\">systemd-network</span><br><span class=\"line\">dbus</span><br><span class=\"line\">polkitd</span><br><span class=\"line\">tss</span><br><span class=\"line\">sshd</span><br><span class=\"line\">postfix</span><br><span class=\"line\">chrony</span><br><span class=\"line\">mysql</span><br></pre></td></tr></table></figure>\n<p>例：只显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;&#123;print $1&quot;\\t&quot;$7&#125;&#x27; </span><br><span class=\"line\">dbus    /sbin/nologin</span><br><span class=\"line\">polkitd    /sbin/nologin</span><br><span class=\"line\">tss    /sbin/nologin</span><br><span class=\"line\">sshd    /sbin/nologin</span><br><span class=\"line\">postfix    /sbin/nologin</span><br><span class=\"line\">chrony    /sbin/nologin</span><br><span class=\"line\">mysql    /bin/bash</span><br></pre></td></tr></table></figure>\n<p>例：只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加”blue,/bin/nosh”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;BEGIN &#123;print &quot;name,shell&quot;&#125; &#123;print $1&quot;\\t&quot;$7&#125; END &#123;print &quot;Hello,/bin/nosh&quot;&#125;&#x27;</span><br><span class=\"line\">dbus    /sbin/nologin</span><br><span class=\"line\">polkitd    /sbin/nologin</span><br><span class=\"line\">tss    /sbin/nologin</span><br><span class=\"line\">sshd    /sbin/nologin</span><br><span class=\"line\">postfix    /sbin/nologin</span><br><span class=\"line\">chrony    /sbin/nologin</span><br><span class=\"line\">mysql    /bin/bash</span><br><span class=\"line\">Hello,/bin/nosh</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一步： 执行 BEGIN &#123;commond&#125; 指令</span><br><span class=\"line\">第二步： 从文件或标准输入&#123;stdin&#125;读取一行然后执行 pattern &#123; commmod &#125; </span><br><span class=\"line\">第三步； 从读至输入流末尾，执行 END &#123;commod&#125;语句</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>BEGIN 在awk 开始输入读取之前被执行，属于一个可选的模块，一般用于变量初始化、打印输出表头</p>\n<p>pattern 通用命令，是最重要的一块，属于可选的，一般用于打印出指定的列，如果没有指定 petter 模块，则默认执行 {print $0} 既打印出所有读取到的内容</p>\n<p>END 在 AWK 从输入流中读取完所有的内容之后再执行，在 awk 整个语句输入中末尾执行</p>\n</blockquote>\n<p>例：搜索 /etc/passwd 有 root 关键字的行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# awk -F: &#x27;/root/&#x27; /etc/passwd</span><br><span class=\"line\">root:x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:root:/root:/bin/bash</span><br><span class=\"line\">operator:x:<span class=\"number\">11</span>:<span class=\"number\">0</span>:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure>\n<p>例：搜索/etc/passwd有root关键字的所有行，并显示对应的shell</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# awk -F: &#x27;/root/&#123;print $7&#125;&#x27; /etc/passwd</span><br><span class=\"line\">/bin/bash</span><br><span class=\"line\">/sbin/nologin</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>grep、sed、awk我们叫他们三剑客，掌握它们可以更好的运维，提升工作效率，即使不是运维，对我们处理数据都是非常方便的～就很多数据处理来讲，写程序肯定是也能处理的，但是远没有已经存在特定功能的命令更高效，我们只需要操作命令即可。通过本文可以讲解三剑客的一些基础知识和实用;</p>\n</blockquote>\n<h3 id=\"Grep\"><a href=\"#Grep\" class=\"headerlink\" title=\"Grep\"></a>Grep</h3><p>简介<br>grep是一款强大的文本搜索工具，支持正则表达式。<br>全称（ global search regular expression(RE) and print out the line）<br>语法:grep [option]… PATTERN [FILE]…<br>常用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: grep [-abcDEFGHhIiJLlmnOoqRSsUVvwxZ] [-A num] [-B num] [-C[num]]</span><br><span class=\"line\"> [-e pattern] [-f file] [--binary-files=value] [--color=when]</span><br><span class=\"line\"> [--context[=num]] [--directories=action] [--label] [--line-buffered]</span><br><span class=\"line\"> [--<span class=\"keyword\">null</span>] [pattern] [file ...]</span><br></pre></td></tr></table></figure>\n<p>常用参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-v        取反</span><br><span class=\"line\">-i        忽略大小写</span><br><span class=\"line\">-c        符合条件的行数</span><br><span class=\"line\">-n        输出的同时打印行号</span><br><span class=\"line\">^*        以*开头         </span><br><span class=\"line\">*$         以*结尾 </span><br><span class=\"line\">^$         空行 </span><br></pre></td></tr></table></figure>\n<p>实际使用<br>准备好一个小故事txt：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# cat monkey</span><br><span class=\"line\">One day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.</span><br><span class=\"line\">He looks in the well and shouts :它往井里一瞧,高喊道：</span><br><span class=\"line\">“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”</span><br><span class=\"line\">An older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,</span><br><span class=\"line\">“Goodness me!The moon is really in the water!” “糟啦!月亮掉在井里头啦!”</span><br><span class=\"line\">And olderly monkey comes over.老猴子也跑过来.</span><br><span class=\"line\">He is very surprised as well and cries out:他也非常惊奇,喊道：</span><br><span class=\"line\">“The moon is in the well.” “糟了,月亮掉在井里头了!”</span><br><span class=\"line\">A group of monkeys run over to the well .一群猴子跑到井边来,</span><br><span class=\"line\">They look at the moon in the well and shout:他们看到井里的月亮,喊道：</span><br><span class=\"line\">“The moon did fall into the well!Come on!Let’get it out!”</span><br><span class=\"line\">“月亮掉在井里头啦!快来!让我们把它捞起来!”</span><br><span class=\"line\">Then,the oldest monkey hangs on the tree up side down ,with his feet on the branch .</span><br><span class=\"line\">然后,老猴子倒挂在大树上,</span><br><span class=\"line\">And he pulls the next monkey’s feet with his hands.拉住大猴子的脚,</span><br><span class=\"line\">All the other monkeys follow his suit,其他的猴子一个个跟着,</span><br><span class=\"line\">And they join each other one by one down to the moon in the well.</span><br><span class=\"line\">它们一只连着一只直到井里.</span><br><span class=\"line\">Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br><span class=\"line\">He yells excitedly “Don’t be so foolish!The moon is still in the sky!”</span><br><span class=\"line\">它兴奋地大叫：“别蠢了!月亮还好好地挂在天上呢!</span><br></pre></td></tr></table></figure>\n<h4 id=\"直接查找符合条件的行\"><a href=\"#直接查找符合条件的行\" class=\"headerlink\" title=\"直接查找符合条件的行\"></a>直接查找符合条件的行</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep moon monkey</span><br><span class=\"line\">“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”</span><br><span class=\"line\">“Goodness me!The moon is really in the water!” “糟啦!月亮掉在井里头啦!”</span><br><span class=\"line\">“The moon is in the well.” “糟了,月亮掉在井里头了!”</span><br><span class=\"line\">They look at the moon in the well and shout:他们看到井里的月亮,喊道：</span><br><span class=\"line\">“The moon did fall into the well!Come on!Let’get it out!”</span><br><span class=\"line\">And they join each other one by one down to the moon in the well.</span><br><span class=\"line\">Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br><span class=\"line\">He yells excitedly “Don’t be so foolish!The moon is still in the sky!”</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找反向符合条件的行\"><a href=\"#查找反向符合条件的行\" class=\"headerlink\" title=\"查找反向符合条件的行\"></a>查找反向符合条件的行</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep -v  moon monkey</span><br><span class=\"line\">One day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.</span><br><span class=\"line\">He looks in the well and shouts :它往井里一瞧,高喊道：</span><br><span class=\"line\">An older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,</span><br><span class=\"line\">And olderly monkey comes over.老猴子也跑过来.</span><br><span class=\"line\">He is very surprised as well and cries out:他也非常惊奇,喊道：</span><br><span class=\"line\">A group of monkeys run over to the well .一群猴子跑到井边来,</span><br><span class=\"line\">“月亮掉在井里头啦!快来!让我们把它捞起来!”</span><br><span class=\"line\">Then,the oldest monkey hangs on the tree up side down ,with his feet on the branch .</span><br><span class=\"line\">然后,老猴子倒挂在大树上,</span><br><span class=\"line\">And he pulls the next monkey’s feet with his hands.拉住大猴子的脚,</span><br><span class=\"line\">All the other monkeys follow his suit,其他的猴子一个个跟着,</span><br><span class=\"line\">它们一只连着一只直到井里.</span><br><span class=\"line\">它兴奋地大叫：“别蠢了!月亮还好好地挂在天上呢!”</span><br></pre></td></tr></table></figure>\n<h4 id=\"直接查找符合条件的行数\"><a href=\"#直接查找符合条件的行数\" class=\"headerlink\" title=\"直接查找符合条件的行数\"></a>直接查找符合条件的行数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep -c  moon monkey</span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"忽略大小写查找符合条件的行数\"><a href=\"#忽略大小写查找符合条件的行数\" class=\"headerlink\" title=\"忽略大小写查找符合条件的行数\"></a>忽略大小写查找符合条件的行数</h4><p>先来看一下直接查找的结果</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep my monkey</span><br></pre></td></tr></table></figure>\n<h4 id=\"忽略大小写查看\"><a href=\"#忽略大小写查看\" class=\"headerlink\" title=\"忽略大小写查看\"></a>忽略大小写查看</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep -i my monkey</span><br><span class=\"line\">“Oh!My god!The moon has fallen into the well!” “噢!我的天!月亮掉到井里头啦!”</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找符合条件的行并输出行号\"><a href=\"#查找符合条件的行并输出行号\" class=\"headerlink\" title=\"查找符合条件的行并输出行号\"></a>查找符合条件的行并输出行号</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep -n monkey monkey</span><br><span class=\"line\"><span class=\"number\">1</span>:One day,a little monkey is playing by the well.一天,有只小猴子在井边玩儿.</span><br><span class=\"line\"><span class=\"number\">4</span>:An older monkeys runs over,takes a look,and says,一只大猴子跑来一看,说,</span><br><span class=\"line\"><span class=\"number\">6</span>:And olderly monkey comes over.老猴子也跑过来.</span><br><span class=\"line\"><span class=\"number\">9</span>:A group of monkeys run over to the well .一群猴子跑到井边来,</span><br><span class=\"line\"><span class=\"number\">13</span>:Then,the oldest monkey hangs on the tree up side down ,with his feet on the branch .</span><br><span class=\"line\"><span class=\"number\">15</span>:And he pulls the next monkey’s feet with his hands.拉住大猴子的脚,</span><br><span class=\"line\"><span class=\"number\">16</span>:All the other monkeys follow his suit,其他的猴子一个个跟着,</span><br><span class=\"line\"><span class=\"number\">19</span>:Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找开头是J的行\"><a href=\"#查找开头是J的行\" class=\"headerlink\" title=\"查找开头是J的行\"></a>查找开头是J的行</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep &#x27;^J&#x27; monkey</span><br><span class=\"line\">Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找结尾是呢的行\"><a href=\"#查找结尾是呢的行\" class=\"headerlink\" title=\"查找结尾是呢的行\"></a>查找结尾是呢的行</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iz2ze76ybn73dvwmdij06zz ~]# grep &quot;呢$&quot; monkey</span><br><span class=\"line\">Just before they reach the moon,the oldest monkey raises his head and happens to see the moon in the sky,正好他们摸到月亮的时候,老猴子抬头发现月亮挂在天上呢</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sed\"><a href=\"#Sed\" class=\"headerlink\" title=\"Sed\"></a>Sed</h3><blockquote>\n<p>sed是一种流编辑器，是一款处理文本比较优秀的工具，可以结合正则表达式一起使用。</p>\n</blockquote>\n<h4 id=\"sed命令\"><a href=\"#sed命令\" class=\"headerlink\" title=\"sed命令\"></a>sed命令</h4><p>命令: sed<br>语法 : sed [选项]… {命令集} [输入文件]…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常用参数:</span><br><span class=\"line\">            d  删除选择的行    </span><br><span class=\"line\">            s   查找    </span><br><span class=\"line\">            y  替换</span><br><span class=\"line\">            i   当前行前面插入一行</span><br><span class=\"line\">            a  当前行后面插入一行</span><br><span class=\"line\">            p  打印行       </span><br><span class=\"line\">            q  退出     </span><br><span class=\"line\"></span><br><span class=\"line\"> 替换符:</span><br><span class=\"line\"></span><br><span class=\"line\">            数字 ：替换第几处    </span><br><span class=\"line\">            g :  全局替换    </span><br><span class=\"line\">            \\<span class=\"number\">1</span>:  子串匹配标记，前面搜索可以用元字符集\\(..\\)</span><br><span class=\"line\">            &amp;:  保留搜索刀的字符用来替换其他字符</span><br><span class=\"line\">#### 操作</span><br><span class=\"line\">##### 替换操作</span><br><span class=\"line\">查看文件：</span><br><span class=\"line\">```java</span><br><span class=\"line\"># cat word</span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\">How I wonder what you are</span><br><span class=\"line\">Up above the world so high</span><br><span class=\"line\">Like a diamond in the sky</span><br><span class=\"line\">When the blazing sun is gone</span><br></pre></td></tr></table></figure>\n<p>替换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;s/little/big/&#x27; word</span><br><span class=\"line\">Twinkle, twinkle, big star</span><br><span class=\"line\">How I wonder what you are</span><br><span class=\"line\">Up above the world so high</span><br><span class=\"line\">Like a diamond in the sky</span><br><span class=\"line\">When the blazing sun is gone</span><br></pre></td></tr></table></figure>\n<p>查看文本：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># word1</span><br><span class=\"line\">Oh <span class=\"keyword\">if</span> there<span class=\"string\">&#x27;s one thing to be taught</span></span><br><span class=\"line\"><span class=\"string\">it&#x27;</span>s dreams are made to be caught</span><br><span class=\"line\">and friends can never be bought</span><br><span class=\"line\">Doesn<span class=\"string\">&#x27;t matter how long it&#x27;</span>s been</span><br><span class=\"line\">I know you<span class=\"string\">&#x27;ll always jump in</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>Cause we don<span class=\"string\">&#x27;t know how to quit</span></span><br></pre></td></tr></table></figure>\n<p>全局替换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;s/to/can/g&#x27; word1</span><br><span class=\"line\">Oh <span class=\"keyword\">if</span> there<span class=\"string\">&#x27;s one thing can be taught</span></span><br><span class=\"line\"><span class=\"string\">it&#x27;</span>s dreams are made can be caught</span><br><span class=\"line\">and friends can nev</span><br></pre></td></tr></table></figure>\n<p>按行替换（替换2到最后一行)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;2,$s/to/can/&#x27; word1</span><br><span class=\"line\">Oh <span class=\"keyword\">if</span> there<span class=\"string\">&#x27;s one thing to be taught</span></span><br><span class=\"line\"><span class=\"string\">it&#x27;</span>s dreams are made can be caught</span><br><span class=\"line\">and friends can never be bought</span><br><span class=\"line\">Doesn<span class=\"string\">&#x27;t matter how long it&#x27;</span>s been</span><br><span class=\"line\">I know you<span class=\"string\">&#x27;ll always jump in</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>Cause we don<span class=\"string\">&#x27;t know how can quit</span></span><br><span class=\"line\"><span class=\"string\">```java</span></span><br><span class=\"line\"><span class=\"string\">##### 删除操作:</span></span><br><span class=\"line\"><span class=\"string\">查看文本:</span></span><br><span class=\"line\"><span class=\"string\">```java</span></span><br><span class=\"line\"><span class=\"string\"># cat word</span></span><br><span class=\"line\"><span class=\"string\">Twinkle, twinkle, little star</span></span><br><span class=\"line\"><span class=\"string\">How I wonder what you are</span></span><br><span class=\"line\"><span class=\"string\">Up above the world so high</span></span><br><span class=\"line\"><span class=\"string\">Like a diamond in the sky</span></span><br><span class=\"line\"><span class=\"string\">When the blazing sun is gone</span></span><br></pre></td></tr></table></figure>\n<p>删除:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;2d&#x27; word</span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\">Up above the world so high</span><br><span class=\"line\">Like a diamond in the sky</span><br><span class=\"line\">When the blazing sun is gone</span><br></pre></td></tr></table></figure>\n<p>显示行号:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;=;2d&#x27; word</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Up above the world so high</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">Like a diamond in the sky</span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">When the blazing sun is gone</span><br></pre></td></tr></table></figure>\n<p>删除第2行到第四行:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;=;2,4d&#x27; word</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\">When the blazing sun is gone</span><br></pre></td></tr></table></figure>\n<h5 id=\"添加行操作\"><a href=\"#添加行操作\" class=\"headerlink\" title=\"添加行操作:\"></a>添加行操作:</h5><p>向前插入:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo &quot;hello&quot; | sed &#x27;i\\kitty&#x27;</span><br><span class=\"line\">kitty</span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\n<p>向后插入:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo &quot;kitty&quot; | sed &#x27;i\\hello&#x27;</span><br><span class=\"line\">hello</span><br><span class=\"line\">kitty</span><br></pre></td></tr></table></figure>\n<h5 id=\"修改行操作\"><a href=\"#修改行操作\" class=\"headerlink\" title=\"修改行操作:\"></a>修改行操作:</h5><p>替换第二行为hello kitty</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;2c\\hello kitty&#x27; word</span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\">hello kitty</span><br><span class=\"line\">Up above the world so high</span><br><span class=\"line\">Like a diamond in the sky</span><br><span class=\"line\">When the blazing sun is gone</span><br></pre></td></tr></table></figure>\n<p>替换第二行到最后一行为hello kitty</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;2,$c\\hello kitty&#x27; word</span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\">hello kitty</span><br></pre></td></tr></table></figure>\n<h5 id=\"写入行操作\"><a href=\"#写入行操作\" class=\"headerlink\" title=\"写入行操作\"></a>写入行操作</h5><p>把带star的行写入c文件中,c提前创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed -n &#x27;/star/w c&#x27; word</span><br><span class=\"line\"># cat c</span><br><span class=\"line\">Twinkle, twinkle, little star</span><br></pre></td></tr></table></figure>\n<h5 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h5><p>打印3行后，退出sed</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sed &#x27;3q&#x27; word</span><br><span class=\"line\">Twinkle, twinkle, little star</span><br><span class=\"line\">How I wonder what you are</span><br><span class=\"line\">Up above the world so higher be bought</span><br><span class=\"line\">Doesn<span class=\"string\">&#x27;t matter how long it&#x27;</span>s been</span><br><span class=\"line\">I know you<span class=\"string\">&#x27;ll always jump in</span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span>Cause we don<span class=\"string\">&#x27;t know how can quit</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Awk\"><a href=\"#Awk\" class=\"headerlink\" title=\"Awk\"></a>Awk</h3><blockquote>\n<p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>\n</blockquote>\n<p>命令格式：<br>awk [option] ‘scrip’ var=value</p>\n<p>参数：<br>option：<br>-F 指定输入的分割字符，默认为 空格<br>-v var=value 赋值一个用户自定义变量<br>-f scripfile 从脚本中读取 awk 命令</p>\n<h4 id=\"AWK-模式和操作awk-脚本是由模式和操作组成的。\"><a href=\"#AWK-模式和操作awk-脚本是由模式和操作组成的。\" class=\"headerlink\" title=\"AWK 模式和操作awk 脚本是由模式和操作组成的。\"></a>AWK 模式和操作awk 脚本是由模式和操作组成的。</h4><h5 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h5><p>模式可以是以下任意一个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/正则表达式/： 使用通配符的扩展集</span><br><span class=\"line\">关系表达式：    使用运算符进行操作，可以是字符串或者数字比较测试</span><br><span class=\"line\">模式匹配表达式：用运算符~<span class=\"number\">9</span>匹配和~！（不匹配）</span><br><span class=\"line\">BEGIN 语句块，pattern语句块、END语句块</span><br></pre></td></tr></table></figure>\n<h5 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h5><p>操作有一个或者多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内、主要部分有：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量或属组赋值</span><br><span class=\"line\">输出命令</span><br><span class=\"line\">内置函数</span><br><span class=\"line\">控制流程语句</span><br></pre></td></tr></table></figure>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>例： 只是显示最近登录的5个帐号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# last -n 5 </span><br><span class=\"line\">root     pts/<span class=\"number\">0</span>        <span class=\"number\">192.168</span>.<span class=\"number\">116.1</span>    Fri Jun <span class=\"number\">12</span> <span class=\"number\">10</span>:<span class=\"number\">59</span>   still logged in   </span><br><span class=\"line\">reboot   system boot  <span class=\"number\">3.10</span>.<span class=\"number\">0</span>-<span class=\"number\">862.</span>el7.x Fri Jun <span class=\"number\">12</span> <span class=\"number\">10</span>:<span class=\"number\">58</span> - <span class=\"number\">11</span>:<span class=\"number\">36</span>  (<span class=\"number\">00</span>:<span class=\"number\">38</span>)    </span><br><span class=\"line\">reboot   system boot  <span class=\"number\">3.10</span>.<span class=\"number\">0</span>-<span class=\"number\">862.</span>el7.x Fri Jun  <span class=\"number\">5</span> <span class=\"number\">21</span>:<span class=\"number\">07</span> - <span class=\"number\">11</span>:<span class=\"number\">36</span> (<span class=\"number\">6</span>+<span class=\"number\">14</span>:<span class=\"number\">28</span>)   </span><br><span class=\"line\">root     pts/<span class=\"number\">0</span>        <span class=\"number\">192.168</span>.<span class=\"number\">116.1</span>    Fri Jun  <span class=\"number\">5</span> <span class=\"number\">18</span>:<span class=\"number\">40</span> - crash  (<span class=\"number\">02</span>:<span class=\"number\">27</span>)    </span><br><span class=\"line\">reboot   system boot  <span class=\"number\">3.10</span>.<span class=\"number\">0</span>-<span class=\"number\">862.</span>el7.x Fri Jun  <span class=\"number\">5</span> <span class=\"number\">17</span>:<span class=\"number\">28</span> - <span class=\"number\">11</span>:<span class=\"number\">36</span> (<span class=\"number\">6</span>+<span class=\"number\">18</span>:<span class=\"number\">08</span>)   </span><br><span class=\"line\"></span><br><span class=\"line\">wtmp begins Thu Oct <span class=\"number\">10</span> <span class=\"number\">22</span>:<span class=\"number\">36</span>:<span class=\"number\">04</span> <span class=\"number\">2019</span></span><br><span class=\"line\">[root@localhost ~]# last -n 5 | awk &#x27;&#123;print $1&#125;&#x27;</span><br><span class=\"line\">root</span><br><span class=\"line\">reboot</span><br><span class=\"line\">reboot</span><br><span class=\"line\">root</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<p>例： 只显示/etc/passwd的账户</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;&#123;print $1&#125;&#x27;</span><br><span class=\"line\">root</span><br><span class=\"line\">bin</span><br><span class=\"line\">daemon</span><br><span class=\"line\">adm</span><br><span class=\"line\">lp</span><br><span class=\"line\">sync</span><br><span class=\"line\">shutdown</span><br><span class=\"line\">halt</span><br><span class=\"line\">mail</span><br><span class=\"line\">operator</span><br><span class=\"line\">games</span><br><span class=\"line\">ftp</span><br><span class=\"line\">nobody</span><br><span class=\"line\">systemd-network</span><br><span class=\"line\">dbus</span><br><span class=\"line\">polkitd</span><br><span class=\"line\">tss</span><br><span class=\"line\">sshd</span><br><span class=\"line\">postfix</span><br><span class=\"line\">chrony</span><br><span class=\"line\">mysql</span><br></pre></td></tr></table></figure>\n<p>例：只显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;&#123;print $1&quot;\\t&quot;$7&#125;&#x27; </span><br><span class=\"line\">dbus    /sbin/nologin</span><br><span class=\"line\">polkitd    /sbin/nologin</span><br><span class=\"line\">tss    /sbin/nologin</span><br><span class=\"line\">sshd    /sbin/nologin</span><br><span class=\"line\">postfix    /sbin/nologin</span><br><span class=\"line\">chrony    /sbin/nologin</span><br><span class=\"line\">mysql    /bin/bash</span><br></pre></td></tr></table></figure>\n<p>例：只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加”blue,/bin/nosh”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/passwd | awk -F &#x27;:&#x27; &#x27;BEGIN &#123;print &quot;name,shell&quot;&#125; &#123;print $1&quot;\\t&quot;$7&#125; END &#123;print &quot;Hello,/bin/nosh&quot;&#125;&#x27;</span><br><span class=\"line\">dbus    /sbin/nologin</span><br><span class=\"line\">polkitd    /sbin/nologin</span><br><span class=\"line\">tss    /sbin/nologin</span><br><span class=\"line\">sshd    /sbin/nologin</span><br><span class=\"line\">postfix    /sbin/nologin</span><br><span class=\"line\">chrony    /sbin/nologin</span><br><span class=\"line\">mysql    /bin/bash</span><br><span class=\"line\">Hello,/bin/nosh</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一步： 执行 BEGIN &#123;commond&#125; 指令</span><br><span class=\"line\">第二步： 从文件或标准输入&#123;stdin&#125;读取一行然后执行 pattern &#123; commmod &#125; </span><br><span class=\"line\">第三步； 从读至输入流末尾，执行 END &#123;commod&#125;语句</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>BEGIN 在awk 开始输入读取之前被执行，属于一个可选的模块，一般用于变量初始化、打印输出表头</p>\n<p>pattern 通用命令，是最重要的一块，属于可选的，一般用于打印出指定的列，如果没有指定 petter 模块，则默认执行 {print $0} 既打印出所有读取到的内容</p>\n<p>END 在 AWK 从输入流中读取完所有的内容之后再执行，在 awk 整个语句输入中末尾执行</p>\n</blockquote>\n<p>例：搜索 /etc/passwd 有 root 关键字的行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# awk -F: &#x27;/root/&#x27; /etc/passwd</span><br><span class=\"line\">root:x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:root:/root:/bin/bash</span><br><span class=\"line\">operator:x:<span class=\"number\">11</span>:<span class=\"number\">0</span>:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure>\n<p>例：搜索/etc/passwd有root关键字的所有行，并显示对应的shell</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# awk -F: &#x27;/root/&#123;print $7&#125;&#x27; /etc/passwd</span><br><span class=\"line\">/bin/bash</span><br><span class=\"line\">/sbin/nologin</span><br></pre></td></tr></table></figure>\n"},{"title":"commit构建镜像","author":"Semaik.","date":"2020-09-10T09:40:00.000Z","_content":"###### 用docker commit构建映像\n```\n　　1.docker run -i -t centos /bin/bash　　//启动一个容器，启动后默认进入该窗口的bash进程\n　　2.yum install -y epel-release.noarch　　//为启动的窗口安装软件源\n　　3.yum install -y nginx　　//为启动的容器安装nginx\n　　4.exit　　//退出该容器，回到宿主机环境\n　　5.docker commit 容器ID zx/nginx　　//将上次创建的窗口ID当作映像提交到本地,zrs是repository名称,nginx是image名称\n　　6.docker images　　//可以查看到上步提交的映像\n  ```\n###### 注意：\n　　　　1.一定要区分开容器和映像的区别；\n    \n　　　　2.有了zx/nginx后，下次可以直接使用该映像来启动容器，而不用为这个容器安装nginx;\n    \n　　　　3.docker commit -m=\"this is a container contains nginx\" --author=\"zx\" 容器ID zx/nginx，类似git不作多余解释；","source":"_posts/commit构建镜像.md","raw":"title: commit构建镜像\nauthor: Semaik.\ntags:\n  - Docker\ncategories:\n  - Docker\ndate: 2020-09-10 17:40:00\n---\n###### 用docker commit构建映像\n```\n　　1.docker run -i -t centos /bin/bash　　//启动一个容器，启动后默认进入该窗口的bash进程\n　　2.yum install -y epel-release.noarch　　//为启动的窗口安装软件源\n　　3.yum install -y nginx　　//为启动的容器安装nginx\n　　4.exit　　//退出该容器，回到宿主机环境\n　　5.docker commit 容器ID zx/nginx　　//将上次创建的窗口ID当作映像提交到本地,zrs是repository名称,nginx是image名称\n　　6.docker images　　//可以查看到上步提交的映像\n  ```\n###### 注意：\n　　　　1.一定要区分开容器和映像的区别；\n    \n　　　　2.有了zx/nginx后，下次可以直接使用该映像来启动容器，而不用为这个容器安装nginx;\n    \n　　　　3.docker commit -m=\"this is a container contains nginx\" --author=\"zx\" 容器ID zx/nginx，类似git不作多余解释；","slug":"commit构建镜像","published":1,"updated":"2020-09-10T09:41:49.692Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0w0t22000kfipvb78zaylc","content":"<h6 id=\"用docker-commit构建映像\"><a href=\"#用docker-commit构建映像\" class=\"headerlink\" title=\"用docker commit构建映像\"></a>用docker commit构建映像</h6><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"number\">1</span><span class=\"selector-class\">.docker</span> run -<span class=\"selector-tag\">i</span> -t centos /bin/bash　　<span class=\"comment\">//启动一个容器，启动后默认进入该窗口的bash进程</span></span><br><span class=\"line\">　　<span class=\"number\">2</span><span class=\"selector-class\">.yum</span> install -y epel-release<span class=\"selector-class\">.noarch</span>　　<span class=\"comment\">//为启动的窗口安装软件源</span></span><br><span class=\"line\">　　<span class=\"number\">3</span><span class=\"selector-class\">.yum</span> install -y nginx　　<span class=\"comment\">//为启动的容器安装nginx</span></span><br><span class=\"line\">　　<span class=\"number\">4</span><span class=\"selector-class\">.exit</span>　　<span class=\"comment\">//退出该容器，回到宿主机环境</span></span><br><span class=\"line\">　　<span class=\"number\">5</span><span class=\"selector-class\">.docker</span> commit 容器ID zx/nginx　　<span class=\"comment\">//将上次创建的窗口ID当作映像提交到本地,zrs是repository名称,nginx是image名称</span></span><br><span class=\"line\">　　<span class=\"number\">6</span><span class=\"selector-class\">.docker</span> images　　<span class=\"comment\">//可以查看到上步提交的映像</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>　　　　1.一定要区分开容器和映像的区别；</p>\n<p>　　　　2.有了zx/nginx后，下次可以直接使用该映像来启动容器，而不用为这个容器安装nginx;</p>\n<p>　　　　3.docker commit -m=”this is a container contains nginx” –author=”zx” 容器ID zx/nginx，类似git不作多余解释；</p>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"用docker-commit构建映像\"><a href=\"#用docker-commit构建映像\" class=\"headerlink\" title=\"用docker commit构建映像\"></a>用docker commit构建映像</h6><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"number\">1</span><span class=\"selector-class\">.docker</span> run -<span class=\"selector-tag\">i</span> -t centos /bin/bash　　<span class=\"comment\">//启动一个容器，启动后默认进入该窗口的bash进程</span></span><br><span class=\"line\">　　<span class=\"number\">2</span><span class=\"selector-class\">.yum</span> install -y epel-release<span class=\"selector-class\">.noarch</span>　　<span class=\"comment\">//为启动的窗口安装软件源</span></span><br><span class=\"line\">　　<span class=\"number\">3</span><span class=\"selector-class\">.yum</span> install -y nginx　　<span class=\"comment\">//为启动的容器安装nginx</span></span><br><span class=\"line\">　　<span class=\"number\">4</span><span class=\"selector-class\">.exit</span>　　<span class=\"comment\">//退出该容器，回到宿主机环境</span></span><br><span class=\"line\">　　<span class=\"number\">5</span><span class=\"selector-class\">.docker</span> commit 容器ID zx/nginx　　<span class=\"comment\">//将上次创建的窗口ID当作映像提交到本地,zrs是repository名称,nginx是image名称</span></span><br><span class=\"line\">　　<span class=\"number\">6</span><span class=\"selector-class\">.docker</span> images　　<span class=\"comment\">//可以查看到上步提交的映像</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h6><p>　　　　1.一定要区分开容器和映像的区别；</p>\n<p>　　　　2.有了zx/nginx后，下次可以直接使用该映像来启动容器，而不用为这个容器安装nginx;</p>\n<p>　　　　3.docker commit -m=”this is a container contains nginx” –author=”zx” 容器ID zx/nginx，类似git不作多余解释；</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-09-10T01:31:08.375Z","updated":"2020-09-10T01:31:08.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0w0t23000mfipv82sdgk8f","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"k8s重新生成Tocken并加入集群","date":"2020-09-10T06:23:09.000Z","_content":"#### 生成Token以及ca证书sha256hash值\n```java\n[root@node1 ~]# kubeadm token create --print-join-command \nW0710 09:11:07.688855   62169 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]\nkubeadm join 1.1.1.5:6443 --token 1cpem4.adim7zc1fqi4x1px     --discovery-token-ca-cert-hash sha256:9c4f217b0a12781be5c49262aa58738f873e7e0037719eeb0adeb7293bcdc1ca \n```\n#### 如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录\n```java\n[root@node3 ~]# rm -rf /etc/kubernetes/\n[root@node2 ~]# netstat -anpt | grep 10250\ntcp6       0      0 :::10250                :::*                    LISTEN      9992/kubelet        \n[root@node2 ~]# kill -9 9992\n```\n#### node加入集群\n复制生成的值\n```java\nkubeadm join 1.1.1.5:6443 --token 1cpem4.adim7zc1fqi4x1px     --discovery-token-ca-cert-hash sha256:9c4f217b0a12781be5c49262aa58738f873e7e0037719eeb0adeb7293bcdc1ca \n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/k8s重新生成Tocken并加入集群.md","raw":"---\ntitle: k8s重新生成Tocken并加入集群\ndate: 2020-09-10 14:23:09\ncategories: Kubernetes\ntags:\n    - Kubetnetes\n---\n#### 生成Token以及ca证书sha256hash值\n```java\n[root@node1 ~]# kubeadm token create --print-join-command \nW0710 09:11:07.688855   62169 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]\nkubeadm join 1.1.1.5:6443 --token 1cpem4.adim7zc1fqi4x1px     --discovery-token-ca-cert-hash sha256:9c4f217b0a12781be5c49262aa58738f873e7e0037719eeb0adeb7293bcdc1ca \n```\n#### 如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录\n```java\n[root@node3 ~]# rm -rf /etc/kubernetes/\n[root@node2 ~]# netstat -anpt | grep 10250\ntcp6       0      0 :::10250                :::*                    LISTEN      9992/kubelet        \n[root@node2 ~]# kill -9 9992\n```\n#### node加入集群\n复制生成的值\n```java\nkubeadm join 1.1.1.5:6443 --token 1cpem4.adim7zc1fqi4x1px     --discovery-token-ca-cert-hash sha256:9c4f217b0a12781be5c49262aa58738f873e7e0037719eeb0adeb7293bcdc1ca \n```\n\n\n\n\n\n\n\n\n\n\n","slug":"k8s重新生成Tocken并加入集群","published":1,"updated":"2020-09-10T06:26:33.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0w0t24000rfipv5m7t2vkw","content":"<h4 id=\"生成Token以及ca证书sha256hash值\"><a href=\"#生成Token以及ca证书sha256hash值\" class=\"headerlink\" title=\"生成Token以及ca证书sha256hash值\"></a>生成Token以及ca证书sha256hash值</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node1 ~]# kubeadm token create --print-join-command </span><br><span class=\"line\">W0710 <span class=\"number\">09</span>:<span class=\"number\">11</span>:<span class=\"number\">07</span>.<span class=\"number\">688855</span>   <span class=\"number\">62169</span> configset.go:<span class=\"number\">202</span>] WARNING: kubeadm cannot validate component configs <span class=\"keyword\">for</span> API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]</span><br><span class=\"line\">kubeadm join <span class=\"number\">1.1</span>.<span class=\"number\">1.5</span>:<span class=\"number\">6443</span> --token <span class=\"number\">1</span>cpem4.adim7zc1fqi4x1px     --discovery-token-ca-cert-hash sha256:<span class=\"number\">9</span>c4f217b0a12781be5c49262aa58738f873e7e0037719eeb0adeb7293bcdc1ca </span><br></pre></td></tr></table></figure>\n<h4 id=\"如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录\"><a href=\"#如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录\" class=\"headerlink\" title=\"如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录\"></a>如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node3 ~]# rm -rf /etc/kubernetes/</span><br><span class=\"line\">[root@node2 ~]# netstat -anpt | grep 10250</span><br><span class=\"line\">tcp6       <span class=\"number\">0</span>      <span class=\"number\">0</span> :::<span class=\"number\">10250</span>                :::*                    LISTEN      <span class=\"number\">9992</span>/kubelet        </span><br><span class=\"line\">[root@node2 ~]# kill -9 9992</span><br></pre></td></tr></table></figure>\n<h4 id=\"node加入集群\"><a href=\"#node加入集群\" class=\"headerlink\" title=\"node加入集群\"></a>node加入集群</h4><p>复制生成的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join <span class=\"number\">1.1</span>.<span class=\"number\">1.5</span>:<span class=\"number\">6443</span> --token <span class=\"number\">1</span>cpem4.adim7zc1fqi4x1px     --discovery-token-ca-cert-hash sha256:<span class=\"number\">9</span>c4f217b0a12781be5c49262aa58738f873e7e0037719eeb0adeb7293bcdc1ca </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"生成Token以及ca证书sha256hash值\"><a href=\"#生成Token以及ca证书sha256hash值\" class=\"headerlink\" title=\"生成Token以及ca证书sha256hash值\"></a>生成Token以及ca证书sha256hash值</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node1 ~]# kubeadm token create --print-join-command </span><br><span class=\"line\">W0710 <span class=\"number\">09</span>:<span class=\"number\">11</span>:<span class=\"number\">07</span>.<span class=\"number\">688855</span>   <span class=\"number\">62169</span> configset.go:<span class=\"number\">202</span>] WARNING: kubeadm cannot validate component configs <span class=\"keyword\">for</span> API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]</span><br><span class=\"line\">kubeadm join <span class=\"number\">1.1</span>.<span class=\"number\">1.5</span>:<span class=\"number\">6443</span> --token <span class=\"number\">1</span>cpem4.adim7zc1fqi4x1px     --discovery-token-ca-cert-hash sha256:<span class=\"number\">9</span>c4f217b0a12781be5c49262aa58738f873e7e0037719eeb0adeb7293bcdc1ca </span><br></pre></td></tr></table></figure>\n<h4 id=\"如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录\"><a href=\"#如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录\" class=\"headerlink\" title=\"如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录\"></a>如果之前怡景加入过集群需要关闭10250端口以及删除K8S目录</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@node3 ~]# rm -rf /etc/kubernetes/</span><br><span class=\"line\">[root@node2 ~]# netstat -anpt | grep 10250</span><br><span class=\"line\">tcp6       <span class=\"number\">0</span>      <span class=\"number\">0</span> :::<span class=\"number\">10250</span>                :::*                    LISTEN      <span class=\"number\">9992</span>/kubelet        </span><br><span class=\"line\">[root@node2 ~]# kill -9 9992</span><br></pre></td></tr></table></figure>\n<h4 id=\"node加入集群\"><a href=\"#node加入集群\" class=\"headerlink\" title=\"node加入集群\"></a>node加入集群</h4><p>复制生成的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join <span class=\"number\">1.1</span>.<span class=\"number\">1.5</span>:<span class=\"number\">6443</span> --token <span class=\"number\">1</span>cpem4.adim7zc1fqi4x1px     --discovery-token-ca-cert-hash sha256:<span class=\"number\">9</span>c4f217b0a12781be5c49262aa58738f873e7e0037719eeb0adeb7293bcdc1ca </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n"},{"title":"升级Openssh详细步骤","author":"Semaik.","date":"2020-09-11T07:34:00.000Z","_content":"#### 1、准备工作\n\n1.1、下载相关软件包\n\n> OpenSSH需要依赖ZLIB和OpenSSL，因此需要从官网下载三者的源码包。需要注意的是：OpenSSH最新版8.1p1依赖的OpenSSL版本为1.0.2k，而不是其最新版1.1.0e（使用此版会升级失败）,ZLIB可以使用最新 版1.2.11。 \n\n三者源码下载地址：\n\n     http://www.zlib.net/\n     http://www.openssl.org/\n     http://www.openssh.org/\n\n1.2、查看系统当前软件版本\n\n    # rpm -q zlib\n    # openssl version\n    # ssh -V\n\n1.3、配置在线yum源\n```\n# cd /etc/yum.repos.d\n# rm -rf *             #删除当前所有yum源文件\n\n# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo   #连接阿里云在线源\n```\n\n1.4、安装telnet服务并启用\n\n   > 因升级OpenSSH过程中需要卸载现有OpenSSH, 因此为了保持服务器的远程连接可用，需要启用telnet服务作为替代，如升级出现问题，也可通过telnet登录服务器进行回退。\n\n   A、安装telnet服务\n```\n   # yum -y install telnet-server*\n```\n   B、启用telnet\n\n   先关闭防火墙，否则telnet可能无法连接\n```\n# service iptables stop\n# chkconfig iptables off\n# vi /etc/xinetd.d/telnet\n将其中disable字段的yes改为no以启用telnet服务\n# mv /etc/securetty /etc/securetty.old          #允许root用户通过telnet登录\n# /etc/init.d/xinetd start       #启动telnet服务\n# chkconfig xinetd on              #使telnet服务开机启动，避免升级过程中服务器意外重启后无法远程登录系统\n# telnet [ip]                 #新开启一个远程终端以telnet登录验证是否成功启用\n```\n1.5、安装编译所需工具包\n```\n# yum -y install gcc pam-devel zlib-devel\n```\n\n#### 2、正式升级\n\n2.1、升级ZLIB\n\nA、解压zlib_1.2.11源码并编译\n```\n# tar -zxvf zlib-1.2.11.tar.gz\n# cd zlib-1.2.11\n# ./configure --prefix=/usr\n# make\n```\nB、卸载当前zlib\n\n> 注意：此步骤必须在步骤A执行完毕后再执行，否则先卸载zlib后，/lib64/目录下的zlib相关库文件会被删除，步骤A编译zlib会失败。\n```\n# rpm -e --nodeps zlib \n```\n\nC、安装之前编译好的zlib \n```\n# make install \n```\n在zlib编译目录执行如下命令\n\nD、共享库注册\n\n> zlib安装完成后，会在/usr/lib目录中生产zlib相关库文件，需要将这些共享库文件注册到系统中。\n```\n# echo '/usr/lib' >> /etc/ld.so.conf\n# ldconfig #更新共享库cache\n```\n\n2.2、升级OpenSSL\n\nA、备份当前openssl\n```\n# find / -name openssl\n  /usr/lib64/openssl\n  /usr/bin/openssl\n  /etc/pki/ca-trust/extracted/openssl\n\n# mv /usr/lib64/openssl /usr/lib64/openssl.old\n# mv /usr/bin/openssl /usr/bin/openssl.old\n# mv /etc/pki/ca-trust/extracted/openssl /etc/pki/ca-trust/extracted/openssl.old\n\n如下两个库文件必须先备份，因系统内部分工具（如yum、wget等）依赖此库，而新版OpenSSL不包含这两个库\n# cp /usr/lib64/libcrypto.so.10 /usr/lib64/libcrypto.so.10.old\n# cp /usr/lib64/libssl.so.10 /usr/lib64/libssl.so.10.old\n\n```\nB、卸载当前openssl\n```\n# rpm -qa | grep openssl\n   openssl-1.0.1e-42.el6.x86_64\n\n# rpm -e --nodeps openssl-1.0.1e-42.el6.x86_64\n# rpm -qa | grep openssl\n```\n\nC、解压openssl_1.0.2k源码并编译安装\n```\n# tar -zxvf openssl-1.0.2k.tar.gz\n# cd openssl-1.0.2k\n# ./config --prefix=/usr --openssldir=/etc/ssl --shared zlib                                #必须加上--shared，否则编译时会找不到新安装的openssl的库而报错\n# make\n# make test                             #必须执行这一步结果为pass才能继续，否则即使安装完成，ssh也无法使用\n# make install\n# openssl version -a                           #查看是否升级成功\n```\n\nD、恢复共享库\n\n> 由于OpenSSL_1.0.2k不提供libcrypto.so.10和libssl.so.10这两个库，而yum、wget等工具又依赖此库，因此需要将先前备份的这两个库进行恢复，其他的可视情况考虑是否恢复。\n```\n# mv /usr/lib64/libcrypto.so.10.old  /usr/lib64/libcrypto.so.10\n# mv /usr/lib64/libssl.so.10.old   /usr/lib64/libssl.so.\n```\n\n2.3、升级OpenSSH\n\nA、备份当前openssh\n```\n# mv /etc/ssh  /etc/ssh.old\n```\n\nB、卸载当前openssh\n```\n# rpm -qa | grep openssh\nopenssh-clients-5.3p1-111.el6.x86_64\nopenssh-server-5.3p1-111.el6.x86_64\nopenssh-5.3p1-111.el6.x86_64\nopenssh-askpass-5.3p1-111.el6.x86_64\n\n# rpm -e --nodeps openssh-5.3p1-111.el6.x86_64\n# rpm -e --nodeps openssh-server-5.3p1-111.el6.x86_64\n# rpm -e --nodeps openssh-clients-5.3p1-111.el6.x86_64\n# rpm -e --nodeps openssh-askpass-5.3p1-111.el6.x86_64\n# rpm -qa | grep openssh                # 查看是否卸载成功\n```\n\nC、openssh安装前环境配置\n```\n# install -v -m700 -d /var/lib/sshd\n# chown -v root:sys /var/lib/sshd\n# groupadd -g 50 sshd\n# useradd -c 'sshd PrivSep' -d /var/lib/sshd -g sshd -s /bin/false -u 50 sshd\n```\n\nD、解压openssh_7.4p1源码并编译安装\n```\n# tar -zxvf openssh-8.1p1.tar.gz\n# cd openssh-8.1p1\n# ./configure --prefix=/usr --sysconfdir=/etc/ssh --with-md5-passwords --with-pam --with-zlib --with-openssl-includes=/usr --with-privsep-path=/var/lib/sshd\n# make\n# make install\n```\n\nE、openssh安装后环境配置\n```\n# 在openssh编译目录执行如下命令\n# install -v -m755 contrib/ssh-copy-id /usr/bin\n# install -v -m644 contrib/ssh-copy-id.1 /usr/share/man/man1\n# install -v -m755 -d /usr/share/doc/openssh-8.1p1\n# install -v -m644 INSTALL LICENCE OVERVIEW README* /usr/share/doc/openssh-8.1p1\n# ssh -V #验证是否升级成功\n```\n\nF、启用OpenSSH服务\n```\n# 在openssh编译目录执行如下目录\n# echo 'X11Forwarding yes' >> /etc/ssh/sshd_config\n# echo \"PermitRootLogin yes\" >> /etc/ssh/sshd_config #允许root用户通过ssh登录\n# cp -p contrib/redhat/sshd.init /etc/init.d/sshd\n# chmod +x /etc/init.d/sshd\n# chkconfig --add sshd\n# chkconfig sshd on\n# chkconfig --list sshd\n# /etc/init.d/sshd restart\n```\n> 注意：如果升级操作一直是在ssh远程会话中进行的，上述sshd服务重启命令可能导致会话断开并无法使用ssh再行登入（即ssh未能成功重启），此时需要通过telnet登入再执行sshd服务重启命令。\n\n \n\n#### 3、善后工作\n\n > 新开启远程终端以ssh [ip]登录系统，确认一切正常升级成功后，只需关闭telnet服务以保证系统安全性即可。\n```\n# mv /etc/securetty.old  /etc/securetty\n# chkconfig xinetd off\n# /etc/init.d/xinetd stop\n```","source":"_posts/升级Openssh详细步骤.md","raw":"title: 升级Openssh详细步骤\nauthor: Semaik.\ntags:\n  - Linux\ncategories:\n  - Linux\ndate: 2020-09-11 15:34:00\n---\n#### 1、准备工作\n\n1.1、下载相关软件包\n\n> OpenSSH需要依赖ZLIB和OpenSSL，因此需要从官网下载三者的源码包。需要注意的是：OpenSSH最新版8.1p1依赖的OpenSSL版本为1.0.2k，而不是其最新版1.1.0e（使用此版会升级失败）,ZLIB可以使用最新 版1.2.11。 \n\n三者源码下载地址：\n\n     http://www.zlib.net/\n     http://www.openssl.org/\n     http://www.openssh.org/\n\n1.2、查看系统当前软件版本\n\n    # rpm -q zlib\n    # openssl version\n    # ssh -V\n\n1.3、配置在线yum源\n```\n# cd /etc/yum.repos.d\n# rm -rf *             #删除当前所有yum源文件\n\n# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo   #连接阿里云在线源\n```\n\n1.4、安装telnet服务并启用\n\n   > 因升级OpenSSH过程中需要卸载现有OpenSSH, 因此为了保持服务器的远程连接可用，需要启用telnet服务作为替代，如升级出现问题，也可通过telnet登录服务器进行回退。\n\n   A、安装telnet服务\n```\n   # yum -y install telnet-server*\n```\n   B、启用telnet\n\n   先关闭防火墙，否则telnet可能无法连接\n```\n# service iptables stop\n# chkconfig iptables off\n# vi /etc/xinetd.d/telnet\n将其中disable字段的yes改为no以启用telnet服务\n# mv /etc/securetty /etc/securetty.old          #允许root用户通过telnet登录\n# /etc/init.d/xinetd start       #启动telnet服务\n# chkconfig xinetd on              #使telnet服务开机启动，避免升级过程中服务器意外重启后无法远程登录系统\n# telnet [ip]                 #新开启一个远程终端以telnet登录验证是否成功启用\n```\n1.5、安装编译所需工具包\n```\n# yum -y install gcc pam-devel zlib-devel\n```\n\n#### 2、正式升级\n\n2.1、升级ZLIB\n\nA、解压zlib_1.2.11源码并编译\n```\n# tar -zxvf zlib-1.2.11.tar.gz\n# cd zlib-1.2.11\n# ./configure --prefix=/usr\n# make\n```\nB、卸载当前zlib\n\n> 注意：此步骤必须在步骤A执行完毕后再执行，否则先卸载zlib后，/lib64/目录下的zlib相关库文件会被删除，步骤A编译zlib会失败。\n```\n# rpm -e --nodeps zlib \n```\n\nC、安装之前编译好的zlib \n```\n# make install \n```\n在zlib编译目录执行如下命令\n\nD、共享库注册\n\n> zlib安装完成后，会在/usr/lib目录中生产zlib相关库文件，需要将这些共享库文件注册到系统中。\n```\n# echo '/usr/lib' >> /etc/ld.so.conf\n# ldconfig #更新共享库cache\n```\n\n2.2、升级OpenSSL\n\nA、备份当前openssl\n```\n# find / -name openssl\n  /usr/lib64/openssl\n  /usr/bin/openssl\n  /etc/pki/ca-trust/extracted/openssl\n\n# mv /usr/lib64/openssl /usr/lib64/openssl.old\n# mv /usr/bin/openssl /usr/bin/openssl.old\n# mv /etc/pki/ca-trust/extracted/openssl /etc/pki/ca-trust/extracted/openssl.old\n\n如下两个库文件必须先备份，因系统内部分工具（如yum、wget等）依赖此库，而新版OpenSSL不包含这两个库\n# cp /usr/lib64/libcrypto.so.10 /usr/lib64/libcrypto.so.10.old\n# cp /usr/lib64/libssl.so.10 /usr/lib64/libssl.so.10.old\n\n```\nB、卸载当前openssl\n```\n# rpm -qa | grep openssl\n   openssl-1.0.1e-42.el6.x86_64\n\n# rpm -e --nodeps openssl-1.0.1e-42.el6.x86_64\n# rpm -qa | grep openssl\n```\n\nC、解压openssl_1.0.2k源码并编译安装\n```\n# tar -zxvf openssl-1.0.2k.tar.gz\n# cd openssl-1.0.2k\n# ./config --prefix=/usr --openssldir=/etc/ssl --shared zlib                                #必须加上--shared，否则编译时会找不到新安装的openssl的库而报错\n# make\n# make test                             #必须执行这一步结果为pass才能继续，否则即使安装完成，ssh也无法使用\n# make install\n# openssl version -a                           #查看是否升级成功\n```\n\nD、恢复共享库\n\n> 由于OpenSSL_1.0.2k不提供libcrypto.so.10和libssl.so.10这两个库，而yum、wget等工具又依赖此库，因此需要将先前备份的这两个库进行恢复，其他的可视情况考虑是否恢复。\n```\n# mv /usr/lib64/libcrypto.so.10.old  /usr/lib64/libcrypto.so.10\n# mv /usr/lib64/libssl.so.10.old   /usr/lib64/libssl.so.\n```\n\n2.3、升级OpenSSH\n\nA、备份当前openssh\n```\n# mv /etc/ssh  /etc/ssh.old\n```\n\nB、卸载当前openssh\n```\n# rpm -qa | grep openssh\nopenssh-clients-5.3p1-111.el6.x86_64\nopenssh-server-5.3p1-111.el6.x86_64\nopenssh-5.3p1-111.el6.x86_64\nopenssh-askpass-5.3p1-111.el6.x86_64\n\n# rpm -e --nodeps openssh-5.3p1-111.el6.x86_64\n# rpm -e --nodeps openssh-server-5.3p1-111.el6.x86_64\n# rpm -e --nodeps openssh-clients-5.3p1-111.el6.x86_64\n# rpm -e --nodeps openssh-askpass-5.3p1-111.el6.x86_64\n# rpm -qa | grep openssh                # 查看是否卸载成功\n```\n\nC、openssh安装前环境配置\n```\n# install -v -m700 -d /var/lib/sshd\n# chown -v root:sys /var/lib/sshd\n# groupadd -g 50 sshd\n# useradd -c 'sshd PrivSep' -d /var/lib/sshd -g sshd -s /bin/false -u 50 sshd\n```\n\nD、解压openssh_7.4p1源码并编译安装\n```\n# tar -zxvf openssh-8.1p1.tar.gz\n# cd openssh-8.1p1\n# ./configure --prefix=/usr --sysconfdir=/etc/ssh --with-md5-passwords --with-pam --with-zlib --with-openssl-includes=/usr --with-privsep-path=/var/lib/sshd\n# make\n# make install\n```\n\nE、openssh安装后环境配置\n```\n# 在openssh编译目录执行如下命令\n# install -v -m755 contrib/ssh-copy-id /usr/bin\n# install -v -m644 contrib/ssh-copy-id.1 /usr/share/man/man1\n# install -v -m755 -d /usr/share/doc/openssh-8.1p1\n# install -v -m644 INSTALL LICENCE OVERVIEW README* /usr/share/doc/openssh-8.1p1\n# ssh -V #验证是否升级成功\n```\n\nF、启用OpenSSH服务\n```\n# 在openssh编译目录执行如下目录\n# echo 'X11Forwarding yes' >> /etc/ssh/sshd_config\n# echo \"PermitRootLogin yes\" >> /etc/ssh/sshd_config #允许root用户通过ssh登录\n# cp -p contrib/redhat/sshd.init /etc/init.d/sshd\n# chmod +x /etc/init.d/sshd\n# chkconfig --add sshd\n# chkconfig sshd on\n# chkconfig --list sshd\n# /etc/init.d/sshd restart\n```\n> 注意：如果升级操作一直是在ssh远程会话中进行的，上述sshd服务重启命令可能导致会话断开并无法使用ssh再行登入（即ssh未能成功重启），此时需要通过telnet登入再执行sshd服务重启命令。\n\n \n\n#### 3、善后工作\n\n > 新开启远程终端以ssh [ip]登录系统，确认一切正常升级成功后，只需关闭telnet服务以保证系统安全性即可。\n```\n# mv /etc/securetty.old  /etc/securetty\n# chkconfig xinetd off\n# /etc/init.d/xinetd stop\n```","slug":"升级Openssh详细步骤","published":1,"updated":"2020-09-13T01:45:22.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0w0t25000tfipv85ozhq77","content":"<h4 id=\"1、准备工作\"><a href=\"#1、准备工作\" class=\"headerlink\" title=\"1、准备工作\"></a>1、准备工作</h4><p>1.1、下载相关软件包</p>\n<blockquote>\n<p>OpenSSH需要依赖ZLIB和OpenSSL，因此需要从官网下载三者的源码包。需要注意的是：OpenSSH最新版8.1p1依赖的OpenSSL版本为1.0.2k，而不是其最新版1.1.0e（使用此版会升级失败）,ZLIB可以使用最新 版1.2.11。 </p>\n</blockquote>\n<p>三者源码下载地址：</p>\n<pre><code> http://www.zlib.net/\n http://www.openssl.org/\n http://www.openssh.org/</code></pre>\n<p>1.2、查看系统当前软件版本</p>\n<pre><code># rpm -q zlib\n# openssl version\n# ssh -V</code></pre>\n<p>1.3、配置在线yum源</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd <span class=\"regexp\">/etc/yum</span>.repos.d</span><br><span class=\"line\"># rm -rf *             #删除当前所有yum源文件</span><br><span class=\"line\"></span><br><span class=\"line\"># wget -O <span class=\"regexp\">/etc/yum</span>.repos.d<span class=\"regexp\">/CentOS-Base.repo http:/</span><span class=\"regexp\">/mirrors.aliyun.com/</span>repo/Centos-<span class=\"number\">6</span>.repo   #连接阿里云在线源</span><br></pre></td></tr></table></figure>\n\n<p>1.4、安装telnet服务并启用</p>\n<blockquote>\n<p>因升级OpenSSH过程中需要卸载现有OpenSSH, 因此为了保持服务器的远程连接可用，需要启用telnet服务作为替代，如升级出现问题，也可通过telnet登录服务器进行回退。</p>\n</blockquote>\n<p>   A、安装telnet服务</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># yum -y install telnet-server*</span></span><br></pre></td></tr></table></figure>\n<p>   B、启用telnet</p>\n<p>   先关闭防火墙，否则telnet可能无法连接</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># service iptables stop</span></span><br><span class=\"line\"><span class=\"meta\"># chkconfig iptables off</span></span><br><span class=\"line\"><span class=\"meta\"># vi /etc/xinetd.d/telnet</span></span><br><span class=\"line\">将其中disable字段的yes改为no以启用telnet服务</span><br><span class=\"line\"><span class=\"meta\"># mv /etc/securetty /etc/securetty.old          #允许root用户通过telnet登录</span></span><br><span class=\"line\"><span class=\"meta\"># /etc/init.d/xinetd start       #启动telnet服务</span></span><br><span class=\"line\"><span class=\"meta\"># chkconfig xinetd on              #使telnet服务开机启动，避免升级过程中服务器意外重启后无法远程登录系统</span></span><br><span class=\"line\"><span class=\"meta\"># telnet [ip]                 #新开启一个远程终端以telnet登录验证是否成功启用</span></span><br></pre></td></tr></table></figure>\n<p>1.5、安装编译所需工具包</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># yum -y install gcc pam-devel zlib-devel</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、正式升级\"><a href=\"#2、正式升级\" class=\"headerlink\" title=\"2、正式升级\"></a>2、正式升级</h4><p>2.1、升级ZLIB</p>\n<p>A、解压zlib_1.2.11源码并编译</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># tar -zxvf zlib-1.2.11.tar.gz</span></span><br><span class=\"line\"><span class=\"meta\"># cd zlib-1.2.11</span></span><br><span class=\"line\"><span class=\"meta\"># ./configure --prefix=/usr</span></span><br><span class=\"line\"><span class=\"meta\"># make</span></span><br></pre></td></tr></table></figure>\n<p>B、卸载当前zlib</p>\n<blockquote>\n<p>注意：此步骤必须在步骤A执行完毕后再执行，否则先卸载zlib后，/lib64/目录下的zlib相关库文件会被删除，步骤A编译zlib会失败。</p>\n</blockquote>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># rpm -e --nodeps zlib </span></span><br></pre></td></tr></table></figure>\n\n<p>C、安装之前编译好的zlib </p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># make install </span></span><br></pre></td></tr></table></figure>\n<p>在zlib编译目录执行如下命令</p>\n<p>D、共享库注册</p>\n<blockquote>\n<p>zlib安装完成后，会在/usr/lib目录中生产zlib相关库文件，需要将这些共享库文件注册到系统中。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/usr/lib&#x27;</span> &gt;&gt; /etc/ld.so.conf</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ldconfig <span class=\"comment\">#更新共享库cache</span></span></span><br></pre></td></tr></table></figure>\n\n<p>2.2、升级OpenSSL</p>\n<p>A、备份当前openssl</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"keyword\">find</span> / -name openssl</span><br><span class=\"line\">  <span class=\"regexp\">/usr/</span>lib64/openssl</span><br><span class=\"line\">  <span class=\"regexp\">/usr/</span>bin/openssl</span><br><span class=\"line\">  <span class=\"regexp\">/etc/</span>pki<span class=\"regexp\">/ca-trust/</span>extracted/openssl</span><br><span class=\"line\"></span><br><span class=\"line\"># mv <span class=\"regexp\">/usr/</span>lib64<span class=\"regexp\">/openssl /u</span>sr<span class=\"regexp\">/lib64/</span>openssl.old</span><br><span class=\"line\"># mv <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/openssl /u</span>sr<span class=\"regexp\">/bin/</span>openssl.old</span><br><span class=\"line\"># mv <span class=\"regexp\">/etc/</span>pki<span class=\"regexp\">/ca-trust/</span>extracted<span class=\"regexp\">/openssl /</span>etc<span class=\"regexp\">/pki/</span>ca-trust<span class=\"regexp\">/extracted/</span>openssl.old</span><br><span class=\"line\"></span><br><span class=\"line\">如下两个库文件必须先备份，因系统内部分工具（如yum、wget等）依赖此库，而新版OpenSSL不包含这两个库</span><br><span class=\"line\"># cp <span class=\"regexp\">/usr/</span>lib64<span class=\"regexp\">/libcrypto.so.10 /u</span>sr<span class=\"regexp\">/lib64/</span>libcrypto.so.<span class=\"number\">10</span>.old</span><br><span class=\"line\"># cp <span class=\"regexp\">/usr/</span>lib64<span class=\"regexp\">/libssl.so.10 /u</span>sr<span class=\"regexp\">/lib64/</span>libssl.so.<span class=\"number\">10</span>.old</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>B、卸载当前openssl</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qa | grep openssl</span></span><br><span class=\"line\">   <span class=\"attribute\">openssl</span>-<span class=\"number\">1</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>e-<span class=\"number\">42</span>.el<span class=\"number\">6</span>.x<span class=\"number\">86</span>_<span class=\"number\">64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rpm -e --nodeps openssl-1.0.1e-42.el6.x86_64</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -qa | grep openssl</span></span><br></pre></td></tr></table></figure>\n\n<p>C、解压openssl_1.0.2k源码并编译安装</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># tar -zxvf openssl-1.0.2k.tar.gz</span></span><br><span class=\"line\"><span class=\"meta\"># cd openssl-1.0.2k</span></span><br><span class=\"line\"><span class=\"meta\"># ./config --prefix=/usr --openssldir=/etc/ssl --shared zlib                                #必须加上--shared，否则编译时会找不到新安装的openssl的库而报错</span></span><br><span class=\"line\"><span class=\"meta\"># make</span></span><br><span class=\"line\"><span class=\"meta\"># make test                             #必须执行这一步结果为pass才能继续，否则即使安装完成，ssh也无法使用</span></span><br><span class=\"line\"><span class=\"meta\"># make install</span></span><br><span class=\"line\"><span class=\"meta\"># openssl version -a                           #查看是否升级成功</span></span><br></pre></td></tr></table></figure>\n\n<p>D、恢复共享库</p>\n<blockquote>\n<p>由于OpenSSL_1.0.2k不提供libcrypto.so.10和libssl.so.10这两个库，而yum、wget等工具又依赖此库，因此需要将先前备份的这两个库进行恢复，其他的可视情况考虑是否恢复。</p>\n</blockquote>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mv <span class=\"regexp\">/usr/</span>lib64<span class=\"regexp\">/libcrypto.so.10.old  /u</span>sr<span class=\"regexp\">/lib64/</span>libcrypto.so.<span class=\"number\">10</span></span><br><span class=\"line\"># mv <span class=\"regexp\">/usr/</span>lib64<span class=\"regexp\">/libssl.so.10.old   /u</span>sr<span class=\"regexp\">/lib64/</span>libssl.so.</span><br></pre></td></tr></table></figure>\n\n<p>2.3、升级OpenSSH</p>\n<p>A、备份当前openssh</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mv <span class=\"regexp\">/etc/</span>ssh  <span class=\"regexp\">/etc/</span>ssh.old</span><br></pre></td></tr></table></figure>\n\n<p>B、卸载当前openssh</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qa | grep openssh</span></span><br><span class=\"line\"><span class=\"attribute\">openssh</span>-clients-<span class=\"number\">5</span>.<span class=\"number\">3</span>p<span class=\"number\">1</span>-<span class=\"number\">111</span>.el<span class=\"number\">6</span>.x<span class=\"number\">86</span>_<span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"attribute\">openssh</span>-server-<span class=\"number\">5</span>.<span class=\"number\">3</span>p<span class=\"number\">1</span>-<span class=\"number\">111</span>.el<span class=\"number\">6</span>.x<span class=\"number\">86</span>_<span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"attribute\">openssh</span>-<span class=\"number\">5</span>.<span class=\"number\">3</span>p<span class=\"number\">1</span>-<span class=\"number\">111</span>.el<span class=\"number\">6</span>.x<span class=\"number\">86</span>_<span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"attribute\">openssh</span>-askpass-<span class=\"number\">5</span>.<span class=\"number\">3</span>p<span class=\"number\">1</span>-<span class=\"number\">111</span>.el<span class=\"number\">6</span>.x<span class=\"number\">86</span>_<span class=\"number\">64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rpm -e --nodeps openssh-5.3p1-111.el6.x86_64</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -e --nodeps openssh-server-5.3p1-111.el6.x86_64</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -e --nodeps openssh-clients-5.3p1-111.el6.x86_64</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -e --nodeps openssh-askpass-5.3p1-111.el6.x86_64</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -qa | grep openssh                # 查看是否卸载成功</span></span><br></pre></td></tr></table></figure>\n\n<p>C、openssh安装前环境配置</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># install -v -m700 -d <span class=\"regexp\">/var/</span>lib/sshd</span><br><span class=\"line\"># chown -v root:sys <span class=\"regexp\">/var/</span>lib/sshd</span><br><span class=\"line\"># groupadd -g <span class=\"number\">50</span> sshd</span><br><span class=\"line\"># useradd -c <span class=\"string\">&#x27;sshd PrivSep&#x27;</span> -d <span class=\"regexp\">/var/</span>lib<span class=\"regexp\">/sshd -g sshd -s /</span>bin/<span class=\"keyword\">false</span> -u <span class=\"number\">50</span> sshd</span><br></pre></td></tr></table></figure>\n\n<p>D、解压openssh_7.4p1源码并编译安装</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tar -zxvf openssh<span class=\"number\">-8.1</span>p1.tar.gz</span><br><span class=\"line\"># cd openssh<span class=\"number\">-8.1</span>p1</span><br><span class=\"line\"># ./configure --prefix=/usr --sysconfdir=/etc/ssh --<span class=\"keyword\">with</span>-md5-passwords --<span class=\"keyword\">with</span>-pam --<span class=\"keyword\">with</span>-zlib --<span class=\"keyword\">with</span>-openssl-includes=/usr --<span class=\"keyword\">with</span>-privsep-path=/var/lib/sshd</span><br><span class=\"line\"># make</span><br><span class=\"line\"># make install</span><br></pre></td></tr></table></figure>\n\n<p>E、openssh安装后环境配置</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在openssh编译目录执行如下命令</span><br><span class=\"line\"># install -v -m755 contrib<span class=\"regexp\">/ssh-copy-id /u</span>sr/bin</span><br><span class=\"line\"># install -v -m644 contrib<span class=\"regexp\">/ssh-copy-id.1 /u</span>sr<span class=\"regexp\">/share/m</span>an/man1</span><br><span class=\"line\"># install -v -m755 -d <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/doc/</span>openssh-<span class=\"number\">8.1</span>p1</span><br><span class=\"line\"># install -v -m644 INSTALL LICENCE OVERVIEW README* <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/doc/</span>openssh-<span class=\"number\">8.1</span>p1</span><br><span class=\"line\"># ssh -V #验证是否升级成功</span><br></pre></td></tr></table></figure>\n\n<p>F、启用OpenSSH服务</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 在openssh编译目录执行如下目录</span></span><br><span class=\"line\"><span class=\"meta\"># echo &#x27;X11Forwarding yes&#x27; &gt;&gt; /etc/ssh/sshd_config</span></span><br><span class=\"line\"><span class=\"meta\"># echo &quot;PermitRootLogin yes&quot; &gt;&gt; /etc/ssh/sshd_config #允许root用户通过ssh登录</span></span><br><span class=\"line\"><span class=\"meta\"># cp -p contrib/redhat/sshd.init /etc/init.d/sshd</span></span><br><span class=\"line\"><span class=\"meta\"># chmod +x /etc/init.d/sshd</span></span><br><span class=\"line\"><span class=\"meta\"># chkconfig --add sshd</span></span><br><span class=\"line\"><span class=\"meta\"># chkconfig sshd on</span></span><br><span class=\"line\"><span class=\"meta\"># chkconfig --list sshd</span></span><br><span class=\"line\"><span class=\"meta\"># /etc/init.d/sshd restart</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：如果升级操作一直是在ssh远程会话中进行的，上述sshd服务重启命令可能导致会话断开并无法使用ssh再行登入（即ssh未能成功重启），此时需要通过telnet登入再执行sshd服务重启命令。</p>\n</blockquote>\n<h4 id=\"3、善后工作\"><a href=\"#3、善后工作\" class=\"headerlink\" title=\"3、善后工作\"></a>3、善后工作</h4><blockquote>\n<p>新开启远程终端以ssh [ip]登录系统，确认一切正常升级成功后，只需关闭telnet服务以保证系统安全性即可。</p>\n</blockquote>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mv <span class=\"regexp\">/etc/</span>securetty.old  <span class=\"regexp\">/etc/</span>securetty</span><br><span class=\"line\"># chkconfig xinetd off</span><br><span class=\"line\"># <span class=\"regexp\">/etc/i</span>nit.d/xinetd stop</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、准备工作\"><a href=\"#1、准备工作\" class=\"headerlink\" title=\"1、准备工作\"></a>1、准备工作</h4><p>1.1、下载相关软件包</p>\n<blockquote>\n<p>OpenSSH需要依赖ZLIB和OpenSSL，因此需要从官网下载三者的源码包。需要注意的是：OpenSSH最新版8.1p1依赖的OpenSSL版本为1.0.2k，而不是其最新版1.1.0e（使用此版会升级失败）,ZLIB可以使用最新 版1.2.11。 </p>\n</blockquote>\n<p>三者源码下载地址：</p>\n<pre><code> http://www.zlib.net/\n http://www.openssl.org/\n http://www.openssh.org/</code></pre>\n<p>1.2、查看系统当前软件版本</p>\n<pre><code># rpm -q zlib\n# openssl version\n# ssh -V</code></pre>\n<p>1.3、配置在线yum源</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd <span class=\"regexp\">/etc/yum</span>.repos.d</span><br><span class=\"line\"># rm -rf *             #删除当前所有yum源文件</span><br><span class=\"line\"></span><br><span class=\"line\"># wget -O <span class=\"regexp\">/etc/yum</span>.repos.d<span class=\"regexp\">/CentOS-Base.repo http:/</span><span class=\"regexp\">/mirrors.aliyun.com/</span>repo/Centos-<span class=\"number\">6</span>.repo   #连接阿里云在线源</span><br></pre></td></tr></table></figure>\n\n<p>1.4、安装telnet服务并启用</p>\n<blockquote>\n<p>因升级OpenSSH过程中需要卸载现有OpenSSH, 因此为了保持服务器的远程连接可用，需要启用telnet服务作为替代，如升级出现问题，也可通过telnet登录服务器进行回退。</p>\n</blockquote>\n<p>   A、安装telnet服务</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># yum -y install telnet-server*</span></span><br></pre></td></tr></table></figure>\n<p>   B、启用telnet</p>\n<p>   先关闭防火墙，否则telnet可能无法连接</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># service iptables stop</span></span><br><span class=\"line\"><span class=\"meta\"># chkconfig iptables off</span></span><br><span class=\"line\"><span class=\"meta\"># vi /etc/xinetd.d/telnet</span></span><br><span class=\"line\">将其中disable字段的yes改为no以启用telnet服务</span><br><span class=\"line\"><span class=\"meta\"># mv /etc/securetty /etc/securetty.old          #允许root用户通过telnet登录</span></span><br><span class=\"line\"><span class=\"meta\"># /etc/init.d/xinetd start       #启动telnet服务</span></span><br><span class=\"line\"><span class=\"meta\"># chkconfig xinetd on              #使telnet服务开机启动，避免升级过程中服务器意外重启后无法远程登录系统</span></span><br><span class=\"line\"><span class=\"meta\"># telnet [ip]                 #新开启一个远程终端以telnet登录验证是否成功启用</span></span><br></pre></td></tr></table></figure>\n<p>1.5、安装编译所需工具包</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># yum -y install gcc pam-devel zlib-devel</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、正式升级\"><a href=\"#2、正式升级\" class=\"headerlink\" title=\"2、正式升级\"></a>2、正式升级</h4><p>2.1、升级ZLIB</p>\n<p>A、解压zlib_1.2.11源码并编译</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># tar -zxvf zlib-1.2.11.tar.gz</span></span><br><span class=\"line\"><span class=\"meta\"># cd zlib-1.2.11</span></span><br><span class=\"line\"><span class=\"meta\"># ./configure --prefix=/usr</span></span><br><span class=\"line\"><span class=\"meta\"># make</span></span><br></pre></td></tr></table></figure>\n<p>B、卸载当前zlib</p>\n<blockquote>\n<p>注意：此步骤必须在步骤A执行完毕后再执行，否则先卸载zlib后，/lib64/目录下的zlib相关库文件会被删除，步骤A编译zlib会失败。</p>\n</blockquote>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># rpm -e --nodeps zlib </span></span><br></pre></td></tr></table></figure>\n\n<p>C、安装之前编译好的zlib </p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># make install </span></span><br></pre></td></tr></table></figure>\n<p>在zlib编译目录执行如下命令</p>\n<p>D、共享库注册</p>\n<blockquote>\n<p>zlib安装完成后，会在/usr/lib目录中生产zlib相关库文件，需要将这些共享库文件注册到系统中。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;/usr/lib&#x27;</span> &gt;&gt; /etc/ld.so.conf</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ldconfig <span class=\"comment\">#更新共享库cache</span></span></span><br></pre></td></tr></table></figure>\n\n<p>2.2、升级OpenSSL</p>\n<p>A、备份当前openssl</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"keyword\">find</span> / -name openssl</span><br><span class=\"line\">  <span class=\"regexp\">/usr/</span>lib64/openssl</span><br><span class=\"line\">  <span class=\"regexp\">/usr/</span>bin/openssl</span><br><span class=\"line\">  <span class=\"regexp\">/etc/</span>pki<span class=\"regexp\">/ca-trust/</span>extracted/openssl</span><br><span class=\"line\"></span><br><span class=\"line\"># mv <span class=\"regexp\">/usr/</span>lib64<span class=\"regexp\">/openssl /u</span>sr<span class=\"regexp\">/lib64/</span>openssl.old</span><br><span class=\"line\"># mv <span class=\"regexp\">/usr/</span>bin<span class=\"regexp\">/openssl /u</span>sr<span class=\"regexp\">/bin/</span>openssl.old</span><br><span class=\"line\"># mv <span class=\"regexp\">/etc/</span>pki<span class=\"regexp\">/ca-trust/</span>extracted<span class=\"regexp\">/openssl /</span>etc<span class=\"regexp\">/pki/</span>ca-trust<span class=\"regexp\">/extracted/</span>openssl.old</span><br><span class=\"line\"></span><br><span class=\"line\">如下两个库文件必须先备份，因系统内部分工具（如yum、wget等）依赖此库，而新版OpenSSL不包含这两个库</span><br><span class=\"line\"># cp <span class=\"regexp\">/usr/</span>lib64<span class=\"regexp\">/libcrypto.so.10 /u</span>sr<span class=\"regexp\">/lib64/</span>libcrypto.so.<span class=\"number\">10</span>.old</span><br><span class=\"line\"># cp <span class=\"regexp\">/usr/</span>lib64<span class=\"regexp\">/libssl.so.10 /u</span>sr<span class=\"regexp\">/lib64/</span>libssl.so.<span class=\"number\">10</span>.old</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>B、卸载当前openssl</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qa | grep openssl</span></span><br><span class=\"line\">   <span class=\"attribute\">openssl</span>-<span class=\"number\">1</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>e-<span class=\"number\">42</span>.el<span class=\"number\">6</span>.x<span class=\"number\">86</span>_<span class=\"number\">64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rpm -e --nodeps openssl-1.0.1e-42.el6.x86_64</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -qa | grep openssl</span></span><br></pre></td></tr></table></figure>\n\n<p>C、解压openssl_1.0.2k源码并编译安装</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># tar -zxvf openssl-1.0.2k.tar.gz</span></span><br><span class=\"line\"><span class=\"meta\"># cd openssl-1.0.2k</span></span><br><span class=\"line\"><span class=\"meta\"># ./config --prefix=/usr --openssldir=/etc/ssl --shared zlib                                #必须加上--shared，否则编译时会找不到新安装的openssl的库而报错</span></span><br><span class=\"line\"><span class=\"meta\"># make</span></span><br><span class=\"line\"><span class=\"meta\"># make test                             #必须执行这一步结果为pass才能继续，否则即使安装完成，ssh也无法使用</span></span><br><span class=\"line\"><span class=\"meta\"># make install</span></span><br><span class=\"line\"><span class=\"meta\"># openssl version -a                           #查看是否升级成功</span></span><br></pre></td></tr></table></figure>\n\n<p>D、恢复共享库</p>\n<blockquote>\n<p>由于OpenSSL_1.0.2k不提供libcrypto.so.10和libssl.so.10这两个库，而yum、wget等工具又依赖此库，因此需要将先前备份的这两个库进行恢复，其他的可视情况考虑是否恢复。</p>\n</blockquote>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mv <span class=\"regexp\">/usr/</span>lib64<span class=\"regexp\">/libcrypto.so.10.old  /u</span>sr<span class=\"regexp\">/lib64/</span>libcrypto.so.<span class=\"number\">10</span></span><br><span class=\"line\"># mv <span class=\"regexp\">/usr/</span>lib64<span class=\"regexp\">/libssl.so.10.old   /u</span>sr<span class=\"regexp\">/lib64/</span>libssl.so.</span><br></pre></td></tr></table></figure>\n\n<p>2.3、升级OpenSSH</p>\n<p>A、备份当前openssh</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mv <span class=\"regexp\">/etc/</span>ssh  <span class=\"regexp\">/etc/</span>ssh.old</span><br></pre></td></tr></table></figure>\n\n<p>B、卸载当前openssh</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qa | grep openssh</span></span><br><span class=\"line\"><span class=\"attribute\">openssh</span>-clients-<span class=\"number\">5</span>.<span class=\"number\">3</span>p<span class=\"number\">1</span>-<span class=\"number\">111</span>.el<span class=\"number\">6</span>.x<span class=\"number\">86</span>_<span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"attribute\">openssh</span>-server-<span class=\"number\">5</span>.<span class=\"number\">3</span>p<span class=\"number\">1</span>-<span class=\"number\">111</span>.el<span class=\"number\">6</span>.x<span class=\"number\">86</span>_<span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"attribute\">openssh</span>-<span class=\"number\">5</span>.<span class=\"number\">3</span>p<span class=\"number\">1</span>-<span class=\"number\">111</span>.el<span class=\"number\">6</span>.x<span class=\"number\">86</span>_<span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"attribute\">openssh</span>-askpass-<span class=\"number\">5</span>.<span class=\"number\">3</span>p<span class=\"number\">1</span>-<span class=\"number\">111</span>.el<span class=\"number\">6</span>.x<span class=\"number\">86</span>_<span class=\"number\">64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rpm -e --nodeps openssh-5.3p1-111.el6.x86_64</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -e --nodeps openssh-server-5.3p1-111.el6.x86_64</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -e --nodeps openssh-clients-5.3p1-111.el6.x86_64</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -e --nodeps openssh-askpass-5.3p1-111.el6.x86_64</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -qa | grep openssh                # 查看是否卸载成功</span></span><br></pre></td></tr></table></figure>\n\n<p>C、openssh安装前环境配置</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># install -v -m700 -d <span class=\"regexp\">/var/</span>lib/sshd</span><br><span class=\"line\"># chown -v root:sys <span class=\"regexp\">/var/</span>lib/sshd</span><br><span class=\"line\"># groupadd -g <span class=\"number\">50</span> sshd</span><br><span class=\"line\"># useradd -c <span class=\"string\">&#x27;sshd PrivSep&#x27;</span> -d <span class=\"regexp\">/var/</span>lib<span class=\"regexp\">/sshd -g sshd -s /</span>bin/<span class=\"keyword\">false</span> -u <span class=\"number\">50</span> sshd</span><br></pre></td></tr></table></figure>\n\n<p>D、解压openssh_7.4p1源码并编译安装</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tar -zxvf openssh<span class=\"number\">-8.1</span>p1.tar.gz</span><br><span class=\"line\"># cd openssh<span class=\"number\">-8.1</span>p1</span><br><span class=\"line\"># ./configure --prefix=/usr --sysconfdir=/etc/ssh --<span class=\"keyword\">with</span>-md5-passwords --<span class=\"keyword\">with</span>-pam --<span class=\"keyword\">with</span>-zlib --<span class=\"keyword\">with</span>-openssl-includes=/usr --<span class=\"keyword\">with</span>-privsep-path=/var/lib/sshd</span><br><span class=\"line\"># make</span><br><span class=\"line\"># make install</span><br></pre></td></tr></table></figure>\n\n<p>E、openssh安装后环境配置</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在openssh编译目录执行如下命令</span><br><span class=\"line\"># install -v -m755 contrib<span class=\"regexp\">/ssh-copy-id /u</span>sr/bin</span><br><span class=\"line\"># install -v -m644 contrib<span class=\"regexp\">/ssh-copy-id.1 /u</span>sr<span class=\"regexp\">/share/m</span>an/man1</span><br><span class=\"line\"># install -v -m755 -d <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/doc/</span>openssh-<span class=\"number\">8.1</span>p1</span><br><span class=\"line\"># install -v -m644 INSTALL LICENCE OVERVIEW README* <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/doc/</span>openssh-<span class=\"number\">8.1</span>p1</span><br><span class=\"line\"># ssh -V #验证是否升级成功</span><br></pre></td></tr></table></figure>\n\n<p>F、启用OpenSSH服务</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 在openssh编译目录执行如下目录</span></span><br><span class=\"line\"><span class=\"meta\"># echo &#x27;X11Forwarding yes&#x27; &gt;&gt; /etc/ssh/sshd_config</span></span><br><span class=\"line\"><span class=\"meta\"># echo &quot;PermitRootLogin yes&quot; &gt;&gt; /etc/ssh/sshd_config #允许root用户通过ssh登录</span></span><br><span class=\"line\"><span class=\"meta\"># cp -p contrib/redhat/sshd.init /etc/init.d/sshd</span></span><br><span class=\"line\"><span class=\"meta\"># chmod +x /etc/init.d/sshd</span></span><br><span class=\"line\"><span class=\"meta\"># chkconfig --add sshd</span></span><br><span class=\"line\"><span class=\"meta\"># chkconfig sshd on</span></span><br><span class=\"line\"><span class=\"meta\"># chkconfig --list sshd</span></span><br><span class=\"line\"><span class=\"meta\"># /etc/init.d/sshd restart</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：如果升级操作一直是在ssh远程会话中进行的，上述sshd服务重启命令可能导致会话断开并无法使用ssh再行登入（即ssh未能成功重启），此时需要通过telnet登入再执行sshd服务重启命令。</p>\n</blockquote>\n<h4 id=\"3、善后工作\"><a href=\"#3、善后工作\" class=\"headerlink\" title=\"3、善后工作\"></a>3、善后工作</h4><blockquote>\n<p>新开启远程终端以ssh [ip]登录系统，确认一切正常升级成功后，只需关闭telnet服务以保证系统安全性即可。</p>\n</blockquote>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mv <span class=\"regexp\">/etc/</span>securetty.old  <span class=\"regexp\">/etc/</span>securetty</span><br><span class=\"line\"># chkconfig xinetd off</span><br><span class=\"line\"># <span class=\"regexp\">/etc/i</span>nit.d/xinetd stop</span><br></pre></td></tr></table></figure>"},{"title":"本地MySQL数据库迁移到阿里云RDS","author":"Semaik.","date":"2020-09-11T07:29:00.000Z","_content":"##### 连接本地数据库\n```ruby\nmysql -h localhost -u root -p\n```\n\n##### 创建账号\n> 首先要在本地创建一个用来迁移的帐号，并给这个帐号设置权限。\n```ruby\nCREATE USER 'username'@'host' IDENTIFIED BY 'password';\n```\n> sername：待创建的账号。\n> host：允许该账号登录的主机，如果允许该账号从任意主机登录数据库，可以使用百分号（%）\n> password：账号的密码。 \n\nEG：\n```ruby\n# 例如，创建一个账号，账号名为dtsmigration\n# 密码为Dts123456，并允许从任意主机登录数据库，命令如下。\nCREATE USER 'dtsmigration'@'%' IDENTIFIED BY 'Dts123456';\n```\n\n##### 用户授权\n```ruby\nGRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;\n```\n>privileges：授予该账号的操作权限，如SELECT、INSERT、UPDATE等，如果要授予该账号所有权限则使用ALL。\ndatabasename：数据库名。如果要授予该账号具备所有数据库的操作权限，则使用星号（）。\ntablename：表名。如果要授予该账号具备所有表的操作权限，则使用星号（）。\nusername：待授权的账号。\nhost：允许该账号登录的主机，如果允许该账号从任意主机登录，则使用百分号（%）。\n>WITH GRANT OPTION：授予该账号使用GRANT命令的权限，该参数为可选。\n   \nEG:\n```ruby\n# 授予dtsmigration账号具备所有数据库和表的所有权限\n# 并允许从任意主机登录数据库，命令如下。\nGRANT ALL ON *.* TO 'dtsmigration'@'%';\n```\n   \n### 本地数据库状态\n##### 1.确认源库的binlog是否开启\n```ruby\nshow global variables like \"log_bin\";\n```\n###### 不是的话配置一下my.cnf\n```ruby\nlog_bin=mysql_bin\nbinlog_format=row\nserver_id=2 //设置大于1的整数\nbinlog_row_image=full     **//当自建MySQL的版本大于5.6时，则必须设置该项**\n```\n###### 修改之后重启MySQL\n```ruby\nsystemctl restart mysql\n```\n##### 2.确认源库的binlog格式为row模式\n```ruby\nshow global variables like \"binlog_format\";\n```\n###### 不是的话配置一下\n```ruby\nset global binlog_format=ROW;\n```\n##### 3.当地mysql版本大等于5.6.2时，确认源库的binlog_row_image=full\n```ruby\nshow global variables like \"binlog_row_image\";\n```\n###### 不是的话配置一下\n```ruby\nset global binlog_row_image=full;\n```\n##### 进行迁移\n>阿里云官方文档\n[https://help.aliyun.com/document_detail/126875.html?spm=a2c4g.11186623.2.10.14554b43IHTNie](https://help.aliyun.com/document_detail/126875.html?spm=a2c4g.11186623.2.10.14554b43IHTNie)\n需要先设置一下网关\n[https://help.aliyun.com/document_detail/159587.html?spm=5176.10695662.1996646101.searchclickresult.1de2d223X9cjTe](https://help.aliyun.com/document_detail/159587.html?spm=5176.10695662.1996646101.searchclickresult.1de2d223X9cjTe)\n注意设置好网关之后要使用无公网:Port的数据库（通过数据库网关DG接入）\n\n","source":"_posts/本地MySQL数据库迁移到阿里云RDS.md","raw":"title: 本地MySQL数据库迁移到阿里云RDS\nauthor: Semaik.\ntags:\n  - Linux\ncategories:\n  - Linux\ndate: 2020-09-11 15:29:00\n---\n##### 连接本地数据库\n```ruby\nmysql -h localhost -u root -p\n```\n\n##### 创建账号\n> 首先要在本地创建一个用来迁移的帐号，并给这个帐号设置权限。\n```ruby\nCREATE USER 'username'@'host' IDENTIFIED BY 'password';\n```\n> sername：待创建的账号。\n> host：允许该账号登录的主机，如果允许该账号从任意主机登录数据库，可以使用百分号（%）\n> password：账号的密码。 \n\nEG：\n```ruby\n# 例如，创建一个账号，账号名为dtsmigration\n# 密码为Dts123456，并允许从任意主机登录数据库，命令如下。\nCREATE USER 'dtsmigration'@'%' IDENTIFIED BY 'Dts123456';\n```\n\n##### 用户授权\n```ruby\nGRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;\n```\n>privileges：授予该账号的操作权限，如SELECT、INSERT、UPDATE等，如果要授予该账号所有权限则使用ALL。\ndatabasename：数据库名。如果要授予该账号具备所有数据库的操作权限，则使用星号（）。\ntablename：表名。如果要授予该账号具备所有表的操作权限，则使用星号（）。\nusername：待授权的账号。\nhost：允许该账号登录的主机，如果允许该账号从任意主机登录，则使用百分号（%）。\n>WITH GRANT OPTION：授予该账号使用GRANT命令的权限，该参数为可选。\n   \nEG:\n```ruby\n# 授予dtsmigration账号具备所有数据库和表的所有权限\n# 并允许从任意主机登录数据库，命令如下。\nGRANT ALL ON *.* TO 'dtsmigration'@'%';\n```\n   \n### 本地数据库状态\n##### 1.确认源库的binlog是否开启\n```ruby\nshow global variables like \"log_bin\";\n```\n###### 不是的话配置一下my.cnf\n```ruby\nlog_bin=mysql_bin\nbinlog_format=row\nserver_id=2 //设置大于1的整数\nbinlog_row_image=full     **//当自建MySQL的版本大于5.6时，则必须设置该项**\n```\n###### 修改之后重启MySQL\n```ruby\nsystemctl restart mysql\n```\n##### 2.确认源库的binlog格式为row模式\n```ruby\nshow global variables like \"binlog_format\";\n```\n###### 不是的话配置一下\n```ruby\nset global binlog_format=ROW;\n```\n##### 3.当地mysql版本大等于5.6.2时，确认源库的binlog_row_image=full\n```ruby\nshow global variables like \"binlog_row_image\";\n```\n###### 不是的话配置一下\n```ruby\nset global binlog_row_image=full;\n```\n##### 进行迁移\n>阿里云官方文档\n[https://help.aliyun.com/document_detail/126875.html?spm=a2c4g.11186623.2.10.14554b43IHTNie](https://help.aliyun.com/document_detail/126875.html?spm=a2c4g.11186623.2.10.14554b43IHTNie)\n需要先设置一下网关\n[https://help.aliyun.com/document_detail/159587.html?spm=5176.10695662.1996646101.searchclickresult.1de2d223X9cjTe](https://help.aliyun.com/document_detail/159587.html?spm=5176.10695662.1996646101.searchclickresult.1de2d223X9cjTe)\n注意设置好网关之后要使用无公网:Port的数据库（通过数据库网关DG接入）\n\n","slug":"本地MySQL数据库迁移到阿里云RDS","published":1,"updated":"2020-09-11T07:33:24.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0w0t26000xfipvd5p44eam","content":"<h5 id=\"连接本地数据库\"><a href=\"#连接本地数据库\" class=\"headerlink\" title=\"连接本地数据库\"></a>连接本地数据库</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h localhost -u root -p</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建账号\"><a href=\"#创建账号\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h5><blockquote>\n<p>首先要在本地创建一个用来迁移的帐号，并给这个帐号设置权限。</p>\n</blockquote>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>sername：待创建的账号。<br>host：允许该账号登录的主机，如果允许该账号从任意主机登录数据库，可以使用百分号（%）<br>password：账号的密码。 </p>\n</blockquote>\n<p>EG：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如，创建一个账号，账号名为dtsmigration</span></span><br><span class=\"line\"><span class=\"comment\"># 密码为Dts123456，并允许从任意主机登录数据库，命令如下。</span></span><br><span class=\"line\">CREATE USER <span class=\"string\">&#x27;dtsmigration&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;Dts123456&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"用户授权\"><a href=\"#用户授权\" class=\"headerlink\" title=\"用户授权\"></a>用户授权</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT privileges ON databasename.tablename TO <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>privileges：授予该账号的操作权限，如SELECT、INSERT、UPDATE等，如果要授予该账号所有权限则使用ALL。<br>databasename：数据库名。如果要授予该账号具备所有数据库的操作权限，则使用星号（）。<br>tablename：表名。如果要授予该账号具备所有表的操作权限，则使用星号（）。<br>username：待授权的账号。<br>host：允许该账号登录的主机，如果允许该账号从任意主机登录，则使用百分号（%）。<br>WITH GRANT OPTION：授予该账号使用GRANT命令的权限，该参数为可选。</p>\n</blockquote>\n<p>EG:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 授予dtsmigration账号具备所有数据库和表的所有权限</span></span><br><span class=\"line\"><span class=\"comment\"># 并允许从任意主机登录数据库，命令如下。</span></span><br><span class=\"line\">GRANT ALL ON *.* TO <span class=\"string\">&#x27;dtsmigration&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地数据库状态\"><a href=\"#本地数据库状态\" class=\"headerlink\" title=\"本地数据库状态\"></a>本地数据库状态</h3><h5 id=\"1-确认源库的binlog是否开启\"><a href=\"#1-确认源库的binlog是否开启\" class=\"headerlink\" title=\"1.确认源库的binlog是否开启\"></a>1.确认源库的binlog是否开启</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like <span class=\"string\">&quot;log_bin&quot;</span>;</span><br></pre></td></tr></table></figure>\n<h6 id=\"不是的话配置一下my-cnf\"><a href=\"#不是的话配置一下my-cnf\" class=\"headerlink\" title=\"不是的话配置一下my.cnf\"></a>不是的话配置一下my.cnf</h6><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_bin=mysql_bin</span><br><span class=\"line\">binlog_format=row</span><br><span class=\"line\">server_id=<span class=\"number\">2</span> /<span class=\"regexp\">/设置大于1的整数</span></span><br><span class=\"line\"><span class=\"regexp\">binlog_row_image=full     **/</span><span class=\"regexp\">/当自建MySQL的版本大于5.6时，则必须设置该项**</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"修改之后重启MySQL\"><a href=\"#修改之后重启MySQL\" class=\"headerlink\" title=\"修改之后重启MySQL\"></a>修改之后重启MySQL</h6><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysql</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-确认源库的binlog格式为row模式\"><a href=\"#2-确认源库的binlog格式为row模式\" class=\"headerlink\" title=\"2.确认源库的binlog格式为row模式\"></a>2.确认源库的binlog格式为row模式</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like <span class=\"string\">&quot;binlog_format&quot;</span>;</span><br></pre></td></tr></table></figure>\n<h6 id=\"不是的话配置一下\"><a href=\"#不是的话配置一下\" class=\"headerlink\" title=\"不是的话配置一下\"></a>不是的话配置一下</h6><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global binlog_format=ROW;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-当地mysql版本大等于5-6-2时，确认源库的binlog-row-image-full\"><a href=\"#3-当地mysql版本大等于5-6-2时，确认源库的binlog-row-image-full\" class=\"headerlink\" title=\"3.当地mysql版本大等于5.6.2时，确认源库的binlog_row_image=full\"></a>3.当地mysql版本大等于5.6.2时，确认源库的binlog_row_image=full</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like <span class=\"string\">&quot;binlog_row_image&quot;</span>;</span><br></pre></td></tr></table></figure>\n<h6 id=\"不是的话配置一下-1\"><a href=\"#不是的话配置一下-1\" class=\"headerlink\" title=\"不是的话配置一下\"></a>不是的话配置一下</h6><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global binlog_row_image=full;</span><br></pre></td></tr></table></figure>\n<h5 id=\"进行迁移\"><a href=\"#进行迁移\" class=\"headerlink\" title=\"进行迁移\"></a>进行迁移</h5><blockquote>\n<p>阿里云官方文档<br><a href=\"https://help.aliyun.com/document_detail/126875.html?spm=a2c4g.11186623.2.10.14554b43IHTNie\">https://help.aliyun.com/document_detail/126875.html?spm=a2c4g.11186623.2.10.14554b43IHTNie</a><br>需要先设置一下网关<br><a href=\"https://help.aliyun.com/document_detail/159587.html?spm=5176.10695662.1996646101.searchclickresult.1de2d223X9cjTe\">https://help.aliyun.com/document_detail/159587.html?spm=5176.10695662.1996646101.searchclickresult.1de2d223X9cjTe</a><br>注意设置好网关之后要使用无公网:Port的数据库（通过数据库网关DG接入）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"连接本地数据库\"><a href=\"#连接本地数据库\" class=\"headerlink\" title=\"连接本地数据库\"></a>连接本地数据库</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h localhost -u root -p</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建账号\"><a href=\"#创建账号\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h5><blockquote>\n<p>首先要在本地创建一个用来迁移的帐号，并给这个帐号设置权限。</p>\n</blockquote>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>sername：待创建的账号。<br>host：允许该账号登录的主机，如果允许该账号从任意主机登录数据库，可以使用百分号（%）<br>password：账号的密码。 </p>\n</blockquote>\n<p>EG：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如，创建一个账号，账号名为dtsmigration</span></span><br><span class=\"line\"><span class=\"comment\"># 密码为Dts123456，并允许从任意主机登录数据库，命令如下。</span></span><br><span class=\"line\">CREATE USER <span class=\"string\">&#x27;dtsmigration&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;Dts123456&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"用户授权\"><a href=\"#用户授权\" class=\"headerlink\" title=\"用户授权\"></a>用户授权</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT privileges ON databasename.tablename TO <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>privileges：授予该账号的操作权限，如SELECT、INSERT、UPDATE等，如果要授予该账号所有权限则使用ALL。<br>databasename：数据库名。如果要授予该账号具备所有数据库的操作权限，则使用星号（）。<br>tablename：表名。如果要授予该账号具备所有表的操作权限，则使用星号（）。<br>username：待授权的账号。<br>host：允许该账号登录的主机，如果允许该账号从任意主机登录，则使用百分号（%）。<br>WITH GRANT OPTION：授予该账号使用GRANT命令的权限，该参数为可选。</p>\n</blockquote>\n<p>EG:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 授予dtsmigration账号具备所有数据库和表的所有权限</span></span><br><span class=\"line\"><span class=\"comment\"># 并允许从任意主机登录数据库，命令如下。</span></span><br><span class=\"line\">GRANT ALL ON *.* TO <span class=\"string\">&#x27;dtsmigration&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地数据库状态\"><a href=\"#本地数据库状态\" class=\"headerlink\" title=\"本地数据库状态\"></a>本地数据库状态</h3><h5 id=\"1-确认源库的binlog是否开启\"><a href=\"#1-确认源库的binlog是否开启\" class=\"headerlink\" title=\"1.确认源库的binlog是否开启\"></a>1.确认源库的binlog是否开启</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like <span class=\"string\">&quot;log_bin&quot;</span>;</span><br></pre></td></tr></table></figure>\n<h6 id=\"不是的话配置一下my-cnf\"><a href=\"#不是的话配置一下my-cnf\" class=\"headerlink\" title=\"不是的话配置一下my.cnf\"></a>不是的话配置一下my.cnf</h6><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_bin=mysql_bin</span><br><span class=\"line\">binlog_format=row</span><br><span class=\"line\">server_id=<span class=\"number\">2</span> /<span class=\"regexp\">/设置大于1的整数</span></span><br><span class=\"line\"><span class=\"regexp\">binlog_row_image=full     **/</span><span class=\"regexp\">/当自建MySQL的版本大于5.6时，则必须设置该项**</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"修改之后重启MySQL\"><a href=\"#修改之后重启MySQL\" class=\"headerlink\" title=\"修改之后重启MySQL\"></a>修改之后重启MySQL</h6><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysql</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-确认源库的binlog格式为row模式\"><a href=\"#2-确认源库的binlog格式为row模式\" class=\"headerlink\" title=\"2.确认源库的binlog格式为row模式\"></a>2.确认源库的binlog格式为row模式</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like <span class=\"string\">&quot;binlog_format&quot;</span>;</span><br></pre></td></tr></table></figure>\n<h6 id=\"不是的话配置一下\"><a href=\"#不是的话配置一下\" class=\"headerlink\" title=\"不是的话配置一下\"></a>不是的话配置一下</h6><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global binlog_format=ROW;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-当地mysql版本大等于5-6-2时，确认源库的binlog-row-image-full\"><a href=\"#3-当地mysql版本大等于5-6-2时，确认源库的binlog-row-image-full\" class=\"headerlink\" title=\"3.当地mysql版本大等于5.6.2时，确认源库的binlog_row_image=full\"></a>3.当地mysql版本大等于5.6.2时，确认源库的binlog_row_image=full</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like <span class=\"string\">&quot;binlog_row_image&quot;</span>;</span><br></pre></td></tr></table></figure>\n<h6 id=\"不是的话配置一下-1\"><a href=\"#不是的话配置一下-1\" class=\"headerlink\" title=\"不是的话配置一下\"></a>不是的话配置一下</h6><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set global binlog_row_image=full;</span><br></pre></td></tr></table></figure>\n<h5 id=\"进行迁移\"><a href=\"#进行迁移\" class=\"headerlink\" title=\"进行迁移\"></a>进行迁移</h5><blockquote>\n<p>阿里云官方文档<br><a href=\"https://help.aliyun.com/document_detail/126875.html?spm=a2c4g.11186623.2.10.14554b43IHTNie\">https://help.aliyun.com/document_detail/126875.html?spm=a2c4g.11186623.2.10.14554b43IHTNie</a><br>需要先设置一下网关<br><a href=\"https://help.aliyun.com/document_detail/159587.html?spm=5176.10695662.1996646101.searchclickresult.1de2d223X9cjTe\">https://help.aliyun.com/document_detail/159587.html?spm=5176.10695662.1996646101.searchclickresult.1de2d223X9cjTe</a><br>注意设置好网关之后要使用无公网:Port的数据库（通过数据库网关DG接入）</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckf0w0t1w0008fipvh6hn8qnq","category_id":"ckf0w0t1t0004fipv1luu1sjq","_id":"ckf0w0t21000gfipveng93t3g"},{"post_id":"ckf0w0t1f0001fipv21kq1cok","category_id":"ckf0w0t1t0004fipv1luu1sjq","_id":"ckf0w0t22000lfipvb9jwhigr"},{"post_id":"ckf0w0t1h0003fipv09xs8aic","category_id":"ckf0w0t1t0004fipv1luu1sjq","_id":"ckf0w0t23000ofipvazrtd0ry"},{"post_id":"ckf0w0t22000kfipvb78zaylc","category_id":"ckf0w0t1t0004fipv1luu1sjq","_id":"ckf0w0t26000ufipv4g7ef26b"},{"post_id":"ckf0w0t1v0007fipva6ex1f0q","category_id":"ckf0w0t1t0004fipv1luu1sjq","_id":"ckf0w0t27000yfipv7qv574kh"},{"post_id":"ckf0w0t1x0009fipv63bx9r5j","category_id":"ckf0w0t23000nfipv3ypk9oee","_id":"ckf0w0t270011fipv5w9kednv"},{"post_id":"ckf0w0t1z000dfipvhnzgcefi","category_id":"ckf0w0t23000nfipv3ypk9oee","_id":"ckf0w0t280014fipva7bqaffo"},{"post_id":"ckf0w0t20000ffipvaoa940js","category_id":"ckf0w0t270010fipv0ppsdlo2","_id":"ckf0w0t280018fipv1gn4d359"},{"post_id":"ckf0w0t24000rfipv5m7t2vkw","category_id":"ckf0w0t280015fipvfq0actc6","_id":"ckf0w0t29001dfipv1qpj06wl"},{"post_id":"ckf0w0t25000tfipv85ozhq77","category_id":"ckf0w0t270010fipv0ppsdlo2","_id":"ckf0w0t2a001gfipv7evgeoo3"},{"post_id":"ckf0w0t26000xfipvd5p44eam","category_id":"ckf0w0t270010fipv0ppsdlo2","_id":"ckf0w0t2a001ifipvejij2gjq"}],"PostTag":[{"post_id":"ckf0w0t1w0008fipvh6hn8qnq","tag_id":"ckf0w0t1u0005fipv1ytkhlel","_id":"ckf0w0t1z000cfipvgtwng6w3"},{"post_id":"ckf0w0t1f0001fipv21kq1cok","tag_id":"ckf0w0t1u0005fipv1ytkhlel","_id":"ckf0w0t20000efipv4qqo7ttk"},{"post_id":"ckf0w0t1h0003fipv09xs8aic","tag_id":"ckf0w0t1u0005fipv1ytkhlel","_id":"ckf0w0t22000jfipvetudf82r"},{"post_id":"ckf0w0t22000kfipvb78zaylc","tag_id":"ckf0w0t1u0005fipv1ytkhlel","_id":"ckf0w0t24000qfipv1l4x9jv3"},{"post_id":"ckf0w0t1v0007fipva6ex1f0q","tag_id":"ckf0w0t1u0005fipv1ytkhlel","_id":"ckf0w0t25000sfipv14o5d625"},{"post_id":"ckf0w0t1x0009fipv63bx9r5j","tag_id":"ckf0w0t23000pfipvcsl1ay0f","_id":"ckf0w0t27000zfipv3k289rax"},{"post_id":"ckf0w0t1z000dfipvhnzgcefi","tag_id":"ckf0w0t23000pfipvcsl1ay0f","_id":"ckf0w0t280013fipvblwlh91e"},{"post_id":"ckf0w0t20000ffipvaoa940js","tag_id":"ckf0w0t270012fipv6u2z5yje","_id":"ckf0w0t280017fipv7j615kzd"},{"post_id":"ckf0w0t24000rfipv5m7t2vkw","tag_id":"ckf0w0t280016fipv562ld5vv","_id":"ckf0w0t29001bfipv29ck3dtz"},{"post_id":"ckf0w0t25000tfipv85ozhq77","tag_id":"ckf0w0t270012fipv6u2z5yje","_id":"ckf0w0t2a001ffipvg2sp4un1"},{"post_id":"ckf0w0t26000xfipvd5p44eam","tag_id":"ckf0w0t270012fipv6u2z5yje","_id":"ckf0w0t2a001hfipv4drgcsca"}],"Tag":[{"name":"Docker","_id":"ckf0w0t1u0005fipv1ytkhlel"},{"name":"Hexo","_id":"ckf0w0t23000pfipvcsl1ay0f"},{"name":"Linux","_id":"ckf0w0t270012fipv6u2z5yje"},{"name":"Kubetnetes","_id":"ckf0w0t280016fipv562ld5vv"}]}}